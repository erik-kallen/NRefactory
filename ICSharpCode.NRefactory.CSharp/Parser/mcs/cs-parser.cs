// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011-2012 Xamarin Inc.
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceContainer current_namespace;
		TypeContainer current_container;
		TypeDefinition current_type;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		List<Parameter> parameters_bucket;
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
		Location parameterModifierLocation, savedLocation, savedOpenLocation, savedCloseLocation;
		Location savedAttrParenOpenLocation, savedAttrParenCloseLocation, savedOperatorLocation;
		Stack<List<Location>> locationListStack = new Stack<List<Location>> (); // used for type parameters
		Stack<Location> opt_intoStack = new Stack<Location> ();

		bool HadAttributeParens;
		List<Location> attributeCommas = new List<Location> ();
		List<Location> attributeArgumentCommas = new List<Location> ();
		List<Location> parameterListCommas = new List<Location> ();
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }
#pragma warning disable 649
  /* An EOF token */
  public int eof_token;
#pragma warning restore 649
  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 7;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declaration opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "compilation_unit : documentation_parsing",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations opt_attributes",
//t    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
//t    "outer_declaration : error",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "using_directives : using_directive",
//t    "using_directives : using_directives using_directive",
//t    "using_directive : using_namespace",
//t    "using_namespace : USING namespace_or_type_expr SEMICOLON",
//t    "using_namespace : USING IDENTIFIER ASSIGN namespace_or_type_expr SEMICOLON",
//t    "using_namespace : USING error",
//t    "$$2 :",
//t    "$$3 :",
//t    "namespace_declaration : opt_attributes NAMESPACE namespace_name $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_or_type_declarations CLOSE_BRACE opt_semicolon",
//t    "namespace_declaration : opt_attributes NAMESPACE namespace_name",
//t    "namespace_name : IDENTIFIER",
//t    "namespace_name : namespace_name DOT IDENTIFIER",
//t    "namespace_name : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "opt_using_directives :",
//t    "opt_using_directives : using_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_namespace_or_type_declarations :",
//t    "opt_namespace_or_type_declarations : namespace_or_type_declarations",
//t    "namespace_or_type_declarations : namespace_or_type_declaration",
//t    "namespace_or_type_declarations : namespace_or_type_declarations namespace_or_type_declaration",
//t    "namespace_or_type_declaration : type_declaration",
//t    "namespace_or_type_declaration : namespace_declaration",
//t    "namespace_or_type_declaration : attribute_sections CLOSE_BRACE",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "$$4 :",
//t    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
//t    "$$5 :",
//t    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$6 :",
//t    "attribute : attribute_name $$6 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_expr",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$7 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
//t    "named_argument : identifier_inside_body COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : constructor_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : attributes_without_members",
//t    "class_member_declaration : error",
//t    "$$8 :",
//t    "$$9 :",
//t    "$$10 :",
//t    "$$11 :",
//t    "$$12 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$8 type_declaration_name $$9 opt_class_base opt_type_parameter_constraints_clauses $$10 OPEN_BRACE $$11 opt_class_member_declarations CLOSE_BRACE $$12 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$13 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$13 constant_initializer opt_constant_declarators SEMICOLON",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type error",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$14 :",
//t    "constant_initializer : ASSIGN $$14 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "constant_initializer_expr : array_initializer",
//t    "$$15 :",
//t    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$15 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$16 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$16 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$17 :",
//t    "opt_field_initializer : ASSIGN $$17 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$18 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$18 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$19 :",
//t    "fixed_field_size : OPEN_BRACKET $$19 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "variable_initializer : error",
//t    "$$20 :",
//t    "method_declaration : method_header $$20 method_body",
//t    "$$21 :",
//t    "$$22 :",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$21 opt_formal_parameter_list CLOSE_PARENS $$22 opt_type_parameter_constraints_clauses",
//t    "$$23 :",
//t    "$$24 :",
//t    "$$25 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL VOID $$23 method_declaration_name OPEN_PARENS $$24 opt_formal_parameter_list CLOSE_PARENS $$25 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name error",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "formal_parameter_list : error",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
//t    "fixed_parameter : attribute_sections error",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
//t    "$$26 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER ASSIGN $$26 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$27 :",
//t    "$$28 :",
//t    "$$29 :",
//t    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$27 OPEN_BRACE $$28 accessor_declarations $$29 CLOSE_BRACE",
//t    "$$30 :",
//t    "$$31 :",
//t    "$$32 :",
//t    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$30 opt_formal_parameter_list CLOSE_BRACKET $$31 OPEN_BRACE accessor_declarations $$32 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$33 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$33 accessor_body",
//t    "$$34 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$34 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$35 :",
//t    "$$36 :",
//t    "$$37 :",
//t    "$$38 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$35 type_declaration_name $$36 opt_class_base opt_type_parameter_constraints_clauses $$37 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$38 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : constructor_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$39 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$39 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$40 :",
//t    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$40 opt_formal_parameter_list CLOSE_PARENS",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "$$41 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$41 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$42 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$42 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "constructor_declaration : constructor_declarator constructor_body",
//t    "$$43 :",
//t    "$$44 :",
//t    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$43 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$44 opt_constructor_initializer",
//t    "constructor_body : block_prepared",
//t    "constructor_body : SEMICOLON",
//t    "opt_constructor_initializer :",
//t    "opt_constructor_initializer : constructor_initializer",
//t    "$$45 :",
//t    "constructor_initializer : COLON BASE OPEN_PARENS $$45 opt_argument_list CLOSE_PARENS",
//t    "$$46 :",
//t    "constructor_initializer : COLON THIS OPEN_PARENS $$46 opt_argument_list CLOSE_PARENS",
//t    "constructor_initializer : COLON error",
//t    "constructor_initializer : error",
//t    "$$47 :",
//t    "destructor_declaration : opt_attributes opt_modifiers TILDE $$47 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$48 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$48 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$49 :",
//t    "$$50 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$49 event_accessor_declarations $$50 CLOSE_BRACE",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type error",
//t    "opt_event_initializer :",
//t    "$$51 :",
//t    "opt_event_initializer : ASSIGN $$51 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "$$52 :",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN $$52 event_variable_initializer",
//t    "$$53 :",
//t    "event_variable_initializer : $$53 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$54 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$54 event_accessor_block",
//t    "$$55 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$55 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "attributes_without_members : attribute_sections CLOSE_BRACE",
//t    "$$56 :",
//t    "$$57 :",
//t    "$$58 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$56 OPEN_BRACE $$57 opt_enum_member_declarations $$58 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$59 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$59 ASSIGN constant_expression",
//t    "enum_member_declaration : opt_attributes IDENTIFIER error",
//t    "enum_member_declaration : attributes_without_members",
//t    "$$60 :",
//t    "$$61 :",
//t    "$$62 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$60 opt_formal_parameter_list CLOSE_PARENS $$61 opt_type_parameter_constraints_clauses $$62 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_expr : member_name",
//t    "namespace_or_type_expr : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_name : simple_name_expr",
//t    "member_name : namespace_or_type_expr DOT IDENTIFIER opt_type_argument_list",
//t    "simple_name_expr : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$63 :",
//t    "type_declaration_name : IDENTIFIER $$63 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_expr opt_nullable",
//t    "type_expression : namespace_or_type_expr pointer_stars",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_expression : builtin_types pointer_stars",
//t    "type_expression : VOID pointer_stars",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : pointer_member_access",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression : undocumented_expressions",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : BASE DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "invocation_expression : primary_expression open_parens_any argument_list error",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA error",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments error",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR error",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : BASE OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifier array_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$64 :",
//t    "new_expr_type : $$64 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
//t    "anonymous_type_parameter : IDENTIFIER",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "$$65 :",
//t    "typeof_expression : TYPEOF $$65 open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : identifier_inside_body generic_dimension",
//t    "unbound_type_name : qualified_alias_member identifier_inside_body generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body",
//t    "unbound_type_name : unbound_type_name DOT identifier_inside_body generic_dimension",
//t    "unbound_type_name : namespace_or_type_expr DOT identifier_inside_body generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
//t    "$$66 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$66 block",
//t    "$$67 :",
//t    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$67 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$68 :",
//t    "anonymous_method_signature : OPEN_PARENS $$68 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "unary_expression : AWAIT prefixed_unary_expression",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression_or_error",
//t    "conditional_expression : null_coalescing_expression INTERR expression error",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
//t    "lambda_parameter : parameter_type identifier_inside_body",
//t    "lambda_parameter : IDENTIFIER",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "lambda_expression_body : lambda_expression_body_simple",
//t    "lambda_expression_body : block",
//t    "$$69 :",
//t    "lambda_expression_body_simple : $$69 expression_or_error",
//t    "expression_or_error : expression",
//t    "expression_or_error : error",
//t    "$$70 :",
//t    "lambda_expression : IDENTIFIER ARROW $$70 lambda_expression_body",
//t    "$$71 :",
//t    "lambda_expression : ASYNC identifier_inside_body ARROW $$71 lambda_expression_body",
//t    "$$72 :",
//t    "$$73 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$72 opt_lambda_parameter_list CLOSE_PARENS ARROW $$73 lambda_expression_body",
//t    "$$74 :",
//t    "$$75 :",
//t    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$74 opt_lambda_parameter_list CLOSE_PARENS ARROW $$75 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "non_assignment_expression : ARGLIST",
//t    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
//t    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
//t    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$76 :",
//t    "$$77 :",
//t    "$$78 :",
//t    "$$79 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$76 type_declaration_name $$77 opt_class_base opt_type_parameter_constraints_clauses $$78 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$79 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "modifier : ASYNC",
//t    "opt_class_base :",
//t    "opt_class_base : COLON type_list",
//t    "opt_class_base : COLON type_list error",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER error",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$80 :",
//t    "block : OPEN_BRACE $$80 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$81 :",
//t    "block_prepared : OPEN_BRACE $$81 opt_statement_list CLOSE_BRACE",
//t    "block_prepared : CLOSE_BRACE",
//t    "$$82 :",
//t    "block_prepared_strict : OPEN_BRACE $$82 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : block_variable_declaration",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "statement : IDENTIFIER error",
//t    "statement : error",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : block_variable_declaration",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : block_variable_declaration",
//t    "embedded_statement : labeled_statement",
//t    "embedded_statement : error",
//t    "empty_statement : SEMICOLON",
//t    "$$83 :",
//t    "labeled_statement : identifier_inside_body COLON $$83 statement",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : primary_expression_or_type pointer_stars",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : builtin_types pointer_stars",
//t    "variable_type_simple : VOID pointer_stars",
//t    "variable_type_simple : VOID",
//t    "pointer_stars : pointer_star",
//t    "pointer_stars : pointer_star pointer_stars",
//t    "pointer_star : STAR",
//t    "identifier_inside_body : IDENTIFIER",
//t    "identifier_inside_body : AWAIT",
//t    "$$84 :",
//t    "block_variable_declaration : variable_type identifier_inside_body $$84 opt_local_variable_initializer opt_variable_declarators semicolon_or_handle_error_close_brace",
//t    "$$85 :",
//t    "block_variable_declaration : CONST variable_type identifier_inside_body $$85 const_variable_initializer opt_const_declarators SEMICOLON",
//t    "semicolon_or_handle_error_close_brace : SEMICOLON",
//t    "semicolon_or_handle_error_close_brace : CLOSE_BRACE",
//t    "opt_local_variable_initializer :",
//t    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
//t    "opt_local_variable_initializer : ASSIGN error",
//t    "opt_local_variable_initializer : error",
//t    "opt_variable_declarators :",
//t    "opt_variable_declarators : variable_declarators",
//t    "opt_using_or_fixed_variable_declarators :",
//t    "opt_using_or_fixed_variable_declarators : variable_declarators",
//t    "variable_declarators : variable_declarator",
//t    "variable_declarators : variable_declarators variable_declarator",
//t    "variable_declarator : COMMA identifier_inside_body",
//t    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
//t    "const_variable_initializer :",
//t    "const_variable_initializer : ASSIGN constant_initializer_expr",
//t    "opt_const_declarators :",
//t    "opt_const_declarators : const_declarators",
//t    "const_declarators : const_declarator",
//t    "const_declarators : const_declarators const_declarator",
//t    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
//t    "block_variable_initializer : variable_initializer",
//t    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "block_variable_initializer : STACKALLOC simple_type",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "expression_statement : statement_expression CLOSE_BRACE",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression error",
//t    "$$86 :",
//t    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$86 opt_switch_sections CLOSE_BRACE",
//t    "switch_statement : SWITCH open_parens_any expression error",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "switch_sections : error",
//t    "$$87 :",
//t    "switch_section : switch_labels $$87 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : CASE constant_expression error",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "do_statement : DO embedded_statement error",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression error",
//t    "$$88 :",
//t    "for_statement : FOR open_parens_any $$88 for_statement_cont",
//t    "$$89 :",
//t    "for_statement_cont : opt_for_initializer SEMICOLON $$89 for_statement_condition",
//t    "for_statement_cont : opt_for_initializer CLOSE_PARENS",
//t    "$$90 :",
//t    "for_statement_condition : opt_for_condition SEMICOLON $$90 for_statement_end",
//t    "for_statement_condition : boolean_expression CLOSE_PARENS",
//t    "for_statement_end : opt_for_iterator CLOSE_PARENS embedded_statement",
//t    "for_statement_end : error",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "$$91 :",
//t    "for_initializer : variable_type identifier_inside_body $$91 opt_local_variable_initializer opt_variable_declarators",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type error",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
//t    "$$92 :",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$92 embedded_statement",
//t    "foreach_statement : FOREACH open_parens_any type identifier_inside_body error",
//t    "foreach_statement : FOREACH open_parens_any type error",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "continue_statement : CONTINUE error",
//t    "goto_statement : GOTO identifier_inside_body SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "return_statement : RETURN expression error",
//t    "return_statement : RETURN error",
//t    "throw_statement : THROW opt_expression SEMICOLON",
//t    "throw_statement : THROW error",
//t    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
//t    "yield_statement : identifier_inside_body RETURN expression error",
//t    "yield_statement : identifier_inside_body BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : identifier_inside_body",
//t    "catch_clause : CATCH block",
//t    "$$93 :",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$93 block_prepared_strict",
//t    "catch_clause : CATCH open_parens_any error",
//t    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS error",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$94 :",
//t    "unsafe_statement : UNSAFE $$94 block",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "lock_statement : LOCK open_parens_any expression error",
//t    "$$95 :",
//t    "$$96 :",
//t    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$95 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$96 embedded_statement",
//t    "$$97 :",
//t    "$$98 :",
//t    "using_statement : USING open_parens_any variable_type identifier_inside_body $$97 using_initialization CLOSE_PARENS $$98 embedded_statement",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "using_statement : USING open_parens_any expression error",
//t    "using_initialization : using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators",
//t    "using_initialization : error",
//t    "using_or_fixed_variable_initializer :",
//t    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
//t    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
//t    "nested_from_clause : FROM identifier_inside_body IN expression",
//t    "nested_from_clause : FROM type identifier_inside_body IN expression",
//t    "$$99 :",
//t    "from_clause : FROM identifier_inside_body IN $$99 expression_or_error",
//t    "$$100 :",
//t    "from_clause : FROM type identifier_inside_body IN $$100 expression_or_error",
//t    "query_body : query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : select_or_group_clause opt_query_continuation",
//t    "query_body : query_body_clauses COMPLETE_COMPLETION",
//t    "query_body : query_body_clauses error",
//t    "query_body : error",
//t    "$$101 :",
//t    "select_or_group_clause : SELECT $$101 expression_or_error",
//t    "$$102 :",
//t    "$$103 :",
//t    "select_or_group_clause : GROUP $$102 expression_or_error $$103 BY expression_or_error",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$104 :",
//t    "let_clause : LET identifier_inside_body ASSIGN $$104 expression_or_error",
//t    "$$105 :",
//t    "where_clause : WHERE $$105 expression_or_error",
//t    "$$106 :",
//t    "$$107 :",
//t    "$$108 :",
//t    "join_clause : JOIN identifier_inside_body IN $$106 expression_or_error ON $$107 expression_or_error EQUALS $$108 expression_or_error opt_join_into",
//t    "$$109 :",
//t    "$$110 :",
//t    "$$111 :",
//t    "join_clause : JOIN type identifier_inside_body IN $$109 expression_or_error ON $$110 expression_or_error EQUALS $$111 expression_or_error opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO identifier_inside_body",
//t    "$$112 :",
//t    "orderby_clause : ORDERBY $$112 orderings",
//t    "orderings : order_by",
//t    "$$113 :",
//t    "orderings : order_by COMMA $$113 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$114 :",
//t    "orderings_then_by : orderings_then_by COMMA $$114 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$115 :",
//t    "opt_query_continuation : INTO identifier_inside_body $$115 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
//t    "$$116 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$116 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
//t    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t    "documentation_parsing : DOC_SEE doc_cref",
//t    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
//t    "doc_cref : builtin_types opt_doc_method_sig",
//t    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
//t    "doc_cref : doc_type_declaration_name DOT THIS",
//t    "$$117 :",
//t    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$117 opt_doc_parameters CLOSE_BRACKET",
//t    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
//t    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
//t    "doc_type_declaration_name : type_declaration_name",
//t    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
//t    "opt_doc_method_sig :",
//t    "$$118 :",
//t    "opt_doc_method_sig : OPEN_PARENS $$118 opt_doc_parameters CLOSE_PARENS",
//t    "opt_doc_parameters :",
//t    "opt_doc_parameters : doc_parameters",
//t    "doc_parameters : doc_parameter",
//t    "doc_parameters : doc_parameters COMMA doc_parameter",
//t    "doc_parameter : opt_parameter_modifier parameter_type",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT","GET",
    "SET","LAST_KEYWORD","OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET",
    "CLOSE_BRACKET","OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON",
    "SEMICOLON","TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT",
    "BITWISE_AND","BITWISE_OR","STAR","PERCENT","DIV","CARRET","INTERR",
    "DOUBLE_COLON","OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT",
    "OP_LE","OP_GE","OP_EQ","OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN",
    "OP_DIV_ASSIGN","OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

#pragma warning disable 414
  int yyExpectingState;
#pragma warning restore 414
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
#pragma warning disable 649
	protected bool use_global_stacks;
#pragma warning restore 649
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 385 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 386 "cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
  case_6();
  break;
case 7:
#line 405 "cs-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
  case_8();
  break;
case 13:
  case_13();
  break;
case 14:
#line 450 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 17:
  case_17();
  break;
case 18:
  case_18();
  break;
case 19:
  case_19();
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 25:
  case_25();
  break;
case 26:
  case_26();
  break;
case 27:
  case_27();
  break;
case 40:
  case_40();
  break;
case 41:
#line 625 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 42:
  case_42();
  break;
case 50:
  case_50();
  break;
case 51:
  case_51();
  break;
case 52:
  case_52();
  break;
case 53:
  case_53();
  break;
case 54:
  case_54();
  break;
case 55:
  case_55();
  break;
case 56:
  case_56();
  break;
case 57:
  case_57();
  break;
case 58:
#line 739 "cs-parser.jay"
  { yyVal = "event"; savedCloseLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 59:
#line 740 "cs-parser.jay"
  { yyVal = "return"; savedCloseLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 60:
  case_60();
  break;
case 61:
#line 757 "cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 62:
  case_62();
  break;
case 63:
#line 772 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 64:
  case_64();
  break;
case 66:
#line 800 "cs-parser.jay"
  { yyVal = null; HadAttributeParens = false;  }
  break;
case 67:
  case_67();
  break;
case 68:
#line 812 "cs-parser.jay"
  { yyVal = null; }
  break;
case 69:
  case_69();
  break;
case 70:
  case_70();
  break;
case 71:
  case_71();
  break;
case 72:
  case_72();
  break;
case 73:
#line 856 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 75:
#line 864 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 76:
  case_76();
  break;
case 77:
  case_77();
  break;
case 78:
#line 890 "cs-parser.jay"
  { yyVal = null; }
  break;
case 79:
#line 894 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 80:
#line 898 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 83:
#line 910 "cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 84:
#line 914 "cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 96:
  case_96();
  break;
case 97:
#line 945 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 98:
  case_98();
  break;
case 99:
  case_99();
  break;
case 100:
  case_100();
  break;
case 101:
  case_101();
  break;
case 102:
  case_102();
  break;
case 103:
#line 988 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 104:
  case_104();
  break;
case 105:
  case_105();
  break;
case 106:
  case_106();
  break;
case 109:
#line 1037 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 110:
#line 1041 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 111:
  case_111();
  break;
case 112:
#line 1057 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 113:
  case_113();
  break;
case 114:
  case_114();
  break;
case 117:
  case_117();
  break;
case 118:
  case_118();
  break;
case 119:
  case_119();
  break;
case 120:
  case_120();
  break;
case 121:
#line 1136 "cs-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 123:
  case_123();
  break;
case 124:
  case_124();
  break;
case 127:
#line 1166 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 128:
#line 1170 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 129:
  case_129();
  break;
case 130:
#line 1183 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 131:
  case_131();
  break;
case 134:
#line 1202 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 135:
#line 1206 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 136:
  case_136();
  break;
case 137:
#line 1222 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 138:
  case_138();
  break;
case 139:
  case_139();
  break;
case 142:
  case_142();
  break;
case 143:
  case_143();
  break;
case 144:
  case_144();
  break;
case 145:
#line 1290 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 146:
  case_146();
  break;
case 147:
  case_147();
  break;
case 148:
#line 1329 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 149:
  case_149();
  break;
case 150:
#line 1339 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 151:
  case_151();
  break;
case 152:
  case_152();
  break;
case 153:
  case_153();
  break;
case 155:
#line 1410 "cs-parser.jay"
  { savedLocation = GetLocation (yyVals[0+yyTop]); yyVal = null; }
  break;
case 156:
#line 1414 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 158:
  case_158();
  break;
case 159:
  case_159();
  break;
case 160:
  case_160();
  break;
case 161:
  case_161();
  break;
case 162:
  case_162();
  break;
case 163:
  case_163();
  break;
case 164:
  case_164();
  break;
case 165:
#line 1486 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 166:
#line 1490 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 167:
  case_167();
  break;
case 168:
  case_168();
  break;
case 169:
  case_169();
  break;
case 170:
  case_170();
  break;
case 171:
  case_171();
  break;
case 172:
  case_172();
  break;
case 173:
  case_173();
  break;
case 174:
#line 1571 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 175:
  case_175();
  break;
case 176:
#line 1612 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 178:
#line 1620 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 179:
  case_179();
  break;
case 180:
  case_180();
  break;
case 181:
  case_181();
  break;
case 182:
  case_182();
  break;
case 183:
  case_183();
  break;
case 184:
  case_184();
  break;
case 185:
  case_185();
  break;
case 186:
  case_186();
  break;
case 187:
  case_187();
  break;
case 188:
#line 1714 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 189:
  case_189();
  break;
case 190:
  case_190();
  break;
case 191:
  case_191();
  break;
case 192:
  case_192();
  break;
case 193:
  case_193();
  break;
case 194:
#line 1768 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 195:
  case_195();
  break;
case 196:
#line 1797 "cs-parser.jay"
  {
		lexer.PropertyParsing = false;
	  }
  break;
case 197:
  case_197();
  break;
case 202:
  case_202();
  break;
case 203:
  case_203();
  break;
case 204:
  case_204();
  break;
case 205:
  case_205();
  break;
case 206:
  case_206();
  break;
case 208:
  case_208();
  break;
case 209:
  case_209();
  break;
case 210:
#line 1946 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 211:
  case_211();
  break;
case 212:
  case_212();
  break;
case 213:
  case_213();
  break;
case 214:
  case_214();
  break;
case 215:
#line 1985 "cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 218:
#line 1997 "cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 219:
#line 2001 "cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 220:
#line 2008 "cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 221:
#line 2012 "cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 226:
#line 2020 "cs-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 227:
#line 2024 "cs-parser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 228:
#line 2028 "cs-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 229:
#line 2034 "cs-parser.jay"
  {
	  }
  break;
case 230:
  case_230();
  break;
case 232:
#line 2067 "cs-parser.jay"
  { savedLocation = GetLocation (yyVals[0+yyTop]); yyVal = null; }
  break;
case 234:
  case_234();
  break;
case 235:
#line 2083 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 236:
  case_236();
  break;
case 238:
#line 2129 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 239:
#line 2130 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 240:
#line 2131 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 241:
#line 2132 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 242:
#line 2133 "cs-parser.jay"
  { yyVal = Operator.OpType.True; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 243:
#line 2134 "cs-parser.jay"
  { yyVal = Operator.OpType.False; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 244:
#line 2136 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 245:
#line 2137 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 246:
#line 2139 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 247:
#line 2140 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 248:
#line 2141 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 249:
#line 2142 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 250:
#line 2143 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 251:
#line 2144 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 252:
#line 2145 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 253:
#line 2146 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 254:
#line 2147 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 255:
#line 2148 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 256:
#line 2149 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 257:
#line 2150 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 258:
#line 2151 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 259:
#line 2152 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; savedOperatorLocation = GetLocation (yyVals[0+yyTop]); }
  break;
case 260:
#line 2159 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 261:
  case_261();
  break;
case 262:
#line 2178 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 263:
  case_263();
  break;
case 264:
  case_264();
  break;
case 265:
  case_265();
  break;
case 266:
  case_266();
  break;
case 267:
  case_267();
  break;
case 268:
  case_268();
  break;
case 269:
  case_269();
  break;
case 271:
#line 2284 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 274:
#line 2296 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 275:
  case_275();
  break;
case 276:
#line 2306 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 277:
  case_277();
  break;
case 278:
  case_278();
  break;
case 279:
  case_279();
  break;
case 280:
  case_280();
  break;
case 281:
  case_281();
  break;
case 282:
  case_282();
  break;
case 283:
  case_283();
  break;
case 284:
  case_284();
  break;
case 285:
  case_285();
  break;
case 286:
  case_286();
  break;
case 287:
  case_287();
  break;
case 289:
#line 2430 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 290:
  case_290();
  break;
case 293:
#line 2447 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 294:
#line 2451 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 295:
  case_295();
  break;
case 296:
#line 2464 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 297:
  case_297();
  break;
case 298:
  case_298();
  break;
case 299:
#line 2489 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 302:
  case_302();
  break;
case 303:
  case_303();
  break;
case 304:
  case_304();
  break;
case 305:
  case_305();
  break;
case 306:
  case_306();
  break;
case 307:
  case_307();
  break;
case 308:
  case_308();
  break;
case 309:
  case_309();
  break;
case 311:
  case_311();
  break;
case 312:
  case_312();
  break;
case 313:
  case_313();
  break;
case 314:
  case_314();
  break;
case 315:
  case_315();
  break;
case 317:
  case_317();
  break;
case 318:
  case_318();
  break;
case 321:
#line 2657 "cs-parser.jay"
  {
		lbag.AppendToMember (current_container, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 323:
  case_323();
  break;
case 324:
  case_324();
  break;
case 325:
  case_325();
  break;
case 326:
  case_326();
  break;
case 327:
  case_327();
  break;
case 329:
#line 2731 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 330:
  case_330();
  break;
case 331:
#line 2750 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 332:
  case_332();
  break;
case 334:
  case_334();
  break;
case 336:
  case_336();
  break;
case 338:
  case_338();
  break;
case 339:
  case_339();
  break;
case 341:
  case_341();
  break;
case 342:
  case_342();
  break;
case 343:
  case_343();
  break;
case 344:
  case_344();
  break;
case 345:
#line 2856 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 346:
  case_346();
  break;
case 347:
  case_347();
  break;
case 349:
  case_349();
  break;
case 350:
  case_350();
  break;
case 351:
  case_351();
  break;
case 352:
  case_352();
  break;
case 353:
  case_353();
  break;
case 354:
  case_354();
  break;
case 356:
  case_356();
  break;
case 357:
  case_357();
  break;
case 358:
  case_358();
  break;
case 359:
  case_359();
  break;
case 360:
  case_360();
  break;
case 362:
#line 2981 "cs-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 363:
#line 2988 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 365:
  case_365();
  break;
case 367:
  case_367();
  break;
case 369:
  case_369();
  break;
case 371:
#line 3026 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 372:
  case_372();
  break;
case 373:
#line 3045 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 374:
  case_374();
  break;
case 375:
#line 3054 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 376:
#line 3058 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 377:
  case_377();
  break;
case 378:
  case_378();
  break;
case 379:
  case_379();
  break;
case 380:
#line 3092 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 381:
#line 3093 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 382:
#line 3094 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 383:
#line 3095 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 384:
#line 3096 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 385:
#line 3097 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 387:
#line 3102 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 388:
#line 3103 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 389:
#line 3104 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 390:
#line 3105 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 391:
#line 3106 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 392:
#line 3107 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 393:
#line 3108 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 394:
#line 3109 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 395:
#line 3110 "cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 416:
  case_416();
  break;
case 417:
  case_417();
  break;
case 421:
#line 3157 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 422:
#line 3161 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 423:
#line 3162 "cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 428:
  case_428();
  break;
case 429:
#line 3195 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 430:
  case_430();
  break;
case 431:
  case_431();
  break;
case 432:
  case_432();
  break;
case 433:
  case_433();
  break;
case 434:
#line 3230 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 435:
  case_435();
  break;
case 436:
#line 3238 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 437:
  case_437();
  break;
case 438:
  case_438();
  break;
case 439:
  case_439();
  break;
case 440:
#line 3262 "cs-parser.jay"
  { yyVal = null; }
  break;
case 442:
  case_442();
  break;
case 443:
  case_443();
  break;
case 444:
#line 3285 "cs-parser.jay"
  { yyVal = null; }
  break;
case 445:
#line 3289 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 446:
  case_446();
  break;
case 447:
  case_447();
  break;
case 448:
  case_448();
  break;
case 449:
  case_449();
  break;
case 450:
#line 3322 "cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 451:
  case_451();
  break;
case 452:
  case_452();
  break;
case 453:
  case_453();
  break;
case 456:
#line 3353 "cs-parser.jay"
  { yyVal = null; }
  break;
case 458:
  case_458();
  break;
case 459:
  case_459();
  break;
case 460:
  case_460();
  break;
case 461:
  case_461();
  break;
case 462:
  case_462();
  break;
case 463:
#line 3407 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 467:
  case_467();
  break;
case 468:
  case_468();
  break;
case 469:
  case_469();
  break;
case 470:
  case_470();
  break;
case 472:
  case_472();
  break;
case 473:
  case_473();
  break;
case 474:
  case_474();
  break;
case 475:
  case_475();
  break;
case 476:
  case_476();
  break;
case 477:
  case_477();
  break;
case 478:
  case_478();
  break;
case 479:
  case_479();
  break;
case 480:
#line 3504 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 482:
#line 3512 "cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 483:
  case_483();
  break;
case 484:
  case_484();
  break;
case 485:
#line 3532 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 486:
#line 3539 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 487:
  case_487();
  break;
case 488:
  case_488();
  break;
case 489:
  case_489();
  break;
case 490:
  case_490();
  break;
case 491:
  case_491();
  break;
case 492:
  case_492();
  break;
case 493:
  case_493();
  break;
case 494:
#line 3606 "cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 499:
#line 3633 "cs-parser.jay"
  { yyVal = null; }
  break;
case 501:
  case_501();
  break;
case 502:
  case_502();
  break;
case 503:
  case_503();
  break;
case 504:
  case_504();
  break;
case 505:
  case_505();
  break;
case 506:
  case_506();
  break;
case 510:
  case_510();
  break;
case 511:
  case_511();
  break;
case 512:
  case_512();
  break;
case 513:
#line 3711 "cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 514:
#line 3715 "cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 515:
#line 3722 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 516:
#line 3726 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 517:
  case_517();
  break;
case 518:
  case_518();
  break;
case 519:
  case_519();
  break;
case 520:
  case_520();
  break;
case 521:
#line 3770 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 522:
  case_522();
  break;
case 525:
  case_525();
  break;
case 526:
  case_526();
  break;
case 527:
  case_527();
  break;
case 528:
  case_528();
  break;
case 529:
  case_529();
  break;
case 530:
  case_530();
  break;
case 531:
  case_531();
  break;
case 532:
  case_532();
  break;
case 533:
  case_533();
  break;
case 534:
  case_534();
  break;
case 535:
  case_535();
  break;
case 536:
  case_536();
  break;
case 537:
#line 3890 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 538:
  case_538();
  break;
case 539:
#line 3903 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 540:
  case_540();
  break;
case 541:
#line 3920 "cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 543:
#line 3928 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 544:
  case_544();
  break;
case 545:
  case_545();
  break;
case 547:
#line 3954 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 548:
#line 3958 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 549:
  case_549();
  break;
case 550:
  case_550();
  break;
case 552:
#line 3994 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 553:
#line 3998 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 554:
#line 4002 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 555:
#line 4006 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 556:
#line 4010 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 557:
#line 4014 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 559:
  case_559();
  break;
case 560:
  case_560();
  break;
case 561:
  case_561();
  break;
case 563:
  case_563();
  break;
case 564:
  case_564();
  break;
case 565:
#line 4051 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 566:
#line 4055 "cs-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 568:
  case_568();
  break;
case 569:
  case_569();
  break;
case 571:
  case_571();
  break;
case 572:
  case_572();
  break;
case 573:
  case_573();
  break;
case 574:
  case_574();
  break;
case 576:
  case_576();
  break;
case 577:
  case_577();
  break;
case 579:
  case_579();
  break;
case 581:
  case_581();
  break;
case 583:
  case_583();
  break;
case 585:
  case_585();
  break;
case 587:
  case_587();
  break;
case 589:
  case_589();
  break;
case 591:
  case_591();
  break;
case 592:
  case_592();
  break;
case 593:
  case_593();
  break;
case 594:
  case_594();
  break;
case 595:
  case_595();
  break;
case 596:
  case_596();
  break;
case 597:
  case_597();
  break;
case 598:
  case_598();
  break;
case 599:
  case_599();
  break;
case 600:
  case_600();
  break;
case 601:
  case_601();
  break;
case 602:
  case_602();
  break;
case 603:
  case_603();
  break;
case 604:
  case_604();
  break;
case 605:
  case_605();
  break;
case 606:
  case_606();
  break;
case 607:
  case_607();
  break;
case 608:
  case_608();
  break;
case 609:
#line 4283 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 610:
  case_610();
  break;
case 613:
#line 4299 "cs-parser.jay"
  {
		start_block (Location.Null);
	  }
  break;
case 614:
  case_614();
  break;
case 616:
  case_616();
  break;
case 617:
  case_617();
  break;
case 618:
  case_618();
  break;
case 619:
  case_619();
  break;
case 620:
  case_620();
  break;
case 621:
#line 4344 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 622:
  case_622();
  break;
case 623:
  case_623();
  break;
case 624:
#line 4358 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 625:
  case_625();
  break;
case 626:
  case_626();
  break;
case 632:
#line 4383 "cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 633:
  case_633();
  break;
case 634:
  case_634();
  break;
case 635:
  case_635();
  break;
case 637:
#line 4412 "cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 638:
#line 4425 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 639:
  case_639();
  break;
case 640:
  case_640();
  break;
case 641:
  case_641();
  break;
case 642:
  case_642();
  break;
case 643:
#line 4470 "cs-parser.jay"
  { yyVal = null; }
  break;
case 644:
#line 4472 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[0+yyTop])); }
  break;
case 645:
  case_645();
  break;
case 646:
#line 4485 "cs-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 648:
  case_648();
  break;
case 649:
  case_649();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 652:
  case_652();
  break;
case 653:
  case_653();
  break;
case 654:
  case_654();
  break;
case 655:
  case_655();
  break;
case 656:
  case_656();
  break;
case 657:
  case_657();
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 660:
  case_660();
  break;
case 661:
  case_661();
  break;
case 662:
  case_662();
  break;
case 663:
  case_663();
  break;
case 665:
  case_665();
  break;
case 666:
  case_666();
  break;
case 668:
#line 4611 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 669:
  case_669();
  break;
case 670:
  case_670();
  break;
case 671:
  case_671();
  break;
case 672:
  case_672();
  break;
case 673:
  case_673();
  break;
case 674:
  case_674();
  break;
case 675:
  case_675();
  break;
case 676:
  case_676();
  break;
case 677:
#line 4704 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 678:
#line 4708 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 679:
#line 4715 "cs-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 680:
  case_680();
  break;
case 681:
  case_681();
  break;
case 682:
  case_682();
  break;
case 683:
  case_683();
  break;
case 684:
#line 4760 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 685:
  case_685();
  break;
case 686:
  case_686();
  break;
case 687:
  case_687();
  break;
case 688:
  case_688();
  break;
case 689:
  case_689();
  break;
case 690:
  case_690();
  break;
case 691:
  case_691();
  break;
case 696:
#line 4822 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 697:
#line 4826 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 699:
  case_699();
  break;
case 700:
  case_700();
  break;
case 703:
#line 4860 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 704:
#line 4864 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 733:
  case_733();
  break;
case 734:
  case_734();
  break;
case 735:
  case_735();
  break;
case 736:
  case_736();
  break;
case 737:
  case_737();
  break;
case 740:
  case_740();
  break;
case 741:
  case_741();
  break;
case 742:
  case_742();
  break;
case 743:
  case_743();
  break;
case 744:
#line 5008 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 745:
#line 5012 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 746:
  case_746();
  break;
case 748:
  case_748();
  break;
case 749:
#line 5033 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 751:
  case_751();
  break;
case 752:
  case_752();
  break;
case 753:
  case_753();
  break;
case 754:
  case_754();
  break;
case 755:
  case_755();
  break;
case 757:
  case_757();
  break;
case 759:
  case_759();
  break;
case 760:
  case_760();
  break;
case 761:
  case_761();
  break;
case 765:
  case_765();
  break;
case 768:
  case_768();
  break;
case 769:
  case_769();
  break;
case 770:
#line 5168 "cs-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 771:
  case_771();
  break;
case 776:
  case_776();
  break;
case 778:
  case_778();
  break;
case 779:
  case_779();
  break;
case 780:
  case_780();
  break;
case 781:
#line 5218 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 782:
  case_782();
  break;
case 783:
#line 5228 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 784:
#line 5229 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 785:
  case_785();
  break;
case 786:
  case_786();
  break;
case 787:
  case_787();
  break;
case 790:
  case_790();
  break;
case 791:
  case_791();
  break;
case 792:
  case_792();
  break;
case 793:
#line 5304 "cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 794:
  case_794();
  break;
case 795:
  case_795();
  break;
case 796:
  case_796();
  break;
case 798:
  case_798();
  break;
case 799:
  case_799();
  break;
case 800:
  case_800();
  break;
case 801:
#line 5355 "cs-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 802:
#line 5359 "cs-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 803:
  case_803();
  break;
case 804:
  case_804();
  break;
case 805:
  case_805();
  break;
case 806:
  case_806();
  break;
case 807:
#line 5393 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 812:
  case_812();
  break;
case 813:
  case_813();
  break;
case 814:
  case_814();
  break;
case 815:
  case_815();
  break;
case 816:
  case_816();
  break;
case 817:
  case_817();
  break;
case 818:
#line 5454 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 819:
  case_819();
  break;
case 820:
#line 5469 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 821:
  case_821();
  break;
case 822:
  case_822();
  break;
case 823:
#line 5490 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 824:
  case_824();
  break;
case 825:
  case_825();
  break;
case 826:
  case_826();
  break;
case 827:
#line 5524 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 829:
  case_829();
  break;
case 830:
  case_830();
  break;
case 832:
#line 5545 "cs-parser.jay"
  { yyVal = null; }
  break;
case 834:
#line 5550 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 838:
  case_838();
  break;
case 839:
  case_839();
  break;
case 840:
  case_840();
  break;
case 841:
  case_841();
  break;
case 842:
  case_842();
  break;
case 843:
  case_843();
  break;
case 844:
  case_844();
  break;
case 851:
  case_851();
  break;
case 852:
  case_852();
  break;
case 853:
  case_853();
  break;
case 854:
  case_854();
  break;
case 855:
  case_855();
  break;
case 856:
  case_856();
  break;
case 857:
  case_857();
  break;
case 858:
  case_858();
  break;
case 859:
  case_859();
  break;
case 860:
  case_860();
  break;
case 861:
  case_861();
  break;
case 862:
  case_862();
  break;
case 863:
  case_863();
  break;
case 864:
  case_864();
  break;
case 867:
#line 5790 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 868:
  case_868();
  break;
case 869:
  case_869();
  break;
case 870:
  case_870();
  break;
case 871:
  case_871();
  break;
case 872:
  case_872();
  break;
case 875:
#line 5839 "cs-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 876:
  case_876();
  break;
case 877:
#line 5858 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 878:
  case_878();
  break;
case 879:
  case_879();
  break;
case 880:
#line 5892 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 881:
#line 5899 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 882:
  case_882();
  break;
case 883:
#line 5909 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 884:
  case_884();
  break;
case 885:
  case_885();
  break;
case 886:
  case_886();
  break;
case 887:
  case_887();
  break;
case 888:
  case_888();
  break;
case 889:
  case_889();
  break;
case 890:
  case_890();
  break;
case 891:
  case_891();
  break;
case 892:
  case_892();
  break;
case 893:
  case_893();
  break;
case 895:
  case_895();
  break;
case 896:
#line 6014 "cs-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 897:
  case_897();
  break;
case 898:
  case_898();
  break;
case 899:
  case_899();
  break;
case 900:
  case_900();
  break;
case 901:
  case_901();
  break;
case 902:
  case_902();
  break;
case 903:
  case_903();
  break;
case 904:
  case_904();
  break;
case 905:
  case_905();
  break;
case 906:
#line 6119 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 907:
  case_907();
  break;
case 908:
#line 6135 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 909:
  case_909();
  break;
case 910:
  case_910();
  break;
case 911:
  case_911();
  break;
case 913:
  case_913();
  break;
case 914:
  case_914();
  break;
case 915:
#line 6199 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 916:
  case_916();
  break;
case 917:
  case_917();
  break;
case 918:
  case_918();
  break;
case 919:
  case_919();
  break;
case 921:
  case_921();
  break;
case 927:
#line 6253 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 928:
  case_928();
  break;
case 929:
#line 6272 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 930:
  case_930();
  break;
case 931:
  case_931();
  break;
case 932:
  case_932();
  break;
case 933:
  case_933();
  break;
case 934:
  case_934();
  break;
case 935:
  case_935();
  break;
case 936:
  case_936();
  break;
case 937:
  case_937();
  break;
case 938:
  case_938();
  break;
case 940:
  case_940();
  break;
case 941:
#line 6426 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 942:
  case_942();
  break;
case 944:
  case_944();
  break;
case 945:
  case_945();
  break;
case 947:
  case_947();
  break;
case 948:
  case_948();
  break;
case 949:
#line 6472 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 950:
  case_950();
  break;
case 951:
  case_951();
  break;
case 952:
#line 6489 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 953:
  case_953();
  break;
case 954:
  case_954();
  break;
case 956:
  case_956();
  break;
case 957:
  case_957();
  break;
case 960:
  case_960();
  break;
case 961:
  case_961();
  break;
case 969:
#line 6611 "cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 970:
#line 6618 "cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 971:
  case_971();
  break;
case 972:
  case_972();
  break;
case 973:
#line 6635 "cs-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }
  break;
case 974:
#line 6639 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 975:
  case_975();
  break;
case 976:
  case_976();
  break;
case 977:
  case_977();
  break;
case 978:
  case_978();
  break;
case 980:
#line 6675 "cs-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 982:
#line 6683 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 983:
#line 6687 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 984:
#line 6694 "cs-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 986:
  case_986();
  break;
case 987:
  case_987();
  break;
case 988:
  case_988();
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_6()
#line 393 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");

			current_namespace.UnattachedAttributes = attrs;
		}
	  }

void case_8()
#line 407 "cs-parser.jay"
{
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }

void case_13()
#line 427 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias") {
			syntax_error (lt.Location, "`alias' expected");
		} else {
			if (lang_version == LanguageVersion.ISO_1)
				FeatureIsNotAvailable (lt.Location, "external alias");

			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			if (lt.Value == QualifiedAliasMember.GlobalAlias) {
				RootNamespace.Error_GlobalNamespaceRedefined (report, lt.Location);
			}
			
			var na = new UsingExternAlias (new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop]));
			current_namespace.AddUsing (na);
			
			lbag.AddLocation (na, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_17()
#line 460 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_18()
#line 468 "cs-parser.jay"
{
		var un = new UsingNamespace ((ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		current_namespace.AddUsing (un);
		
		lbag.AddLocation (un, GetLocation (yyVals[0+yyTop]));
	  }

void case_19()
#line 475 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		var un = new UsingAliasNamespace (new SimpleMemberName (lt.Value, lt.Location), (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		current_namespace.AddUsing (un);
		lbag.AddLocation (un, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_20()
#line 487 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }

void case_21()
#line 500 "cs-parser.jay"
{
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		var name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		var ns = new NamespaceContainer (name, current_namespace);
		current_namespace.AddTypeContainer (ns);
		current_container = current_namespace = ns;
	  }

void case_22()
#line 528 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_23()
#line 533 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (current_container, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  
		current_container = current_namespace = current_namespace.Parent;
	  }

void case_24()
#line 542 "cs-parser.jay"
{
		report.Error (1514, lexer.Location, "Unexpected symbol `{0}', expecting `.' or `{{'", GetSymbolName (yyToken));

		var name = (MemberName) yyVals[0+yyTop];		
		var ns = new NamespaceContainer (name, current_namespace);
		lbag.AddLocation (ns, GetLocation (yyVals[-1+yyTop]));
		current_namespace.AddTypeContainer (ns);
	  }

void case_25()
#line 554 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_26()
#line 559 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location) {
			DotLocation = GetLocation (yyVals[-1+yyTop])
		};
	  }

void case_27()
#line 566 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_40()
#line 604 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file);
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_42()
#line 626 "cs-parser.jay"
{
		current_namespace.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1518, lexer.Location, "Attributes must be attached to class, delegate, enum, interface or struct");
		lexer.putback ('}');
	  }

void case_50()
#line 659 "cs-parser.jay"
{
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
		if (locationListStack.Count > 0)
			lbag.AddLocation (sect, locationListStack.Pop ());
		if (attributeCommas.Count > 0) {
			lbag.AppendTo (sect, attributeCommas);
			attributeCommas.Clear ();
		}
	  }

void case_51()
#line 670 "cs-parser.jay"
{
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		
		if (locationListStack.Count > 0)
			lbag.AddLocation (sect, locationListStack.Pop ());
		if (attrs == null)
			attrs = new Attributes (sect);
		else
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }

void case_52()
#line 686 "cs-parser.jay"
{
		lexer.parsing_attribute_section = true;
		savedOpenLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_53()
#line 691 "cs-parser.jay"
{
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_54()
#line 699 "cs-parser.jay"
{
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }

void case_55()
#line 706 "cs-parser.jay"
{
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];
	  
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
		if (yyVals[-1+yyTop] != null) {
			locationListStack.Push (new List<Location>(new [] { savedOpenLocation, savedCloseLocation, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]) }));
		} else {
			locationListStack.Push (new List<Location>(new [] { savedOpenLocation, savedCloseLocation, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]) }));
		}
 	  }

void case_56()
#line 722 "cs-parser.jay"
{
		yyVal = yyVals[-2+yyTop];
		if (yyVals[-1+yyTop] != null) {
			locationListStack.Push (new List<Location>(new [] { savedOpenLocation, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]) }));
		} else {
			locationListStack.Push (new List<Location>(new [] { savedOpenLocation, GetLocation (yyVals[0+yyTop]) }));
		}
	  }

void case_57()
#line 734 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
		savedCloseLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_60()
#line 742 "cs-parser.jay"
{
		if (yyToken == Token.IDENTIFIER) {
			Error_SyntaxError (yyToken);
			yyVal = null;
		} else {
			string name = GetTokenName (yyToken);
			yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_62()
#line 759 "cs-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);
		attributeCommas.Add (GetLocation (yyVals[-1+yyTop]));

		yyVal = attrs;
	  }

void case_64()
#line 774 "cs-parser.jay"
{
		--lexer.parsing_block;
		
		var tne = (ATypeNameExpression) yyVals[-2+yyTop];
		if (tne.HasTypeArguments) {
			report.Error (404, tne.Location, "Attributes cannot be generic");
		}
		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];

		yyVal = new Attribute (current_attr_target, tne, (Arguments[]) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), lexer.IsEscapedIdentifier (tne));
		if (arguments != null) {
			attributeArgumentCommas.Insert (0, savedAttrParenOpenLocation);
			attributeArgumentCommas.Add (savedAttrParenCloseLocation);
			lbag.AddLocation (yyVal, attributeArgumentCommas);
			attributeArgumentCommas.Clear ();
		} else if (HadAttributeParens) {
			lbag.AddLocation (yyVal, savedAttrParenOpenLocation, savedAttrParenCloseLocation);
		}
	  }

void case_67()
#line 802 "cs-parser.jay"
{
		savedAttrParenOpenLocation = GetLocation (yyVals[-2+yyTop]);
		savedAttrParenCloseLocation = GetLocation (yyVals[0+yyTop]);
		yyVal = yyVals[-1+yyTop];
		HadAttributeParens = true;
	  }

void case_69()
#line 814 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_70()
#line 820 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_71()
#line 826 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
		attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }

void case_72()
#line 841 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
		attributeArgumentCommas.Add (GetLocation (yyVals[-1+yyTop]));
	  }

void case_76()
#line 866 "cs-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_77()
#line 876 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
		lbag.AddLocation (yyVal, GetLocation(yyVals[-2+yyTop]));
	  }

void case_96()
#line 930 "cs-parser.jay"
{
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_98()
#line 947 "cs-parser.jay"
{ 
		push_current_container (new Struct (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));
	  }

void case_99()
#line 953 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();

		
		lexer.parsing_modifiers = true;
	  }

void case_100()
#line 966 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_101()
#line 971 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_102()
#line 977 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_104()
#line 995 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_105()
#line 1008 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_106()
#line 1021 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddMember (new Const (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (Attributes) yyVals[-4+yyTop]));
	  }

void case_111()
#line 1046 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_113()
#line 1059 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_114()
#line 1065 "cs-parser.jay"
{
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_117()
#line 1080 "cs-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_type, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_type.AddField (current_field);
		yyVal = current_field;
	  }

void case_118()
#line 1095 "cs-parser.jay"
{ 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_119()
#line 1108 "cs-parser.jay"
{ 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_type.AddField (current_field);
	  }

void case_120()
#line 1119 "cs-parser.jay"
{
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_123()
#line 1142 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_124()
#line 1148 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
		end_block (lexer.Location);
		current_local_parameters = null;
	  }

void case_129()
#line 1175 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_131()
#line 1185 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_136()
#line 1211 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_138()
#line 1224 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_139()
#line 1230 "cs-parser.jay"
{
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_142()
#line 1240 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }

void case_143()
#line 1249 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Was added earlier in the case of body being eof for full ast*/
	  }

void case_144()
#line 1256 "cs-parser.jay"
{
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		async_block = false;
		
		if (method.Block == null) {
			lbag.AppendToMember (method, savedLocation); /* semicolon*/
			method.ParameterInfo.CheckParameters (method);

			if ((method.ModFlags & Modifiers.ASYNC) != 0) {
				report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
					method.GetSignatureForError ());
			}
		} else {
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
					method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_146()
#line 1292 "cs-parser.jay"
{
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-6+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

		async_block = (method.ModFlags & Modifiers.ASYNC) != 0;

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = method;

		lexer.ConstraintsParsing = true;
	  }

void case_147()
#line 1313 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null) {
			var method = (Method) yyVals[-1+yyTop];
			method.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);
		}

		yyVal = yyVals[-1+yyTop];
	  }

void case_149()
#line 1332 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }

void case_151()
#line 1341 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		var modifiers = (Modifiers) yyVals[-10+yyTop];
		modifiers |= Modifiers.PARTIAL;

		var method = Method.Create (current_type, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-11+yyTop]);

		current_type.AddMember (method);

		if (yyVals[-1+yyTop] != null)
			method.SetConstraints ((List<Constraints>) yyVals[-1+yyTop]);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-9+yyTop]));
		lbag.AddMember (method, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_152()
#line 1370 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-3+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_type.AddMember (method);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_153()
#line 1391 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.Undefined;

		MemberName name = (MemberName) yyVals[-1+yyTop];
		var method = Method.Create (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-3+yyTop],
									name, current_local_parameters, (Attributes) yyVals[-4+yyTop]);

		current_type.AddMember (method);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_158()
#line 1420 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_159()
#line 1426 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		
		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_160()
#line 1435 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_161()
#line 1444 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_162()
#line 1452 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));
		parameterListCommas.Add (GetLocation (yyVals[-3+yyTop]));
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_163()
#line 1465 "cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_164()
#line 1472 "cs-parser.jay"
{
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));
		parameterListCommas.Add (GetLocation (yyVals[-3+yyTop]));
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  	lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_167()
#line 1492 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_168()
#line 1500 "cs-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		parameterListCommas.Clear ();
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_169()
#line 1509 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_170()
#line 1533 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_171()
#line 1542 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_172()
#line 1549 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter (null, null, Parameter.Modifier.NONE, (Attributes) yyVals[-1+yyTop], l);
	  }

void case_173()
#line 1558 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
		lbag.AddLocation (yyVal, parameterModifierLocation);
	  }

void case_175()
#line 1573 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, parameterModifierLocation, GetLocation (yyVals[-2+yyTop])); /* parameterModifierLocation should be ignored when mod == NONE*/
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }

void case_179()
#line 1622 "cs-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_180()
#line 1646 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_181()
#line 1653 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_182()
#line 1660 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
		parameterModifierLocation = GetLocation (yyVals[0+yyTop]);
		yyVal = Parameter.Modifier.This;
	  }

void case_183()
#line 1673 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
		lbag.AddLocation (yyVal, savedLocation);
	  }

void case_184()
#line 1679 "cs-parser.jay"
{
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
		lbag.AddLocation (yyVal, savedLocation);
	  }

void case_185()
#line 1687 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Attributes) yyVals[-3+yyTop], Location.Null);
	  }

void case_186()
#line 1696 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_187()
#line 1702 "cs-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
		savedLocation = GetLocation (yyVals[-1+yyTop]);
	  }

void case_189()
#line 1719 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_190()
#line 1730 "cs-parser.jay"
{
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_191()
#line 1735 "cs-parser.jay"
{
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new Property (current_type, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_type.AddMember (current_property);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_192()
#line 1749 "cs-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_193()
#line 1756 "cs-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_195()
#line 1770 "cs-parser.jay"
{
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-5+yyTop];
		Indexer indexer = new Indexer (current_type, type, (MemberName) yyVals[-4+yyTop], (Modifiers) yyVals[-6+yyTop], (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);
			
		current_property = indexer;

  		current_type.AddIndexer (indexer);
		lbag.AddMember (current_property, GetModifierLocations (), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-5+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-3+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_197()
#line 1799 "cs-parser.jay"
{
		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_property = null;		
	  }

void case_202()
#line 1818 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_203()
#line 1832 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lexer.PropertyParsing = false;
	  }

void case_204()
#line 1853 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}
			lbag.AddMember (current_property.Get, GetModifierLocations ());
		} else {
			lbag.AddMember (current_property.Get, GetModifierLocations (), savedLocation);
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_205()
#line 1877 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lexer.PropertyParsing = false;
	  }

void case_206()
#line 1903 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
			lbag.AddMember (current_property.Set, GetModifierLocations ());
		} else {
			lbag.AddMember (current_property.Set, GetModifierLocations (), savedLocation);
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_208()
#line 1928 "cs-parser.jay"
{
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  	yyVal = null;
	  }

void case_209()
#line 1933 "cs-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_211()
#line 1948 "cs-parser.jay"
{
		push_current_container (new Interface (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));		
	  }

void case_212()
#line 1954 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_213()
#line 1968 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_214()
#line 1974 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_230()
#line 2036 "cs-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_type, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_type.AddOperator (op);

			lbag.AddMember (op, GetModifierLocations (), lbag.GetLocations (decl));
			if (yyVals[0+yyTop] == null) { /* Semicolon*/
				lbag.AppendTo (op, savedLocation); 
			}
		}
		
		current_local_parameters = null;
	  }

void case_234()
#line 2073 "cs-parser.jay"
{
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_236()
#line 2085 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), savedOperatorLocation, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_261()
#line 2161 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_263()
#line 2180 "cs-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_264()
#line 2195 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_265()
#line 2201 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_266()
#line 2211 "cs-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_267()
#line 2228 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_268()
#line 2237 "cs-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];
		
		var lt = (Tokenizer.LocatedToken) yyVals[-4+yyTop];
		var mods = (Modifiers) yyVals[-5+yyTop];
		var c = new Constructor (current_type, lt.Value, mods, (Attributes) yyVals[-6+yyTop], current_local_parameters, lt.Location);

		if (lt.Value != current_container.MemberName.Name) {
			report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
		}

		current_type.AddConstructor (c);
		lbag.AddMember (c, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;

		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_269()
#line 2266 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			var c = (Constructor) yyVals[-1+yyTop];
			c.Initializer = (ConstructorInitializer) yyVals[0+yyTop];
			
			if (c.IsStatic) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			}
		}

		yyVal = yyVals[-1+yyTop];
	  }

void case_275()
#line 2298 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_277()
#line 2308 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_278()
#line 2314 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	  
		yyVal = new ConstructorThisInitializer (null, GetLocation (yyVals[0+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_279()
#line 2320 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_280()
#line 2328 "cs-parser.jay"
{
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_281()
#line 2337 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_type, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		d.Identifier = lt.Value;
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_type.AddMember (d);
		lbag.AddMember (d, GetModifierLocations (), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_282()
#line 2363 "cs-parser.jay"
{
		current_event_field = new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_type.AddMember (current_event_field);
		
		if (current_event_field.MemberName.ExplicitInterface != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_283()
#line 2377 "cs-parser.jay"
{
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, GetModifierLocations (), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_284()
#line 2390 "cs-parser.jay"
{
		current_event = new EventProperty (current_type, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_type.AddMember (current_event);
		lbag.AddMember (current_event, GetModifierLocations (), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_285()
#line 2398 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_286()
#line 2405 "cs-parser.jay"
{
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_287()
#line 2418 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddMember (new EventField (current_type, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], MemberName.Null, (Attributes) yyVals[-4+yyTop]));
	  }

void case_290()
#line 2432 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_295()
#line 2456 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_297()
#line 2466 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_298()
#line 2475 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_302()
#line 2496 "cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_303()
#line 2501 "cs-parser.jay"
{
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_304()
#line 2506 "cs-parser.jay"
{ 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_305()
#line 2514 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_306()
#line 2526 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_307()
#line 2542 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, GetModifierLocations ());
		lexer.EventParsing = false;		
	  }

void case_308()
#line 2554 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_309()
#line 2570 "cs-parser.jay"
{
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_311()
#line 2579 "cs-parser.jay"
{
		current_type.UnattachedAttributes = (Attributes) yyVals[-1+yyTop];
		report.Error (1519, GetLocation (yyVals[-1+yyTop]), "An attribute is missing member declaration");
		lexer.putback ('}');
	  }

void case_312()
#line 2592 "cs-parser.jay"
{
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_313()
#line 2597 "cs-parser.jay"
{
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_container (new Enum (current_container, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], name, (Attributes) yyVals[-6+yyTop]), null);
		if (yyVals[-2+yyTop] != null) {
			lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), savedLocation, GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_314()
#line 2614 "cs-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_315()
#line 2620 "cs-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-1+yyTop]));
		if (yyVals[0+yyTop] != null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[0+yyTop]));
		}
		if (doc_support)
			current_container.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		yyVal = pop_current_class ();
	  }

void case_317()
#line 2640 "cs-parser.jay"
{
		savedLocation = GetLocation (yyVals[-1+yyTop]);
		yyVal = yyVals[0+yyTop];
	 }

void case_318()
#line 2645 "cs-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_323()
#line 2663 "cs-parser.jay"
{
		lbag.AppendToMember (current_container, GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_324()
#line 2671 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_325()
#line 2684 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_326()
#line 2692 "cs-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_type).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_327()
#line 2706 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	var em = new EnumMember ((Enum) current_type, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-2+yyTop]);
	  	((Enum) current_type).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_330()
#line 2733 "cs-parser.jay"
{
		valid_param_mod = 0;

		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_container, (FullNamedExpression) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (MemberName) yyVals[-4+yyTop], p, (Attributes) yyVals[-8+yyTop]);

		p.CheckParameters (del);

		current_container.AddTypeContainer (del);

		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_332()
#line 2752 "cs-parser.jay"
{
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		if (yyVals[-2+yyTop] != null)
			current_delegate.SetConstraints ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, GetModifierLocations (), GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_334()
#line 2771 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_336()
#line 2782 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_338()
#line 2794 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_339()
#line 2803 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }

void case_341()
#line 2815 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
		var list = locationListStack.Pop ();
		list.Add (GetLocation (yyVals[-2+yyTop]));
		list.Add (GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVals[-1+yyTop], list);
	
		yyVal = yyVals[-1+yyTop];;
	  }

void case_342()
#line 2826 "cs-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_343()
#line 2834 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
		locationListStack.Push (new List<Location> ());
	  }

void case_344()
#line 2841 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
		locationListStack.Peek ().Add (GetLocation (yyVals[-1+yyTop]));
	  }

void case_346()
#line 2858 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters)yyVals[0+yyTop], lt.Location);
	  }

void case_347()
#line 2867 "cs-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeParameters != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_349()
#line 2878 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeParameters) yyVals[0+yyTop], (ATypeNameExpression) yyVals[-2+yyTop], lt.Location);
	  }

void case_350()
#line 2887 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_351()
#line 2892 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName (TypeDefinition.DefaultIndexerName, null, (ATypeNameExpression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_352()
#line 2900 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_353()
#line 2906 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_354()
#line 2914 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberAccess ((ATypeNameExpression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_356()
#line 2924 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		var list = locationListStack.Pop ();
		list.Add (GetLocation (yyVals[-2+yyTop]));
		list.Add (GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVals[-1+yyTop], list);
	  }

void case_357()
#line 2938 "cs-parser.jay"
{
		var tparams = new TypeParameters ();
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		locationListStack.Push (new List<Location> ());
	  }

void case_358()
#line 2945 "cs-parser.jay"
{
		var tparams = (TypeParameters) yyVals[-2+yyTop];
		tparams.Add ((TypeParameter)yyVals[0+yyTop]);
		yyVal = tparams;
		locationListStack.Peek ().Add (GetLocation (yyVals[-1+yyTop]));
	  }

void case_359()
#line 2955 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		var variance = (Variance) yyVals[-1+yyTop];
		yyVal = new TypeParameter (new MemberName (lt.Value, lt.Location), (Attributes)yyVals[-2+yyTop], variance);
		if (variance != Variance.None)
			lbag.AddLocation (yyVal, savedLocation);
  	  }

void case_360()
#line 2963 "cs-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameter (MemberName.Null, null, Variance.None);
  	  }

void case_365()
#line 2997 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_367()
#line 3006 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_369()
#line 3015 "cs-parser.jay"
{
	  	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_372()
#line 3031 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast ((ATypeNameExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			var sn = yyVals[-1+yyTop] as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		}
	  }

void case_374()
#line 3047 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_377()
#line 3063 "cs-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_378()
#line 3069 "cs-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		lbag.AppendTo (types, GetLocation (yyVals[-1+yyTop]));
		yyVal = types;
	  }

void case_379()
#line 3079 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_416()
#line 3143 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_417()
#line 3147 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_428()
#line 3188 "cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_430()
#line 3200 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_431()
#line 3207 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_432()
#line 3214 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_433()
#line 3221 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_435()
#line 3231 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_437()
#line 3239 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_438()
#line 3247 "cs-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_439()
#line 3252 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_442()
#line 3268 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = new CollectionOrObjectInitializers (new List<Expression> (), GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  	}
	  }

void case_443()
#line 3278 "cs-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_446()
#line 3294 "cs-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_447()
#line 3300 "cs-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (a, GetLocation (yyVals[-1+yyTop]));
	  	yyVal = a;
	  }

void case_448()
#line 3306 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_449()
#line 3314 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_451()
#line 3323 "cs-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_452()
#line 3331 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else {
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  	}
	  }

void case_453()
#line 3340 "cs-parser.jay"
{
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = new CollectionElementInitializer (new List<Expression> (), GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_458()
#line 3359 "cs-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_459()
#line 3365 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_460()
#line 3375 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_461()
#line 3390 "cs-parser.jay"
{
	  	if (lexer.putback_char == -1)
	  		lexer.putback (')'); /* TODO: Wrong but what can I do*/
		Error_SyntaxError (yyToken);
		yyVal = yyVals[-2+yyTop];
	  }

void case_462()
#line 3397 "cs-parser.jay"
{
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_467()
#line 3418 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_468()
#line 3423 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_469()
#line 3428 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_470()
#line 3433 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_472()
#line 3445 "cs-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_473()
#line 3450 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_474()
#line 3455 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new ElementAccess ((Expression) yyVals[-2+yyTop], null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_475()
#line 3463 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_476()
#line 3469 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_477()
#line 3475 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_478()
#line 3483 "cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_479()
#line 3489 "cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
		yyVal = args;	  
	  }

void case_483()
#line 3517 "cs-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_484()
#line 3522 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_487()
#line 3544 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_488()
#line 3557 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_489()
#line 3569 "cs-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_490()
#line 3577 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_491()
#line 3584 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_492()
#line 3591 "cs-parser.jay"
{
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_493()
#line 3596 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		/* It can be any of new expression, create the most common one*/
		yyVal = new New ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_495()
#line 3608 "cs-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_496()
#line 3616 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_501()
#line 3639 "cs-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_502()
#line 3645 "cs-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	lbag.AppendTo (a, GetLocation (yyVals[-1+yyTop]));

	  	yyVal = a;
	  }

void case_503()
#line 3656 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_504()
#line 3662 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_505()
#line 3668 "cs-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_506()
#line 3673 "cs-parser.jay"
{
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_510()
#line 3688 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_511()
#line 3696 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_512()
#line 3701 "cs-parser.jay"
{
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_517()
#line 3731 "cs-parser.jay"
{
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }

void case_518()
#line 3738 "cs-parser.jay"
{
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }

void case_519()
#line 3752 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_520()
#line 3758 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_522()
#line 3772 "cs-parser.jay"
{
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_525()
#line 3783 "cs-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_526()
#line 3791 "cs-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_527()
#line 3797 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_528()
#line 3805 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location) {
			DotLocation = GetLocation (yyVals[-1+yyTop])
		};
	  }

void case_529()
#line 3813 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};
	  }

void case_530()
#line 3821 "cs-parser.jay"
{
		var tne = (ATypeNameExpression) yyVals[-3+yyTop];
		if (tne.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (tne, lt.Value, (int) yyVals[0+yyTop], lt.Location) {
			DotLocation = GetLocation (yyVals[-2+yyTop])
		};		
	  }

void case_531()
#line 3835 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_532()
#line 3845 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_533()
#line 3856 "cs-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_534()
#line 3864 "cs-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_535()
#line 3872 "cs-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_536()
#line 3880 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_538()
#line 3892 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		if ((ParametersCompiled) yyVals[-2+yyTop] != ParametersCompiled.Undefined) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), savedOpenLocation, savedCloseLocation);
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
		}
	  }

void case_540()
#line 3905 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		
		if ((ParametersCompiled) yyVals[-2+yyTop] != ParametersCompiled.Undefined) {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), savedOpenLocation, savedCloseLocation);
		} else {
			lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]));
		}
	  }

void case_544()
#line 3930 "cs-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  	savedOpenLocation = GetLocation (yyVals[-3+yyTop]);
	  	savedCloseLocation = GetLocation (yyVals[-2+yyTop]);
	  }

void case_545()
#line 3940 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_549()
#line 3960 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_550()
#line 3965 "cs-parser.jay"
{
		if (!async_block) {
			 if (current_anonymous_method is LambdaExpression) {
				report.Error (4034, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing lambda expression is marked with the `async' modifier");
			} else if (current_anonymous_method is AnonymousMethodExpression) {
				report.Error (4035, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing anonymous method is marked with the `async' modifier");
			} else {
				report.Error (4033, GetLocation (yyVals[-1+yyTop]),
					"The `await' operator can only be used when its containing method is marked with the `async' modifier");
			}
		} else {
			current_block.Explicit.RegisterAsyncAwait ();
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_559()
#line 4020 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_560()
#line 4025 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_561()
#line 4030 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_563()
#line 4039 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_564()
#line 4044 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_568()
#line 4061 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_569()
#line 4066 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_571()
#line 4075 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_572()
#line 4080 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_573()
#line 4085 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_574()
#line 4090 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_576()
#line 4099 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_577()
#line 4104 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_579()
#line 4113 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
#line 4122 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_583()
#line 4131 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_585()
#line 4140 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_587()
#line 4149 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_589()
#line 4158 "cs-parser.jay"
{
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_591()
#line 4170 "cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_592()
#line 4175 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-3+yyTop]), (Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_593()
#line 4183 "cs-parser.jay"
{
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_594()
#line 4188 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_595()
#line 4193 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_596()
#line 4198 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_597()
#line 4203 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_598()
#line 4208 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_599()
#line 4213 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_600()
#line 4218 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_601()
#line 4223 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_602()
#line 4228 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_603()
#line 4233 "cs-parser.jay"
{
		yyVal = new CompoundAssign (Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_604()
#line 4241 "cs-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);
		parameterListCommas.Clear ();
		yyVal = pars;
	  }

void case_605()
#line 4248 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		parameterListCommas.Add (GetLocation (yyVals[-1+yyTop]));

		yyVal = pars;
	  }

void case_606()
#line 4264 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_607()
#line 4270 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_608()
#line 4276 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_610()
#line 4284 "cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
		lbag.AddLocation (yyVal, parameterListCommas);
	  }

void case_614()
#line 4301 "cs-parser.jay"
{
		Block b = end_block (Location.Null);
		b.IsCompilerGenerated = true;
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_616()
#line 4312 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);	
		yyVal = EmptyExpression.Null;
	  }

void case_617()
#line 4320 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }

void case_618()
#line 4326 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_619()
#line 4331 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }

void case_620()
#line 4337 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_622()
#line 4346 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }

void case_623()
#line 4351 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_625()
#line 4360 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }

void case_626()
#line 4365 "cs-parser.jay"
{
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_633()
#line 4388 "cs-parser.jay"
{
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_634()
#line 4393 "cs-parser.jay"
{
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_635()
#line 4398 "cs-parser.jay"
{
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }

void case_639()
#line 4427 "cs-parser.jay"
{
		Class c = new Class (current_container, (MemberName) yyVals[0+yyTop], (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_container (c, yyVals[-3+yyTop]);
		lbag.AddMember (current_container, GetModifierLocations (), GetLocation (yyVals[-2+yyTop]));
	  }

void case_640()
#line 4438 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		if (yyVals[0+yyTop] != null)
			current_container.SetConstraints ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.PartialContainer.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }

void case_641()
#line 4452 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_642()
#line 4458 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null) {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		} else {
			lbag.AppendToMember (current_container, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = pop_current_class ();
	  }

void case_645()
#line 4477 "cs-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }

void case_648()
#line 4491 "cs-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_649()
#line 4510 "cs-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container.Kind == MemberKind.Namespace)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_650()
#line 4518 "cs-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_651()
#line 4523 "cs-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_652()
#line 4528 "cs-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_653()
#line 4533 "cs-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_654()
#line 4538 "cs-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_655()
#line 4543 "cs-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_656()
#line 4548 "cs-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_657()
#line 4553 "cs-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_658()
#line 4558 "cs-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_659()
#line 4563 "cs-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_660()
#line 4568 "cs-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_661()
#line 4573 "cs-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_662()
#line 4578 "cs-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_663()
#line 4585 "cs-parser.jay"
{
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_665()
#line 4594 "cs-parser.jay"
{
		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[0+yyTop]);
		lbag.AppendToMember (current_type, GetLocation (yyVals[-1+yyTop]));
	 }

void case_666()
#line 4599 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		current_type.AddBasesForPart ((List<FullNamedExpression>) yyVals[-1+yyTop]);
	  }

void case_669()
#line 4616 "cs-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_670()
#line 4622 "cs-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_671()
#line 4641 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_672()
#line 4647 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_673()
#line 4657 "cs-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_674()
#line 4663 "cs-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		lbag.AppendTo (constraints, GetLocation (yyVals[-1+yyTop]));
		yyVal = constraints;
	  }

void case_675()
#line 4690 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_676()
#line 4697 "cs-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_680()
#line 4717 "cs-parser.jay"
{
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");
		
		yyVal = yyVals[0+yyTop];
	  }

void case_681()
#line 4727 "cs-parser.jay"
{
		yyVal = Variance.Covariant;
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_682()
#line 4732 "cs-parser.jay"
{
		yyVal = Variance.Contravariant;
		savedLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_683()
#line 4753 "cs-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_685()
#line 4765 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_686()
#line 4770 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_687()
#line 4779 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_688()
#line 4784 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_689()
#line 4788 "cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol '}', expected '{'");
		lexer.putback ('}');
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_690()
#line 4797 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_691()
#line 4802 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_699()
#line 4830 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		var lt =(Tokenizer.LocatedToken) yyVals[-1+yyTop];
		var sn = new SimpleName (lt.Value, lt.Location);
		current_block.AddStatement(new StatementErrorExpression (sn));
		yyVal = null;
	}

void case_700()
#line 4839 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_733()
#line 4903 "cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_734()
#line 4908 "cs-parser.jay"
{
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_735()
#line 4913 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_736()
#line 4921 "cs-parser.jay"
{
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }

void case_737()
#line 4929 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);
		lbag.AddLocation (labeled, GetLocation (yyVals[0+yyTop]));
		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }

void case_740()
#line 4942 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_741()
#line 4958 "cs-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_742()
#line 4988 "cs-parser.jay"
{
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }

void case_743()
#line 4999 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_746()
#line 5014 "cs-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }

void case_748()
#line 5023 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_751()
#line 5039 "cs-parser.jay"
{
		if (async_block) {
			report.Error (4003, GetLocation (yyVals[0+yyTop]), "`await' cannot be used as an identifier within an async method or lambda expression");
			yyVal = new Tokenizer.LocatedToken ("await", GetLocation (yyVals[0+yyTop]));
		}
	  }

void case_752()
#line 5049 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_753()
#line 5056 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
		lbag.AppendTo (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_754()
#line 5062 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_755()
#line 5069 "cs-parser.jay"
{
		if (current_variable.Initializer != null) {
			lbag.AddLocation (current_variable, GetLocation (yyVals[-6+yyTop]), savedLocation, GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (current_variable, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		}
		yyVal = current_variable;;
		current_variable = null;
	  }

void case_757()
#line 5082 "cs-parser.jay"
{
		/* Redundant, but wont regress*/
		report.Error (1525, lexer.Location, "Unexpected symbol }");
		lexer.putback ('}');
		yyVal = yyVals[0+yyTop];
	  }

void case_759()
#line 5093 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
	  }

void case_760()
#line 5098 "cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
			current_variable.Initializer = ErrorExpression.Create (650, lexer.Location,
					"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
			current_variable.Initializer = ErrorExpression.Create (0, lexer.Location,
					"Syntax error");
		}
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
	  }

void case_761()
#line 5112 "cs-parser.jay"
{
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }

void case_765()
#line 5130 "cs-parser.jay"
{
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }

void case_768()
#line 5145 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }

void case_769()
#line 5154 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_771()
#line 5170 "cs-parser.jay"
{
		savedLocation = GetLocation (yyVals[-1+yyTop]);
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_776()
#line 5188 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_778()
#line 5201 "cs-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_779()
#line 5206 "cs-parser.jay"
{
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_780()
#line 5214 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_782()
#line 5220 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		report.Error (1002, GetLocation (yyVals[0+yyTop]), "; expected");
		lexer.putback ('}');
	  }

void case_785()
#line 5238 "cs-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (report, GetLocation (yyVals[0+yyTop]));
			yyVal = new StatementErrorExpression (yyVals[0+yyTop] as Expression);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }

void case_786()
#line 5251 "cs-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_787()
#line 5259 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_790()
#line 5273 "cs-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_791()
#line 5282 "cs-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_792()
#line 5292 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new If ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_794()
#line 5306 "cs-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_795()
#line 5312 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Switch ((Expression) yyVals[-1+yyTop], null, null, GetLocation (yyVals[-3+yyTop]));	
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_796()
#line 5322 "cs-parser.jay"
{
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_798()
#line 5331 "cs-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_799()
#line 5338 "cs-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_800()
#line 5345 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new List<SwitchSection> ();
	  }

void case_803()
#line 5364 "cs-parser.jay"
{
		var labels = new List<SwitchLabel> (2);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_804()
#line 5371 "cs-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_805()
#line 5381 "cs-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_806()
#line 5386 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_812()
#line 5405 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_813()
#line 5413 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new While ((BooleanExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_814()
#line 5423 "cs-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_815()
#line 5428 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Do ((Statement) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), Location.Null);
	  }

void case_816()
#line 5433 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	  
		yyVal = new Do ((Statement) yyVals[-4+yyTop], (BooleanExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_817()
#line 5443 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
		For f = new For (GetLocation (yyVals[-1+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, current_block.StartLocation);
		yyVal = f;
	  }

void case_819()
#line 5460 "cs-parser.jay"
{
		For f =  (For) yyVals[-2+yyTop];
		f.Initializer = (Statement) yyVals[-1+yyTop];
		lbag.AppendTo (f, GetLocation (yyVals[0+yyTop]));
		yyVal = f;
	  }

void case_821()
#line 5470 "cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol ')', expected ';'");
		For f =  (For) yyVals[-2+yyTop];
		f.Initializer = (Statement) yyVals[-1+yyTop];
		lbag.AppendTo (f, GetLocation (yyVals[0+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	}

void case_822()
#line 5481 "cs-parser.jay"
{
		For f =  (For) yyVals[-2+yyTop];
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		lbag.AppendTo (f, GetLocation (yyVals[0+yyTop]));
		yyVal = f;
	  }

void case_824()
#line 5492 "cs-parser.jay"
{
		report.Error (1525, GetLocation (yyVals[0+yyTop]), "Unexpected symbol ')', expected ';'");
		For f =  (For) yyVals[-2+yyTop];
		f.Condition = (BooleanExpression) yyVals[-1+yyTop];
		lbag.AppendTo (f, GetLocation (yyVals[0+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	}

void case_825()
#line 5504 "cs-parser.jay"
{
		For f =  (For) yyVals[-3+yyTop];
		f.Iterator = (Statement) yyVals[-2+yyTop];
		
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		f.Statement = (Statement) yyVals[0+yyTop];
		lbag.AppendTo (f, GetLocation (yyVals[-1+yyTop]));

		yyVal = end_block (GetLocation (yyVals[-1+yyTop]));
	  }

void case_826()
#line 5517 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }

void case_829()
#line 5530 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_830()
#line 5537 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_838()
#line 5561 "cs-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  		
	  	}
	  		
		yyVal = sl;
	  }

void case_839()
#line 5578 "cs-parser.jay"
{
		report.Error (230, GetLocation (yyVals[-3+yyTop]), "Type and identifier are both required in a foreach statement");

		start_block (GetLocation (yyVals[-2+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_840()
#line 5591 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
	
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-3+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_841()
#line 5608 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }

void case_842()
#line 5617 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], current_block, GetLocation (yyVals[-8+yyTop]));
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		end_block (GetLocation (yyVals[-2+yyTop]));
		
		yyVal = f;
	  }

void case_843()
#line 5628 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		current_block.IsCompilerGenerated = true;
		var lt = yyVals[-1+yyTop] as Tokenizer.LocatedToken;
		var li = lt != null ? new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location) : null;
		
		Foreach f = new Foreach ((Expression) yyVals[-2+yyTop], li, null, null, null, GetLocation (yyVals[-4+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-3+yyTop]));
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_844()
#line 5641 "cs-parser.jay"
{
		Foreach f = new Foreach ((Expression) yyVals[-1+yyTop], null, null, null, null, GetLocation (yyVals[-3+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-2+yyTop]));
		yyVal = f;
	  }

void case_851()
#line 5661 "cs-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_852()
#line 5669 "cs-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_853()
#line 5674 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
	  }

void case_854()
#line 5682 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_855()
#line 5688 "cs-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_856()
#line 5693 "cs-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_857()
#line 5701 "cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_858()
#line 5706 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_859()
#line 5711 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Return (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_860()
#line 5719 "cs-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_861()
#line 5724 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new Throw (null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_862()
#line 5732 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_863()
#line 5748 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_864()
#line 5766 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Explicit.RegisterIteratorYield ();
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_868()
#line 5792 "cs-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_869()
#line 5797 "cs-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], Location.Null, true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_870()
#line 5802 "cs-parser.jay"
{
		Error_SyntaxError (1524, yyToken);
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]), false);
	  }

void case_871()
#line 5810 "cs-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_872()
#line 5817 "cs-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [l.Count - 1].IsGeneral) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		}
		
		l.Add (c);
		yyVal = l;
	  }

void case_876()
#line 5841 "cs-parser.jay"
{
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}

		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }

void case_878()
#line 5860 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_879()
#line 5871 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		var c = new Catch (null, GetLocation (yyVals[-5+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-3+yyTop];
		
		if (yyVals[-2+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
		}

		lbag.AddLocation (c, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]));

		yyVal = c;
	  }

void case_882()
#line 5904 "cs-parser.jay"
{
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_884()
#line 5914 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_885()
#line 5922 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);

		yyVal = new Lock ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_886()
#line 5932 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_887()
#line 5942 "cs-parser.jay"
{
		yyVal = current_variable;
		current_variable = null;
	  }

void case_888()
#line 5947 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_889()
#line 5960 "cs-parser.jay"
{
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }

void case_890()
#line 5970 "cs-parser.jay"
{
		yyVal = current_variable;	  
		current_variable = null;
	  }

void case_891()
#line 5975 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-2+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }

void case_892()
#line 5985 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_893()
#line 5993 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		
		yyVal = new Using ((Expression) yyVals[-1+yyTop], null, GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_895()
#line 6004 "cs-parser.jay"
{
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  }

void case_897()
#line 6016 "cs-parser.jay"
{
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendTo (current_variable, GetLocation (yyVals[-1+yyTop]));
		yyVal = current_variable;
	  }

void case_898()
#line 6028 "cs-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_899()
#line 6040 "cs-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_900()
#line 6051 "cs-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_901()
#line 6058 "cs-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_902()
#line 6067 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var start = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (start, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (start);
	  }

void case_903()
#line 6077 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var start = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (start, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (start);
	  }

void case_904()
#line 6092 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var start = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (start, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (start);
	  }

void case_905()
#line 6102 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		var start = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
		};
		lbag.AddLocation (start, GetLocation (yyVals[-1+yyTop]));
		yyVal = new Linq.QueryExpression (start);
	  }

void case_907()
#line 6121 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);

		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_909()
#line 6137 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_910()
#line 6156 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_911()
#line 6171 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[0+yyTop];

		if (yyVals[-1+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-1+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_913()
#line 6184 "cs-parser.jay"
{
		report.Error (742, GetLocation (yyVals[0+yyTop]), "Unexpected symbol `{0}'. A query body must end with select or group clause", GetSymbolName (yyToken));
		yyVal = yyVals[-1+yyTop];
	  }

void case_914()
#line 6189 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_916()
#line 6201 "cs-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_917()
#line 6208 "cs-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_918()
#line 6216 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_919()
#line 6223 "cs-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_921()
#line 6235 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_928()
#line 6255 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_930()
#line 6274 "cs-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_931()
#line 6284 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_932()
#line 6292 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_933()
#line 6300 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_934()
#line 6308 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
			lbag.AddLocation (yyVal, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), opt_intoStack.Pop ());
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }

void case_935()
#line 6346 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_936()
#line 6354 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_937()
#line 6362 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_938()
#line 6370 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
			lbag.AddLocation (yyVal, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
			lbag.AddLocation (yyVal, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), opt_intoStack.Pop ());
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }

void case_940()
#line 6416 "cs-parser.jay"
{
		opt_intoStack.Push (GetLocation (yyVals[-1+yyTop]));
		yyVal = yyVals[0+yyTop];
	  }

void case_942()
#line 6428 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_944()
#line 6439 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }

void case_945()
#line 6446 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_947()
#line 6455 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_948()
#line 6462 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_950()
#line 6474 "cs-parser.jay"
{
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_951()
#line 6479 "cs-parser.jay"
{
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_953()
#line 6491 "cs-parser.jay"
{
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_954()
#line 6496 "cs-parser.jay"
{
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_956()
#line 6506 "cs-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_957()
#line 6522 "cs-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_960()
#line 6549 "cs-parser.jay"
{ 
		current_container = current_type = new Class (current_container, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		Method method = new Method (
			current_type,
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			new MemberName ("Host"),
			pars,
			null /* attributes */);
			
		current_type.AddMember (method);			

		oob_stack.Push (method);
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_961()
#line 6577 "cs-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }

void case_971()
#line 6620 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }

void case_972()
#line 6626 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }

void case_975()
#line 6641 "cs-parser.jay"
{
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], MemberCache.IndexerNameAlias, Location.Null);
	  }

void case_976()
#line 6646 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }

void case_977()
#line 6654 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }

void case_978()
#line 6662 "cs-parser.jay"
{
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }

void case_986()
#line 6700 "cs-parser.jay"
{
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_987()
#line 6706 "cs-parser.jay"
{
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }

void case_988()
#line 6715 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   15,   15,   15,
   19,   20,   17,   17,   18,   18,   18,   22,   22,   23,
   23,    7,    7,    6,    6,   21,   21,    8,    8,   24,
   24,   24,   25,   25,   25,   25,   25,    9,    9,   10,
   10,   33,   31,   36,   32,   32,   34,   34,   34,   34,
   35,   35,   40,   37,   38,   39,   39,   41,   41,   41,
   41,   41,   42,   42,   46,   43,   45,   48,   48,   48,
   49,   49,   50,   50,   51,   51,   51,   51,   51,   51,
   51,   51,   51,   51,   51,   51,   65,   67,   69,   70,
   71,   27,   27,   74,   52,   52,   75,   75,   76,   76,
   77,   79,   73,   73,   78,   78,   84,   53,   88,   53,
   53,   83,   91,   83,   85,   85,   92,   92,   93,   94,
   93,   89,   89,   95,   95,   96,   97,   87,   87,   90,
   90,   90,  100,   54,  103,  104,   98,  105,  106,  107,
   98,   98,   98,   99,   99,  102,  102,  110,  110,  110,
  110,  110,  110,  110,  110,  110,  110,  111,  111,  114,
  114,  114,  114,  117,  114,  115,  115,  118,  118,  119,
  119,  119,  112,  112,  112,  120,  120,  120,  113,  122,
  124,  125,   55,  127,  128,  129,   57,  123,  123,  123,
  123,  123,  133,  130,  134,  131,  132,  132,  132,  135,
  136,  137,  139,   28,   28,  138,  138,  140,  140,  141,
  141,  141,  141,  141,  141,  141,  141,  141,  144,   58,
  143,  143,  145,  145,  148,  142,  142,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
  147,  147,  147,  147,  147,  147,  147,  147,  147,  150,
  149,  151,  149,  149,  149,   59,  154,  156,  152,  153,
  153,  155,  155,  160,  158,  161,  158,  158,  158,  162,
   60,  164,   56,  167,  168,   56,   56,  163,  170,  163,
  165,  165,  171,  171,  172,  173,  172,  174,  169,  166,
  166,  166,  166,  166,  178,  175,  179,  176,  177,  177,
   61,  181,  183,  184,   29,  180,  180,  180,  182,  182,
  182,  185,  185,  186,  187,  186,  186,  186,  188,  189,
  190,   30,  191,  191,   16,   16,  192,  192,  195,  194,
  194,  194,  196,  196,  198,   64,  121,  101,  101,  126,
  126,  199,  199,  199,  197,  197,  200,  200,  201,  201,
  203,  203,   82,   72,   72,   86,   86,  116,  116,  146,
  146,  204,  204,  204,  204,  204,  208,  208,  209,  207,
  207,  207,  207,  207,  207,  207,  210,  210,  210,  210,
  210,  210,  210,  210,  210,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  211,  212,  212,  212,  213,  213,
  213,  233,  233,  234,  234,  235,  235,  215,  215,  232,
  232,  232,  232,  232,  232,  232,  232,  217,  217,  237,
  237,  238,  238,  239,  239,  241,  241,  241,  242,  242,
  242,  242,  242,  243,  243,  159,  159,  236,  236,  236,
  236,  236,  248,  248,  247,  247,  249,  249,  249,  249,
  250,  218,  218,  218,  246,  246,  246,  251,  251,  252,
  252,  219,  220,  220,  221,  222,  223,  223,  214,  214,
  214,  214,  214,  257,  253,  224,  258,  258,  259,  259,
  260,  260,  261,  261,  261,  261,  254,  254,  205,  205,
  256,  256,  262,  262,  255,  255,   81,   81,  263,  263,
  264,  225,  265,  265,  265,  266,  266,  266,  266,  266,
  267,  193,  226,  227,  228,  229,  269,  230,  270,  230,
  268,  268,  272,  271,  216,  273,  273,  273,  273,  273,
  274,  274,  274,  274,  274,  274,  274,  275,  275,  275,
  275,  276,  276,  276,  276,  276,  277,  277,  277,  278,
  278,  278,  278,  278,  279,  279,  279,  280,  280,  281,
  281,  282,  282,  283,  283,  284,  284,  285,  285,  286,
  286,  286,  288,  288,  288,  288,  288,  288,  288,  288,
  288,  288,  288,  289,  289,  290,  290,  290,  291,  291,
  292,  292,  294,  293,  287,  287,  296,  295,  297,  295,
  298,  299,  295,  300,  301,  295,   44,   44,  244,  244,
  244,  244,  231,  231,  231,   80,  303,  304,  305,  306,
  307,   26,   63,   63,   62,   62,  108,  108,  308,  308,
  308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
  308,  308,  308,   66,   66,   66,   68,   68,  309,  309,
  310,  310,  311,  311,  312,  312,  312,  312,  202,  202,
  313,  313,  315,  109,  316,  316,  317,  157,  157,  319,
  318,  314,  314,  320,  320,  321,  321,  321,  321,  321,
  325,  325,  326,  326,  326,  323,  323,  323,  323,  323,
  323,  323,  323,  323,  323,  323,  323,  323,  327,  327,
  327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
  327,  341,  341,  341,  341,  328,  342,  324,  343,  343,
  344,  344,  344,  344,  344,  344,  206,  206,  345,   47,
   47,  347,  322,  351,  322,  349,  349,  346,  346,  346,
  346,  348,  348,  355,  355,  354,  354,  356,  356,  350,
  350,  352,  352,  357,  357,  358,  353,  353,  353,  329,
  329,  329,  340,  340,  359,  360,  360,  330,  330,  361,
  361,  361,  364,  362,  362,  363,  363,  365,  365,  365,
  368,  366,  367,  367,  369,  369,  369,  331,  331,  331,
  331,  370,  370,  371,  371,  371,  375,  372,  378,  374,
  374,  381,  377,  377,  380,  380,  376,  376,  384,  383,
  383,  379,  379,  382,  382,  386,  385,  385,  373,  373,
  387,  373,  373,  373,  332,  332,  332,  332,  332,  332,
  388,  389,  389,  390,  390,  390,  391,  391,  391,  392,
  392,  393,  393,  393,  394,  394,  333,  333,  333,  333,
  395,  395,  397,  397,  396,  398,  396,  396,  396,  334,
  335,  399,  338,  336,  336,  401,  402,  339,  404,  405,
  337,  337,  337,  403,  403,  400,  400,  302,  302,  302,
  302,  406,  406,  408,  408,  410,  409,  411,  409,  407,
  407,  407,  407,  407,  415,  413,  416,  417,  413,  412,
  412,  418,  418,  418,  418,  418,  423,  419,  424,  420,
  425,  426,  427,  421,  429,  430,  431,  421,  428,  428,
  433,  422,  432,  436,  432,  435,  438,  435,  434,  434,
  434,  437,  437,  437,  414,  439,  414,    3,    3,  440,
    3,    3,  441,  441,  245,  245,  240,  240,    5,  442,
  442,  442,  442,  446,  442,  442,  442,  442,  443,  443,
  444,  447,  444,  445,  445,  448,  448,  449,
  };
   static readonly short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    3,    5,    2,
    0,    0,   11,    3,    1,    3,    1,    0,    1,    0,
    1,    0,    1,    0,    1,    0,    1,    1,    2,    1,
    1,    2,    1,    1,    1,    1,    1,    0,    1,    1,
    2,    0,    3,    0,    6,    3,    1,    1,    1,    1,
    1,    3,    0,    3,    1,    0,    3,    0,    1,    1,
    3,    3,    1,    1,    0,    4,    4,    0,    1,    1,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,
    0,   16,    5,    0,    9,    5,    0,    1,    1,    2,
    3,    0,    3,    1,    1,    1,    0,    8,    0,    9,
    6,    0,    0,    3,    0,    1,    1,    2,    2,    0,
    5,    0,    1,    1,    2,    3,    0,    4,    2,    1,
    1,    1,    0,    3,    0,    0,   10,    0,    0,    0,
   12,    8,    5,    1,    1,    0,    1,    1,    3,    3,
    3,    5,    3,    5,    1,    1,    1,    1,    3,    4,
    6,    2,    4,    0,    7,    0,    1,    1,    2,    1,
    1,    1,    4,    6,    4,    1,    2,    2,    1,    0,
    0,    0,   10,    0,    0,    0,   13,    1,    2,    1,
    2,    1,    0,    5,    0,    5,    1,    1,    1,    0,
    0,    0,    0,   15,    5,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    5,
    1,    1,    1,    1,    0,    7,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
    7,    0,    7,    2,    2,    2,    0,    0,    9,    1,
    1,    0,    1,    0,    6,    0,    6,    2,    1,    0,
    8,    0,    9,    0,    0,   10,    5,    0,    0,    3,
    0,    1,    1,    2,    2,    0,    5,    0,    2,    2,
    2,    1,    1,    1,    0,    5,    0,    5,    1,    1,
    2,    0,    0,    0,   12,    0,    2,    2,    0,    1,
    2,    1,    3,    2,    0,    5,    3,    1,    0,    0,
    0,   13,    0,    1,    1,    3,    1,    4,    2,    0,
    3,    2,    1,    3,    0,    3,    1,    1,    3,    1,
    2,    3,    4,    4,    0,    3,    1,    3,    3,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    2,    2,    2,    1,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    3,    3,    4,
    4,    4,    3,    3,    4,    3,    4,    4,    4,    0,
    1,    3,    4,    0,    1,    1,    3,    2,    3,    1,
    2,    3,    2,    1,    1,    0,    1,    1,    3,    3,
    3,    2,    1,    1,    1,    1,    2,    2,    4,    3,
    1,    4,    4,    3,    1,    3,    2,    1,    3,    1,
    1,    1,    4,    3,    2,    2,    6,    3,    7,    4,
    3,    7,    3,    0,    2,    4,    1,    2,    0,    1,
    1,    3,    3,    1,    1,    1,    0,    1,    1,    2,
    2,    3,    1,    2,    0,    1,    2,    4,    1,    3,
    0,    5,    1,    1,    1,    2,    3,    3,    4,    4,
    1,    2,    4,    4,    4,    4,    0,    4,    0,    5,
    0,    1,    0,    4,    4,    1,    2,    2,    4,    2,
    1,    2,    2,    2,    2,    2,    2,    1,    3,    3,
    3,    1,    3,    3,    3,    3,    1,    3,    3,    1,
    3,    3,    3,    3,    1,    3,    3,    1,    3,    1,
    3,    1,    3,    1,    3,    1,    3,    1,    3,    1,
    5,    4,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    1,    3,    3,    2,    1,    0,    1,
    1,    1,    0,    2,    1,    1,    0,    4,    0,    5,
    0,    0,    7,    0,    0,    8,    1,    1,    1,    1,
    1,    1,    6,    4,    4,    1,    1,    0,    0,    0,
    0,   15,    0,    1,    0,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    2,    3,    0,    1,    1,    2,
    4,    3,    1,    3,    1,    3,    1,    1,    0,    1,
    1,    1,    0,    4,    1,    1,    0,    4,    1,    0,
    4,    0,    1,    1,    2,    1,    1,    1,    2,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    4,    1,    2,
    2,    2,    2,    2,    2,    1,    1,    2,    1,    1,
    1,    0,    6,    0,    7,    1,    1,    0,    2,    2,
    1,    0,    1,    0,    1,    1,    2,    2,    4,    0,
    2,    0,    1,    1,    2,    4,    1,    5,    2,    2,
    2,    2,    2,    2,    1,    1,    1,    1,    1,    5,
    7,    4,    0,    8,    4,    0,    1,    1,    2,    1,
    0,    3,    1,    2,    3,    3,    1,    1,    1,    1,
    1,    5,    4,    7,    3,    6,    0,    4,    0,    4,
    2,    0,    4,    2,    3,    1,    0,    1,    0,    5,
    1,    0,    1,    0,    1,    1,    1,    3,    4,    5,
    0,    9,    5,    4,    1,    1,    1,    1,    1,    1,
    2,    2,    2,    3,    4,    3,    3,    3,    2,    3,
    2,    4,    4,    3,    0,    1,    3,    4,    5,    3,
    1,    2,    0,    1,    2,    0,    7,    3,    6,    2,
    2,    0,    3,    5,    4,    0,    0,   10,    0,    0,
    9,    5,    4,    2,    1,    0,    2,    2,    2,    2,
    2,    4,    5,    4,    5,    0,    5,    0,    6,    3,
    2,    2,    2,    1,    0,    3,    0,    0,    6,    1,
    2,    1,    1,    1,    1,    1,    0,    5,    0,    3,
    0,    0,    0,   12,    0,    0,    0,   13,    0,    2,
    0,    3,    1,    0,    4,    1,    0,    4,    1,    2,
    2,    1,    2,    2,    0,    0,    4,    2,    3,    0,
    4,    2,    2,    3,    0,    1,    1,    1,    2,    2,
    2,    4,    3,    0,    7,    4,    4,    3,    1,    3,
    0,    0,    4,    0,    1,    1,    3,    2,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0,  958,    0,    0,  962,    0,
    0,   15,   17,  382,  388,  395,  383,  385,    0,  384,
    0,  391,  393,  380,    0,  387,  389,  381,  392,  394,
  390,  345,  979,    0,  386,  969,    0,   10,    1,    0,
    0,    0,   12,    0,  787,    0,    0,    0,    0,    0,
    0,    0,    0,  423,    0,    0,    0,    0,    0,    0,
    0,  421,    0,    0,    0,  482,    0,  422,    0,  521,
    0,  882,    0,    0,    0,  632,    0,    0,    0,    0,
    0,    0,    0,  683,    0,  736,    0,    0,    0,    0,
    0,    0,    0,    0,  420,    0,  621,    0,  786,    0,
  719,    0,    0,    0,    0,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  418,  419,  628,  551,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  629,  627,  630,  631,  703,  705,    0,  701,  704,  720,
  722,  723,  724,  725,  726,  727,  728,  729,  730,  731,
  721,    0,    0,    0,  788,  789,  808,  809,  810,  811,
  845,  846,  847,  848,  849,  850,    0,    0,    0,   20,
    0,    0,  335,    0,  337,  966,   16,  959,    0,    0,
  243,  242,  239,  244,  245,  238,  257,  256,  249,  250,
  246,  248,  247,  251,  240,  241,  252,  253,  259,  258,
  254,  255,    0,    0,  982,    0,  971,    0,  970,    3,
   52,    0,    0,    0,   41,   38,   40,   43,   44,   45,
   46,   47,   50,   13,    0,    0,    0,  851,  424,  425,
  880,    0,    0,    0,    0,    0,    0,    0,  853,  852,
    0,  543,  537,  542,  735,  785,  706,  733,  732,  734,
  707,  708,  709,  710,  711,  712,  713,  714,  715,  716,
  717,  718,    0,    0,    0,  817,    0,    0,    0,  751,
  750,    0,    0,    0,    0,    0,    0,    0,    0,  859,
    0,    0,    0,    0,  396,    0,    0,    0,  861,  866,
    0,    0,    0,  881,    0,    0,    0,  749,  745,    0,
    0,    0,    0,    0,    0,    0,  364,    0,    0,    0,
    0,    0,    0,    0,    0,  624,    0,  550,    0,    0,
  548,  552,  553,  547,  557,  556,  554,  555,  617,  532,
    0,  417,  416,    0,    0,    0,    0,    0,  737,    0,
  334,    0,  743,  744,    0,  485,  486,    0,    0,    0,
  741,  742,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  961,  702,  752,  740,    0,
  783,  784,  914,  929,    0,    0,  915,  917,    0,  941,
  900,  898,  922,    0,    0,  920,  923,  924,  925,  926,
  901,  899,    0,    0,    0,  339,    0,   18,    0,    0,
    0,  978,    0,  346,    0,    0,    0,  980,    0,    0,
   39,  654,  660,  652,    0,  649,  659,  653,  651,  650,
  657,  655,  656,  662,  658,  661,  663,    0,    0,  647,
   42,   51,  484,    0,  480,  481,    0,    0,  478,    0,
  754,    0,    0,    0,  815,    0,  782,  780,  781,    0,
    0,    0,  636,    0,  856,  854,  637,    0,    0,  506,
    0,    0,    0,  497,    0,  501,  511,  513,    0,  493,
    0,    0,    0,    0,    0,  488,    0,  491,    0,  495,
  366,  858,  857,    0,    0,  860,  870,    0,    0,    0,
  871,    0,    0,  883,    0,    0,  748,    0,  376,  372,
  373,    0,    0,  371,  374,  375,    0,    0,    0,  558,
    0,    0,  539,    0,  619,  700,    0,    0,    0,  694,
  696,  697,  698,  428,  429,    0,  342,  343,    0,  181,
  180,  182,    0,    0,    0,    0,  368,    0,  604,    0,
    0,  864,    0,    0,    0,  433,    0,  436,    0,  434,
    0,  474,    0,    0,    0,    0,    0,  463,  466,    0,
    0,  458,  465,  464,  593,  594,  595,  596,  597,  598,
  599,  600,  601,  603,  602,  559,  561,  560,  565,  566,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  589,    0,    0,  510,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  913,  912,
    0,  921,    0,  911,    0,    0,  336,  976,  977,  360,
    0,    0,    0,  357,    0,    0,  178,    0,    0,  986,
  972,  974,   60,   58,   59,    0,    0,   53,    0,    0,
   61,   63,   27,   25,    0,    0,    0,  644,    0,  648,
  432,    0,  483,    0,  534,    0,  545,  167,  189,    0,
    0,    0,  157,    0,    0,    0,  168,  538,    0,  886,
    0,  837,  818,    0,  828,    0,  839,    0,  855,  792,
    0,  885,    0,    0,  496,    0,  512,  514,    0,    0,
  450,    0,    0,  446,    0,    0,  475,    0,  516,  490,
    0,    0,  142,  517,  140,  141,  519,    0,  533,  795,
    0,  875,    0,  868,    0,  872,  525,    0,    0,    0,
  361,    0,  523,    0,    0,  535,  893,    0,  889,  813,
    0,  904,    0,  902,    0,    0,  634,  635,    0,    0,
    0,  699,  685,  686,  684,  695,  612,  618,  611,    0,
    0,  341,  607,    0,    0,    0,  549,  863,  862,  738,
  437,  431,  435,  430,  536,  473,  472,  471,  468,  467,
    0,  462,  426,  427,  438,  439,    0,  592,    0,  761,
    0,    0,  616,  615,  930,  906,    0,  931,    0,  916,
  918,  927,    0,  942,    0,  910,  956,   19,  338,  682,
  681,    0,  680,    0,  356,  988,  179,  983,    0,    0,
   54,    0,    0,    0,    0,    0,    0,  363,    0,  638,
    0,    0,   80,   79,    0,  479,    0,    0,    0,    0,
    0,  172,  544,    0,    0,    0,    0,    0,  829,  821,
  819,    0,  840,    0,    0,  884,  503,  502,  453,    0,
    0,  967,  968,  442,  448,    0,  451,    0,  477,    0,
    0,    0,    0,    0,  793,  878,    0,  869,    0,  531,
  526,    0,    0,  522,    0,  892,    0,  812,  905,  903,
    0,  540,    0,  620,  614,  344,  606,  605,  622,  470,
    0,  461,  460,  459,  591,  142,    0,  777,  759,    0,
    0,    0,  766,    0,  908,    0,  935,    0,    0,  950,
  951,  944,    0,  359,  358,  987,    0,    0,   62,   56,
    0,   64,   26,   22,    0,    0,  312,    0,  215,    0,
  103,    0,   77,  771,  115,  116,    0,    0,    0,  774,
  187,  188,    0,    0,    0,    0,  160,  169,  161,  163,
  816,    0,    0,    0,    0,    0,  838,    0,    0,  452,
  454,  455,  449,  443,  447,    0,  508,    0,  476,  487,
  441,  520,  518,    0,  874,    0,    0,    0,  527,    0,
  895,    0,    0,  633,  625,    0,  469,    0,    0,  757,
  756,  753,  767,  907,    0,    0,    0,    0,  928,    0,
  957,  975,    0,    0,    0,   69,   70,   73,   74,    0,
  329,  318,  317,    0,  639,  211,   98,    0,  755,  775,
  173,    0,  185,    0,    0,    0,  814,  897,    0,    0,
    0,    0,  820,    0,  841,  791,  492,  489,  800,    0,
  807,    0,    0,  798,    0,  803,    0,  530,  529,  894,
  890,    0,  623,    0,    0,  909,  932,    0,  919,    0,
    0,  946,    0,   75,   67,    0,    0,    0,  313,    0,
    0,    0,    0,    0,  174,    0,  164,  162,  887,  830,
  824,  822,    0,    0,  794,  799,    0,  804,  879,    0,
    0,  626,    0,  769,    0,  936,  953,  954,  947,   55,
    0,   71,   72,    0,    0,    0,    0,    0,    0,    0,
  776,  171,    0,  184,    0,    0,  842,  806,  805,    0,
  690,  877,  891,  778,    0,    0,    0,   76,    0,    0,
  330,    0,    0,  328,  314,    0,  322,  379,    0,  377,
    0,  640,    0,  669,  212,   99,  175,  888,  826,  823,
    0,    0,  835,    0,  933,    0,  948,    0,    0,    0,
  311,    0,    0,  666,    0,    0,    0,  670,    0,    0,
    0,    0,    0,  937,   29,   23,  331,  327,    0,    0,
  323,  378,  672,    0,    0,    0,  100,  825,  691,    0,
    0,    0,    0,  315,  677,    0,  678,  675,    0,  673,
   96,    0,   94,    0,    0,   83,   85,   86,   87,   88,
   89,   90,   91,   92,   93,   95,  143,    0,    0,  228,
  220,  221,  222,  223,  224,  225,  226,  227,    0,    0,
  218,    0,    0,  934,    0,  332,  326,    0,    0,    0,
  641,   84,    0,  687,  689,  271,  266,  270,    0,  213,
  219,    0,  940,  938,  676,  674,    0,    0,    0,    0,
    0,    0,    0,  280,    0,    0,  229,    0,    0,  237,
    0,  155,  144,  154,    0,    0,  101,    0,    0,  265,
    0,    0,  264,    0,  148,    0,    0,  350,    0,  348,
    0,    0,  190,    0,    0,    0,    0,    0,  642,    0,
  214,    0,  106,  104,  287,    0,  347,    0,    0,    0,
    0,  119,    0,    0,    0,    0,    0,    0,  153,  145,
    0,    0,  194,    0,  351,    0,  232,  231,  230,    0,
  688,  102,    0,  284,    0,  262,  121,    0,  260,    0,
    0,    0,  123,    0,  352,    0,    0,  191,    0,    0,
    0,  349,  235,  114,  112,    0,    0,  289,    0,    0,
    0,    0,    0,  149,    0,  268,    0,    0,    0,    0,
  127,    0,    0,    0,    0,  353,  354,    0,    0,    0,
    0,    0,  109,  304,    0,  285,    0,    0,  298,    0,
    0,    0,  293,    0,  139,    0,    0,    0,    0,  134,
    0,    0,  281,    0,  124,    0,  118,  128,  146,  152,
  202,    0,  192,    0,    0,  195,    0,  113,    0,  105,
  110,    0,    0,    0,  300,    0,  301,  290,    0,    0,
  283,  294,  263,    0,    0,  120,  135,  261,    0,  279,
    0,  269,  273,  130,    0,    0,    0,  199,  201,    0,
  236,  111,  305,  307,  286,    0,    0,  299,  296,  138,
  136,  150,  278,    0,    0,    0,  147,  203,  205,  193,
    0,    0,    0,  298,    0,  274,  276,  131,    0,    0,
  196,  309,  310,  306,  308,  297,  151,    0,    0,  209,
  208,  207,  204,  206,    0,    0,    0,  197,  275,  277,
  };
  protected static readonly short [] yyDgoto  = {             7,
    8,   49,    9,   50,   10,   11,   51,  232,  700,  662,
   12,   13,   52,   22,   23,  324,  235,  685,  856, 1050,
 1170, 1522,  853,  236,  237,  238,  239,  240,  241,  242,
  243,  678,  449,  679,  680,  958,  681,  682,  962,  854,
 1045, 1046, 1047,  266,  599, 1141,  110,  865, 1244, 1245,
 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
 1256,  468,  689, 1330,  972, 1148, 1112, 1182, 1210, 1272,
 1342, 1178, 1396, 1373, 1421, 1422, 1423,  974, 1419,  975,
  746, 1306, 1384, 1357, 1409,  520, 1402, 1378, 1438,  938,
 1407, 1410, 1411, 1506, 1439, 1440, 1436, 1257, 1313, 1283,
 1331,  702, 1386, 1485, 1354, 1442, 1515,  469,  267,  703,
  704,  705,  706,  707,  665,  575, 1153,  666,  667,  871,
 1333, 1362, 1453, 1414, 1487, 1334, 1389, 1490, 1535, 1454,
 1455, 1533, 1519, 1520,  970, 1111, 1209, 1269, 1316, 1270,
 1271, 1307, 1369, 1337, 1308,  327,  223, 1418, 1310, 1403,
 1400, 1258, 1287, 1327, 1482, 1444, 1288, 1483,  600, 1528,
 1529, 1326, 1399, 1375, 1431, 1426, 1397, 1463, 1468, 1429,
 1432, 1433, 1514, 1469, 1427, 1428, 1524, 1512, 1513,  967,
 1054, 1175, 1146, 1202, 1176, 1177, 1219, 1108, 1199, 1232,
  540,  193,  112,  353,  195,  569,  444,  224, 1349,  663,
  664,  842,  858,  328,  409,  539,  304, 1179, 1180,   45,
  114,  305,  116,  117,  118,  119,  120,  121,  122,  123,
  124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
  134,  135,  136,  252,  815,  742, 1010,  516,  732,  894,
  733,  734, 1003,  137,  198,  738,  602,  603,  604,  809,
  478,  479,  297, 1008,  740,  410,  299,  503,  504,  505,
  506,  509,  748,  313,  764,  765,  911,  263,  484,  779,
  264,  483,  138,  139,  140,  141,  142,  143,  144,  145,
  146,  147,  148,  149,  150,  151,  825,  152,  578,  579,
  580,  788,  789,  790,  153,  566,  781,  354, 1026,  554,
 1092,  154,  498,  968, 1110, 1207, 1311,  470, 1183, 1184,
 1239, 1240,  843,  558,  339,  785, 1315, 1162, 1194,  559,
  560,  268,  269,  270,  157,  158,  159,  271,  272,  273,
  274,  275,  276,  277,  278,  279,  280,  281,  282,  171,
  283,  585,  172,  173,  320,  822,  638,  941, 1032,  868,
  696,  978,  939,  942, 1070,  943,  979,  980,  284,  174,
  175,  176, 1082, 1014, 1083, 1084, 1085, 1127, 1086,  177,
  178,  179,  180,  713,  491,  714, 1073,  996, 1074, 1190,
 1156, 1191,  715,  995,  716, 1193, 1123,  181,  182,  183,
  184,  185,  186,  306,  530,  531, 1016, 1130,  316,  994,
  878, 1155, 1023,  917, 1131,  187,  422,  188,  423,  944,
 1035,  424,  425,  654,  645,  646,  948,  426,  427,  428,
  429,  430,  949,  640,  946, 1135, 1213, 1274, 1037, 1166,
 1231,  834,  648,  835, 1101, 1040, 1102, 1167,  953,   17,
   19,   46,   47,  227,  668,  850,  445,  669,  670,
  };
  protected static readonly short [] yySindex = {         -115,
    0, -192,  -98, -285, -212,12442,    0,  -72,    0,    0,
 -212, -285,    0,    0, -289,    0, 6632, -212,    0, -185,
   19,    0,    0,    0,    0,    0,    0,    0,  147,    0,
  209,    0,    0,    0, 9379,    0,    0,    0,    0,    0,
    0,    0,    0,  357,    0,    0,  541,    0,    0,  -72,
  215, -212,    0,    7,    0,  178,  213,  239,11924,   58,
  201,  240, 6789,    0,  201,  201,  201, -166,  201,  201,
  571,    0, 8478,  201,  201,    0, 8635,    0,  315,    0,
  239,    0,  201,  256,  201,    0,12486,12486,  374,  201,
  201, -190,11707,    0,11027,    0,11707,11707,11707,11707,
11707,11707,11707,11707,    0,  243,    0, 7748,    0,  195,
    0,  351,  548,  510,  419,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  767,  765,
  197,  314,  661,  558,  402,  475,  461,  485,  486,  577,
    0,    0,    0,    0,    0,    0, 3523,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -260,  605,  -45,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  294,  323,  215,    0,
  446,  722,    0,  562,    0,    0,    0,    0, 7748, 7748,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  640,  589,    0,  604,    0,  194,    0,    0,
    0,  215,12953,  448,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  803,  632,11163,    0,    0,    0,
    0,11027,  201,  201,  857,  438,  510, -260,    0,    0,
 7748,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  290,  191,11924,    0, 7748,11027,  749,    0,
    0,  811,11027,11027, 9420,  565, -207,  812, 8043,    0,
11707,  243,  904,  835,    0,  839, 7748,11027,    0,    0,
  862,  606,  201,    0,11027,  315,10483,    0,    0,  256,
11027,  256, -277,  550,  907, -260,    0,  605,  419,  957,
 -260,11027,11027,11027,  240,    0,  912,    0, 6946, -279,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  953,    0,    0,12397, -277,  894,  898,11027,    0,  878,
    0,  383,    0,    0,  500,    0,    0,  881, 8792,10347,
    0,    0,11027,11027,11027,11027,11027,11027,11027,11027,
11027,11027,11027,11707,11707,11707, 7748, 7748,11707,11707,
11707,11707,11707,11707,11707,11707,11707,11707,11707,11707,
11707,11707,11707,11707,11027,    0,    0,    0,    0,  605,
    0,    0,    0,    0,12486,12486,    0,    0, -260,    0,
    0,    0,    0,  428,  940,    0,    0,    0,    0,    0,
    0,    0,  215,  448,  892,    0,  920,    0,  878,  640,
  640,    0, -201,    0,  584,  640,  954,    0, -144,12953,
    0,    0,    0,    0, -158,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  280,12983,    0,
    0,    0,    0,  878,    0,    0,  964,  665,    0,  968,
    0,  969,  169,  315,    0,  201,    0,    0,    0, -260,
10483, -194,    0,  970,    0,    0,    0, -162, -147,    0,
  463,    0,  980,    0,  975,    0,    0,    0,  671,    0,
 8162,  793,11027,  812,10347,    0, 7417,    0,  256,    0,
    0,    0,    0,  978,  111,    0,    0,  239,  315,  418,
    0, 3929,  979,    0,  112, -260,    0,  116,    0,    0,
    0,11027, 1060,    0,    0,    0,11027, 1061,  983,    0,
  987,  988,    0,12397,    0,    0, -182, -280, 6946,    0,
    0,    0,    0,    0,    0,  315,    0,    0, -223,    0,
    0,    0,  256, -277, -260, 8338,    0,  989,    0,  990,
11707,    0, 1108,  991, 6946,    0,  427,    0,  437,    0,
  878,    0,   66,11027,11027,  994, 1110,    0,    0,   14,
  129,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  765,  765,  197,  197,  314,  314,  314,  314,  661,  661,
  558,  402,  475,  461,  485,    0, -167, -195,    0, 8949,
 1074, -260, 1075, -260, 8949, 8949,  993,11027,    0,    0,
  940,    0, -260,    0,  724,  878,    0,    0,    0,    0,
  594,  215,  167,    0, 8338,  584,    0,  998, 1001,    0,
    0,    0,    0,    0,    0, -277,  999,    0, 1002, 1004,
    0,    0,    0,    0, 1006, 8495,  966,    0, -177,    0,
    0,  763,    0,11163,    0, 1007,    0,    0,    0,  706,
   99, 1010,    0, 1009, 1011, 1015,    0,    0,11027,    0,
 -260,    0,    0,  810,    0, 1017,    0,  553,    0,    0,
 6789,    0, 6789, 8321,    0, 9420,    0,    0,10619,  211,
    0,  144,  134,    0,  967,  971,    0,  143,    0,    0,
 1021, 1023,    0,    0,    0,    0,    0, 1027,    0,    0,
 1028,    0, 4247,    0,  315,    0,    0,  256,  592, 1000,
    0,  199,    0, 1039, 1047,    0,    0, 6789,    0,    0,
 6789,    0,11027,    0,11027, 7748,    0,    0,  315, 1040,
  315,    0,    0,    0,    0,    0,    0,    0,    0, 8949,
 7748,    0,    0, -260,12397, 1081,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
10211,    0,    0,    0,    0,    0, 7574,    0, 8949,    0,
 7731, 1048,    0,    0,    0,    0, 1142,    0, 1143,    0,
    0,    0,  728,    0, 1064,    0,    0,    0,    0,    0,
    0, 1026,    0, -201,    0,    0,    0,    0,  584,  584,
    0,  892, 1069, 1070, 1030, 1090,  966,    0, 1083,    0,
 1203, 1204,    0,    0,11027,    0,10755, 1087,  706, 8338,
 7748,    0,    0,  348, 1206, 1207,  159, 1084,    0,    0,
    0,11027,    0,11027, 1186,    0,    0,    0,    0,  137,
10891,    0,    0,    0,    0, 7867,    0, 1208,    0,  605,
11027, 1100, 8321, 1103,    0,    0, -260,    0,  200,    0,
    0,  878, 1000,    0, -260,    0, -187,    0,    0,    0,
 1101,    0, 1129,    0,    0,    0,    0,    0,    0,    0,
  794,    0,    0,    0,    0,    0, 8043,    0,    0, -260,
  633, 1048,    0, 8949,    0, 8949,    0, 1124, 8949,    0,
    0,    0,  443,    0,    0,    0, 1106,  892,    0,    0,
11299,    0,    0,    0, 1107, 4406,    0,  966,    0,  966,
    0,  966,    0,    0,    0,    0, -260, 1109, 1087,    0,
    0,    0, -156, -135, 1113, 1114,    0,    0,    0,    0,
    0, 1122, 8321, 1048, -195,11027,    0, 1105, 6789,    0,
    0,    0,    0,    0,    0, 1120,    0,  812,    0,    0,
    0,    0,    0, -164,    0, 1112,  878, 1000,    0, 1000,
    0, 1048, 1130,    0,    0,  315,    0, 1080, 1123,    0,
    0,    0,    0,    0, 8949, 1163, 8949, 8949,    0,11027,
    0,    0, 1004,  454,  847,    0,    0,    0,    0, -285,
    0,    0,    0, 1147,    0,    0,    0, 1134,    0,    0,
    0,  527,    0, 1135, 1262, 1267,    0,    0, 1048, 1153,
 1048, 1156,    0, 1155,    0,    0,    0,    0,    0,11027,
    0, 1165, -203,    0, -203,    0, 1280,    0,    0,    0,
    0,  315,    0,11027, 8026,    0,    0, 1190,    0,  754,
 1164,    0, 1169,    0,    0,11299, -212,  169,    0, 1167,
 1167, 1167,10755, 1170,    0,11027,    0,    0,    0,    0,
    0,    0, 6789,   38,    0,    0, 6946,    0,    0, 1176,
 6789,    0, 1174,    0, 8949,    0,    0,    0,    0,    0,
11027,    0,    0,  215, 1173,  215, 7748, 1209, 1209, 1209,
    0,    0,11027,    0, 6789, 9106,    0,    0,    0, 6946,
    0,    0,    0,    0, 1199, 8949,11027,    0,  215, 1183,
    0, 1137,  856,    0,    0, 1178,    0,    0,  163,    0,
 1138,    0, 1209,    0,    0,    0,    0,    0,    0,    0,
 1185, 1017,    0, 6946,    0, 1210,    0, 1188, 1209, 1303,
    0, 1192,  215,    0, 7748,   74, 1194,    0, 1198, 1201,
 6789, 1211, 8949,    0,    0,    0,    0,    0, 1197, 1188,
    0,    0,    0,12003,  152,  215,    0,    0,    0, 1213,
 8949, 1195,11027,    0,    0, 1212,    0,    0, 1214,    0,
    0,12983,    0, 1217,  152,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  639,12983,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1219,  215,
    0,  152, -260,    0, 1213,    0,    0, 1220,12003,12169,
    0,    0,   55,    0,    0,    0,    0,    0,12201,    0,
    0, 1221,    0,    0,    0,    0, 7748, 7748,  309, 8043,
  458,  256, 1229,    0, -277, 1184,    0, 1275,    0,    0,
 1188,    0,    0,    0, 6946, 1188,    0, -134, -129,    0,
 7748, -128,    0, 7748,    0, 1175, 1223,    0, -277,    0,
 -131, 4787,    0, 1222, 1177,  198,  575, 9379,    0, 1228,
    0, 1188,    0,    0,    0, -277,    0, 1230, 1182, 1234,
 1232,    0, 1235, 1205, 1239,  169, 1241, 1251,    0,    0,
 1254, 1259,    0,  878,    0,  848,    0,    0,    0, 1258,
    0,    0, -120,    0, 1250,    0,    0, 1273,    0, 1274,
 1281, 1284,    0, 1272,    0,  169,  169,    0,  169, 1279,
 1285,    0,    0,    0,    0, 1283,  171,    0, 1293,  169,
 1412, 1295,  169,    0,   55,    0, 8321, 1252, 1296, 1272,
    0, 1301, 1302,  174, 1305,    0,    0,  169,10755, 1261,
 1300, 1283,    0,    0,12983,    0,  215,  215,    0, 1264,
 1304, 1293,    0, 1312,    0,11027, 1269, 1309, 1295,    0,
 1317,  169,    0,   87,    0, 1330,    0,    0,    0,    0,
    0,12983,    0,  174,  174,    0, 1321,    0, -120,    0,
    0, -184, 1344,12983,    0,12983,    0,    0, 8321, 1333,
    0,    0,    0, 1345, 1273,    0,    0,    0, 1347,    0,
  131,    0,    0,    0, 1209,  916, 1348,    0,    0, 1350,
    0,    0,    0,    0,    0, 1405, 1458,    0,    0,    0,
    0,    0,    0, 1351, 1352, 8321,    0,    0,    0,    0,
  174,  601,  601,    0, 1209,    0,    0,    0,   45,   45,
    0,    0,    0,    0,    0,    0,    0,10347,10347,    0,
    0,    0,    0,    0, 1356, 1353, 1354,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {         2954,
    0,    0, 7103, 2954,    0,    0,    0, 1727,    0,    0,
 3107, 1772,    0,    0,    0,    0,    0, 3107,    0,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1728,    0,    0, 1728,    0,    0, 1727,
 3181, 3001,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1362,    0,    0,    0,    0,    0,    0,    0,    0,
 8652,    0, 1355,    0,    0,    0, 1355,    0,    0,    0,
    0,    0,    0,  219,    0,    0,    0,    0,    0,    0,
    0,    0,  252,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4564,    0,    0,    0,    0,
    0,    0,  328, 4657, 3999,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4813, 4881,
 5121, 5325, 5665, 5869, 6005, 6141, 6277, 1079, 1881, -172,
    0,    0,    0,    0,    0,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  250,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3224,    0,
  744,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1728,  118,    0,    0,    0,    0,    0,    0,
    0, 3267,  714, 3330,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3610,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1364,    0,    0,    0,    0,    0,
    0, 3610, 1358,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2465,
    0, 1415,  630, 2595,    0,    0,    0, 1265, 2595,    0,
    0,    0,    0,    0, 1362,    0,    0,    0,  180,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1363, 2699,    0,    0, 1355,    0, 3610,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  110,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1599,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  385,    0,    0,    0,    0,    0,
    0,    0, 3377, 3444,    0,    0,    0,    0, 2319, 1728,
 1728,    0,   83,    0, 7434, 1728, 1730,    0,    0,  124,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  447,11856,    0,
    0,    0,    0, 3610,    0,    0,    0,    0,    0,    0,
    0,    0,12245,    0,    0,    0,    0,    0,    0,    0,
  816,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  905, 1161,    0,    0, 1369,    0,    0,    0,    0,    0,
  227,    0,    0, 4087, 1366,    0,    0,    0,  771,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2026,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1363,    0,    0, 6472,    0,  231,    0,
    0,    0,    0,    0,    0, 9263,    0,    0,    0,    0,
    0,    0,   37,  698,    0,    0,    0, 1367,    0,    0,
    0,    0, 1358,    0,    0,    0, 3610,    0, 3610,    0,
 4246,    0,    0,    0,    0, -209,    0,    0,    0,    0,
  225,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 4985, 5053, 5189, 5257, 5393, 5461, 5529, 5597, 5733, 5801,
 5937, 6073, 6209, 6345, 6413,    0,    0,  712,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  385,    0,    0,    0,    0, 2319,    0,    0,    0,    0,
 1322, 9611,    0,    0,    0, 8809,    0,    0,  867,    0,
    0,    0,    0,    0,    0,  784,  694,    0,    0, 1372,
    0,    0,    0,    0, 1854,    0,    0,    0,    0,    0,
    0,11435,    0,    0,    0,  869,    0,    0,    0, 8966,
12321,    0,    0,  874,  877,  884,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  834,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1375,    0,    0,    0, 3676,
    0,    0,  235,    0,  154, 3769,    0,    0,    0,    0,
    0, 1373,    0,    0,    0,    0,    0, 1376,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  308,  772,    0,
    0,    0,    0,    0, 1374,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 9263,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  686,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -102,    0,  469,    0,    0,    0,    0,    0,
    0,    0,    0,   83,    0,    0,    0,    0, 8966, 7591,
    0, 1377,    0,  837,    0,    0,    0,    0, 1381,    0,
 1331, 1332,    0,    0,    0,    0,    0, 1379, 9123,    0,
    0,    0,    0,12353,    0,    0,    0,  886,    0,    0,
    0,    0,    0,    0, 2193,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3928,
    0, 4405, 1383,    0,    0,    0, 1010,    0,    0,    0,
    0,  660,    0,    0,    0,    0,  886,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  739,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  887,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1382,    0,
    0,    0,    0,    0,  919,  923,    0,    0,    0,    0,
    0,    0,    0, 1380,  757, 1397,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4087,    0,    0,
    0,    0,    0, 1385,    0,    0,  660,    0,    0,  949,
    0, 1380,    0,    0,    0, 9263,    0,  662,  738,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1372, 9457,    0,    0,    0,    0,    0,12517,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  825,    0,  828,    0,    0,    0,    0, 1402,    0,
  841, 1399,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1389,    0, 7260,    0, 1409,    0,    0,    0,
    0, 9263,    0,    0,    0,    0,    0,    0,    0,  241,
  567,    0,    0,    0,    0,    0,12560,12245,    0,  382,
  382,  382,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,12646,    0,   11,    0, 1410, 1410, 1410,
    0,    0,    0,    0,    0, 1407,    0,    0,    0, -153,
    0,    0,    0,    0,    0,    0,    0,    0,12689,    0,
    0,    0, 9914,    0,    0, 1413,    0,    0,  445,    0,
    0,    0,  608,    0,    0,    0,    0,    0,    0,    0,
    0, 1408,    0, 1416,    0,    0,    0, 3064, 1419,  624,
    0,    0,  293,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2868,
    0,    0,    0,    0, 9716,10000,    0,    0,    0,  620,
    0,    0,    0,    0,    0,    0,    0,    0,   78,    0,
    0,12027,    0,    0, 9815,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,12095,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,10094,
    0, 9716,    0,    0,  620,    0,    0,    0,    0,  447,
    0,    0,    0,    0,    0,    0,    0,    0,  447,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1541,  503,    0,10136,    0,    0,    0, 4562,    0,
 2868,    0,    0,    0, 1416, 2868,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  312,    0,
 1421,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 2868,    0,    0,    0,  574,    0,  756,    0,    0,
    0,    0,    0,    0,    0,12245,  926,    0,    0,    0,
    0,    0,    0, 1423,    0,  457,    0,    0,    0,    0,
    0,    0,    0,    0,  929,    0,    0,    0,    0,    0,
    0,    0,    0, 1425,    0,12245,12245,    0,12277,    0,
    0,    0,    0,    0,    0, 1427,12913,    0, 1430,12245,
11571, 1431,12245,    0,    0,    0,    0,    0,    0, 1432,
    0,    0,    0,12883,    0,    0,    0,12245,    0,    0,
    0, 1442,    0,    0,  388,    0,12807,12845,    0,    0,
    0, 1443,    0,    0,    0,    0,    0,    0, 1444,    0,
    0,12245,    0,  725,    0,  932,    0,    0,    0,    0,
    0,  962,    0,12731,12769,    0,    0,    0,    0,    0,
    0,    0,    0, 1477,    0, 1558,    0,    0,    0,  939,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  621,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
12883,11743,12603,    0,  621,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1366, 1366,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
    0, 1773,    0,    0,    0,   -3,  -16, -183,  -41,  -42,
    0, 1810, 1819,  299,    0,    4,    0,    0,    0,    0,
    0,-1009, -709, -211, -151,    0,    0,    0,    0,    0,
 -220,    0,    0,    0,  868,    0,  977,    0,    0,    0,
    0,  721,  726,  -17, -217,    0,  -46,    0,  568,    0,
  585,-1115, -548, -520, -516, -508, -479, -436, -428,    0,
 -577,-1126,    0,   13,    0,  218,    0,-1091,    0,    0,
    0,  119,  375,    0,    0,    0,  415,-1075,    0, -273,
 -293, 1159,    0,    0,    0, -902,  364,    0,    0, -506,
    0,    0,  431,    0,    0,  403,    0,    0,  442,    0,
 -483, -737,    0,    0,    0,    0,    0,  543,  -13,    0,
    0,  982,  985,  995, 1157, -533,    0,    0, -320,  996,
  544,    0, -760,    0,    0,    0,    0,    0,    0,    0,
    0,  344,    0,    0,    0,    0,    0,    0,    0,    0,
  597,    0,    0,    0,    0, -337,  530,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -503,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  356,    0,
    0,  439,    0,    0,  444,  449,  360,    0,    0,    0,
    0,    0,    0,    0,    0,  672,    0,    0,    0,    0,
  -62,    0,  -12, -124,    0,    0,  512,    0,  576,    0,
 1036,    0, 1349, -292, -265,  -61,  965,    0,  679,    0,
  -30,  319,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -262,    0,   16,    0, -333,    0,   35,    0,    0,
    0,  992,    0, -288, -130, 1160,    0, 1068,    0, 1291,
 1521, 1200,    0,    0,  883, 1821,    0,    0,    0,    0,
 1172,    0,    0,    0,    0,    0, -462, 1560,    0,    0,
    0,    0,    0, 1306,  942,  945,  840,  936, 1494, 1499,
 1504, 1498, 1509,    0, 1503,    0, -511,    0,    0, 1118,
 1360, -745,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -295,    0,    0,    0,    0, -453,    0,  732,
    0,  638,    0,-1144,    0,    0,    0,    0,    0,  791,
 -528,  -14, -321,   -4,    0, 1762,    0,   88,    0,   96,
  125,  139,  140,  149,  175,  188,  261,  271,  275,    0,
 -651,    0,  -31,    0,    0,  927,    0,  850,    0,    0,
    0,    0,  830, -169,  901, -803,    0,  947, -466,    0,
    0,    0,    0,    0,    0,  844,    0,    0,  843,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  773,    0,    0,    0,    0,    0,
    0,    0,    0,  -37,    0, 1400,    0,    0,    0, 1016,
    0,    0,    0,    0,    0,    0, -168,    0,    0,    0,
    0,    0, 1510, 1288,    0,    0,    0, 1512,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  666,    0,    0,
    0,    0,    0,    0,    0,    0,  775,    0,    0,    0,
    0,    0,    0,   33, 1094,    0,    0,    0, 1091,
  };
  protected static readonly short [] yyTable = {           109,
   18,  189,  155,  111,  518,  433,  521,  194,  234,  233,
  747,  741,  156,  472,  494,  690,  577,  562,   43,  432,
  451,  292,  319,  192,  712,  538,  406,  258,  257,  476,
  786,  514,  502,  576, 1028,  924,  601, 1151,  904,  311,
  325,  330,  794,  549,  251,  337,  632,  965,  510, 1212,
  363,  364,  371,  372,  660,  303,  800, 1185, 1186,  310,
  820,  717,  544,   14, 1080,  312,  436,  314, 1021,  885,
  190,  886,    2,  782,  194,  194,  261,  340, 1493,  229,
  285,  286,  287,  590,  293,  294,  335,  783,  818,  307,
  308, 1079,  564,  720,  860,  194,  315,  683,  317, 1061,
  321,  288,  290, 1080,  160,  333,  334, 1217,  722,  289,
 1261,  673,  161,  350,  802, 1280,  916,  355,  861,  918,
 1063, 1343,   20,    6, 1359,  408, 1345, 1351,   54,  370,
 1494,  846, 1289,  830,  831, 1394,  351,  674, 1033,  109,
    1,  162,  155,  111,  639,  862,  434,  233,  784,  565,
  791,  476,  156,  949, 1261,  163,  164,  291,   16,  511,
  349,  512,  632,  249,  632,  165,  590,  231,  290,  675,
 1340,  590,  290,  590,  590,  590,  590,  590,  590,  590,
  590,  590,  590,  590,   48,  821,  194,  194, 1216,  434,
  450,  166,  792,  993,  761,  590,  290,  590,  436,  590,
  477,  590,  590,  590,  167,  326,  331,  819,  350,  721,
 1234,  481,  250,  472,  802,  513,  577,  887, 1081,  632,
  739,  451,  735,  291,  723,   15,  356,  291,  336,  475,
  436,  351,  191,  576,  480,  586,  949,  562,  577, 1360,
  448,  949,    2,  949,  160,  352,  949,  949,  194,  949,
  949,  291,  161,  490,  257,  442,  590, 1081,  537,  684,
 1395, 1062,  541,  562,  257, 1033,  545,  546,  802,  315,
  493,  949,  370,  676,  194,  497,  499,  168,  925,  543,
 1093,  162, 1064, 1344,  548,  536,  194,  169, 1346, 1352,
  525,  170,  369, 1158,  194,  163,  164,  533, 1462,  535,
 1530, 1339,  534,  497,  965,  165, 1341,  935,    3,    4,
    5,    6,  515,  259,  657,  551,  552,  440,  441,  197,
  584,  806,  477,  477,  561, 1486,  949,  577,  532, 1223,
  411,  166, 1372, 1103,  563,  115,  983, 1496,  194, 1497,
  583,  194, 1480, 1458,  167,  847, 1132, 1076,  761,  691,
  197,  475,  598,   20,  872,  605,  606,  607,  608,  609,
  610,  611,  612,  613,  614,  615,  750,  767,  641,  643,
 1145,  770,  647,  355,  194,  194,   48,  115,  319,  482,
    6,  115,  244,  412,  816,  813, 1503,  637,   48,  895,
  434,  233,  899, 1507, 1504,  645, 1012, 1322,  899,  369,
  645,  661,  194,  194,  645,  492,  369, 1241,  369,  965,
  369,   94, 1159,  877,  991,  997,  671,  168, 1204,  645,
 1531,   94,  194, 1527,  698,  524, 1424,  169,   48, 1451,
 1312,  170, 1034,  260, 1036,  807,  194, 1039,  655,  694,
  701,  472,  814,  710,  671,  718,  645,  196, 1224,  436,
 1019,  199,  677,  671,  369, 1505,  355,  577,  387,  711,
  357, 1481,  802,  502,  804,  645,  805,  231,  477,  568,
  708, 1157,  658,  659,  576,  115,  476,  931,  671, 1163,
  472,  456,  751,  768,  355,  760, 1068,  771,  355,  769,
  355,  355,  355,  355,  388,  737,  952,  598,  355,  745,
   48,  709,  817, 1188, 1000,  619,  620,  896,  358,  699,
  901,  892,  900,  200,  752,  754,  901,  751,  447,  762,
  231,  965, 1365, 1096,  772, 1098, 1099,  965,  793,  774,
  992,  839,  577,  642,  644,  759, 1205,  231,  456,  231,
  844,  194,  231,  753,  561,  485,  245,  692,  981,  413,
  246,  436,  787,  349,  563, 1088,  686, 1089,  487, 1228,
  687,  290,  290,  194, 1320,  751,  488,  345, 1174,  359,
  561,  249,  893,  976,  389,  390,  808,  808,  413,  952,
  563,  746,  845,  231,  952,  349,  952,  746,  248,  952,
  952,  891,  952,  952,  444,  827,  457,  829,  693,  933,
  247,  350,  445,  115,  897,   94,  837,  735,  692,  249,
  262,   42,  739, 1321,  952, 1366,  912, 1017, 1382,  489,
  250,  688,  824, 1165,  351, 1174,  751,  824,  824,  486,
  833,  786,  414,  350, 1007,  115,  746,  415,  352,  416,
  955,  318,  417,  418,  521,  419,  420,  477, 1412, 1413,
  645, 1415,  194,  457, 1196,  444,  351,  115,  250,  693,
  321,  414, 1434,  445,  879, 1441,  415,  739,  416,  952,
  352,  417,  418,  194,  419,  420,  475, 1262,  345,  362,
 1457,   94,  345,  649,  340,  117,  528,  117,  985,  712,
  333,  497,  117, 1488, 1489,  257,  333,  541,  413,  859,
 1072, 1230,  645,  755, 1479, 1263,  745,  391,  392, 1264,
   48,  737,  355, 1323,  739,  913,  231, 1265,  643, 1275,
  664, 1262,  421,  955,  943,  362,  345,  225,  955,  226,
  955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
  194,  908,  643, 1049,  332,  333, 1266,  927,  664, 1263,
 1521,  431,  955, 1264,  955,  919,  955,  920,  955,  955,
  955, 1265, 1324,  194,  477,  922,  414,  787,  360,  643,
  477,  415,  824,  416,  644,  361,  417,  418,  194,  419,
  420,  414,  194,  665, 1041,  399,  415,  657,  416, 1267,
 1266,  417,  418,  598,  419,  420,  349, 1268,  644,  598,
  587,  824,  661,  745,  318,  562, 1124,  943,  883,  115,
  588,  665,  943,  955,  943,  471,  231,  943,  943,  976,
  943,  943,  945,  355, 1069,  644,  435,  355,  350,  340,
  355,  701,  355, 1267, 1104, 1347,  350,  355,  562,  194,
  351, 1268, 1154,  724,  350,  401,  884,  973, 1361,  493,
  351,  351, 1069,  350,  801,  677,  650,  194,  194,  351,
 1015,  527, 1018,  400,  803,  352,  998,  351, 1020,  965,
 1380,  907,  562, 1001,  528,  939,  351,  115,  690, 1187,
  249,  352,  365, 1009,  402,  745,  403,  840, 1049,  570,
  352,  529,  839, 1029,  921, 1114,  571,  943,  404,  841,
 1445,  366,  367,  115,  361,  945,  361, 1115,  572,  926,
  945,  225,  945,  228,  477,  945,  945,  589,  945,  945,
  362,  368,  437,  750,  194, 1002,  824,  590,  824,  250,
 1058,  824,  369,  318,  507,  318, 1011,  295,  508,  296,
  345,   94, 1309, 1048,  345,  194,  340,  345,  361,  345,
 1367, 1309,  472,  194,  345,  397,  398,  451,  939, 1277,
 1169,  677, 1498,  939,  909,  939,  405,   94,  939,  939,
   44,  939,  939,  296,  668,  745, 1215,  318,  497,  439,
 1055,  113, 1056,  668, 1057,  645,  340,  667,  345,  984,
  645,  324,  340,  562,  645,  945,  667,  324,  340, 1518,
 1030,  340,  340,  443,  325, 1284, 1285,  521, 1031,  645,
  225,  570,  787,  869, 1286,  340,  340,  824,  571,  824,
  824,  446, 1100,  113, 1536, 1537,  367,  113,  340,  779,
  572,  340,  340,  779,  693,  779,  645,  779,  694,  115,
  727,  115,  393,  394,  728,  340, 1107,  340,  939,  474,
  750,  329,  329,  762,  340,  645,  395,  396,  473,  477,
  340,  762,  493,   65,   65,  701,  340,   65,  863,  608,
  340,  608,  329, 1243, 1260,  864, 1133,  745,  787,  758,
  750,  950,  951,  340, 1053,  758,  115,  758, 1048,  115,
 1144,  272,  272, 1243,  437,  493,  437,  438,  493,  838,
  272,  434,  233, 1173, 1172,  768,  763, 1137, 1138,  768,
  763,  768,  561,  768,  763,  340,  340,  824, 1260,  340,
 1243,  113,  563, 1168,  495,  976,  434,  233,  758,  282,
  758,  282,  758,  335,  194,  493,  282,  367,  367,  367,
  333,  367,  367,  333,  367,  561,  367,  373,  824, 1100,
  384,  385,  386,  340,  340,  563,  340,  340,   57,  522,
 1173, 1172,  736,  329,  329, 1027,  508,  817,  374,  375,
  376,  377,  378,  379,  380,  381,  382,  383,  517,  561,
  436,  880, 1173, 1242, 1259,  881,  496,  827,  367,  563,
  367,  827,  194,  367,  170,  824,  170,  183,  170,  183,
  542,  183, 1173, 1242, 1358,  831,   66,  362,  567,  831,
   66,  194,  762,  824,  523,  493,  762,   24, 1105,   25,
 1106, 1358,   26, 1201,  231,  329, 1293,   27, 1259, 1173,
 1242,   28,  625,  626,  627,  628,  985,  526,  985, 1390,
   30, 1391,  770,  158,  770,  158,  165,   32,  165,  113,
  547,  329,   33,  166,  555,  166,   34,  896,   68,  896,
   68,  351,  443,  329,  370,  581,  194,  194,   36, 1314,
   37,  329,  504,  582,   38,  340,  194,  340,  504, 1508,
 1509,  113,   39,   40,  194,  194,   41,  194,  189,  322,
  189,  351,  159, 1335,  159,  653,  340,  340,  591,  122,
  561,  122,  288,  113,  288,  129, 1335,  129,  194,  355,
  563,  194,  295,  701,  295,  329,  340,  115,  329, 1335,
  528,  528,  672, 1368,  340,  645,  645,  340, 1149, 1150,
  621,  622,  629,  630,  586,  623,  624,  656,  692,  695,
  697, 1335, 1238,  701,  701,  719,  701,  725,  726,  749,
  766,  329,  329,  773,  775, 1425,  776,  701,  777,  778,
  701,  796,  795,  798,  811,  812,  799,  826,  828,  848,
  355,  437, 1452,  832,  849,  701,  851,  852,  855,  329,
  329,  873,  874,   42,  875, 1464, 1466,  867,  876,  745,
  882, 1314,  902,  898,  905,  196,  817, 1238,  338,  701,
  903,  493,  341,  342,  343,  344,  345,  346,  347,  348,
  914,  923, 1452, 1452,  365, 1318, 1319,  586, 1474,  915,
  910,  940,  586,  929,  586,  586,  586,  586,  586,  586,
  586,  586,  586,  586,  586,  945,  947,  952,  960, 1350,
  961,  115, 1353,  954,  452,  115,  586,  963,  586,  115,
  586,  745,  586,  586,  586,  113,  964,  966,  969,  971,
  977,  989,  990, 1006,  993,  999,  511,  453,  586, 1452,
 1013, 1025, 1024,  115, 1038, 1042, 1075, 1051,  115,  586,
  454,  477,  477, 1087, 1059,  456, 1065, 1066,  745, 1077,
  457,  586,  458,  459,  460,  461,  329, 1067, 1523, 1523,
  462, 1091, 1094, 1095,  463, 1532, 1532,  586, 1328, 1097,
  598,  598,  115, 1109, 1113, 1116,  464, 1117,  329,  465,
  370,  466, 1118,  113, 1119,  370,  370, 1121,  505,  115,
 1122,  418, 1125,  418,  505, 1129, 1136, 1139, 1140, 1152,
  329, 1147, 1161, 1164, 1171,  467, 1195, 1181,  370,  113,
 1198, 1203,  418,  418, 1200, 1206, 1211, 1214, 1218, 1220,
 1225,  370,  370, 1215, 1226, 1325,  370, 1227, 1273,  370,
 1276,  370,  418,  370,  370,  370,  370, 1233, 1229, 1338,
  418,  370, 1278,  418, 1281,  370, 1290, 1279, 1317,  370,
 1363, 1295, 1355, 1356, 1364, 1371, 1374,  370,  509, 1366,
  370, 1329,  370,  370, 1376, 1379,  338, 1377,  370, 1381,
  370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
  370, 1383, 1346, 1385, 1387, 1388,  370,  370, 1393,  329,
 1398,  370,  370,  115,  370,  370,  370,  550,  370,  370,
  370, 1401,  370,  370, 1404, 1408,  370,  370,  370,  370,
  329, 1416, 1405,  370,  370, 1406, 1420, 1417,  370,  370,
  370,  370,  370,  370,  370,  370, 1430, 1435, 1437, 1446,
  365, 1447, 1449, 1450, 1456, 1460,  365,  370, 1459, 1471,
  370, 1470,  370, 1473, 1476,  113, 1475,  113, 1478,  616,
  617,  618, 1491,  370,  550,  550,  550,  550,  550,  550,
  550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
 1484, 1495,  365, 1499, 1500, 1510, 1511,  329, 1502, 1494,
 1493, 1516, 1517, 1538, 1539, 1540,    9,  981,  541,  973,
  865,  499,  113,  866,  609,  113,  500,  456,  610,  679,
  329,   30,  498,   30,  457,  524,   31,  316,  210,   97,
   31,  764,  796,  365,  772,  329,  797,  773,  365,  329,
  365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
  365,   35,  832,  765,  833,  876,  667,  365,  834,  836,
  320,  365,  365,  692,  365,  365,  365,  347,  365,  365,
  365,  645,  365,  365,  667,  340,  365,  365,  365,  365,
  125,  362,  107,  365,  365,  291,  132,  126,  365,  365,
  365,  365,  365,  365,  365,  365,  550,  108,  292,  133,
  645,   53,  230,   21,  362, 1043, 1142,  365,  959, 1282,
  365, 1143,  365, 1492,  329,  329, 1461,  362, 1501, 1292,
 1448, 1477,  362,  365,  857,  234, 1443,  362, 1332,  362,
  362,  362,  362,   24,  509,  986,  870,  362,  987,  509,
  509,  362, 1348, 1534,  982,  362, 1291, 1370,  988, 1526,
 1472, 1467, 1525,  362, 1221, 1465,  362, 1392,  362,  955,
  763, 1336,  509, 1222,  934,  810,  797, 1005,  890,  593,
 1078,  298,  631,  866,  553,  509,  509,  888,  632,  634,
  509,  329,  362,  509,  633,  509,  636,  509,  509,  509,
  509,  635,  928,  780, 1208,  509, 1296, 1160,  407,  509,
 1120, 1071, 1090,  509, 1134, 1060, 1126, 1128, 1192,  756,
  329,  509, 1022,  651,  509,  652,  509,  509,  836,  956,
 1294, 1197,  509,  957,  509,  509,  509,  509,  509,  509,
  509,  509,  509,  509,  509,    0,    0,    0,  362,    0,
  509,  509,    0,  113,    0,  509,  509,    0,  509,  509,
  509,  509,  509,  509,  509,    0,  509,  509,    0,  509,
  509,  509,  509,  509,  509,  509,  509,  509,  509,    0,
  509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
  509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
  509,  509,    0,    0,  509,    0,  509,    0,  509,    0,
    0,  509,    0,    0,    0,  867,    0,  509,   35,    0,
    0,    0,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   35,    0,    0,    0,    0,   35,    0,
    0,    0,   35,    0,    0,   35,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   35,   35,    0,
    0,    0,   35,   35,    0,    0,    0,    0,   35,    0,
   35,   35,   35,   35,    0,    0,    0,  113,   35,    0,
    0,  113,   35,    0,   35,  113,    0,    0,    0,    0,
    0,    0,    0,    0,   35,    0,   35,   35,    0,   35,
   24,  329,    0,   35,   24,    0,    0,    0,    0,  113,
    0,    0,    0,    0,  113,   24,    0,    0,    0,    0,
   24,    0,    0,   35,   24,    0,  588,   24,    0,   35,
   35,    0,    0,    0,    0,    0,    0,    0,    0,   24,
   24,    0,    0,    0,   24,   24,    0,    0,  113,    0,
   24,    0,   24,   24,   24,   24,    0,    0,    0,  329,
   24,    0,    0,    0,   24,  113,   24,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   24,    0,  329,   24,
    0,   24,  790,    0,    0,   24,    0,    0,    0,    0,
    0,  550,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   24,    0,    0,    0,  588,
   21,   24,   24,    0,  588,    0,  588,  588,  588,  588,
  588,  588,  588,  588,  588,  588,  588,    0,    0,    0,
    0,    0,    0,  329,  329,    0,    0,    0,  588,    0,
  588,    0,  588,  329,  588,  588,  588,    0,    0,    0,
    0,  329,  329,    0,  329,    0,    0,    0,    0,    0,
  588,    0,    0,    0,    0,    0,    0,    0,    0,  113,
    0,  867,  867,    0,    0,  329,    0,    0,  329,  867,
  867,  867,  867,  867,    0,  867,  867,    0,  867,  867,
  867,  867,  867,  867,  867,  867,    0,    0,    0,  588,
  867,    0,  867,  867,  867,  867,  867,  867,  340,    0,
  867,    0,    0,    0,  867,  867,    0,  867,  867,  867,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  867,
    0,  867,    0,  867,  867,    0,    0,  867,    0,  867,
  867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
  867,    0,  867,    0,    0,  867,  867,    0,    0,  867,
  867,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  867,  867,  867,  867,  867,    0,
    0,    0,  867,  867,    0,    0,  867,    0,    0,    0,
    0,  867,  867,  867,  867,  867,    0,    0,    0,  867,
    0,  867,    0,    0,    0,    0,    0,  867,  867,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  867,  867,  867,  867,    0,  867,  790,  790,
    0,    0,    0,    0,  867,    0,  790,  790,  790,  790,
  790,    0,  790,  790,  747,  790,  790,  790,  790,  790,
  790,  790,    0,    0,    0,    0,    0,  790,    0,  790,
  790,  790,  790,  790,  790,    0,    0,  790,    0,    0,
    0,  790,  790,    0,  790,  790,  790,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  790,    0,  790,    0,
  790,  790,    0,    0,  790,    0,  790,  790,  790,  790,
  790,  790,  790,  790,  790,  790,  790,  790,    0,  790,
    0,    0,  790,  790,    0,    0,  790,  790,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  790,  790,  790,  790,  790,    0,    0,    0,  790,
  790,    0,    0,  790,    0,    0,    0,    0,  790,  790,
  790,  790,  790,    0,  340,    0,  790,    0,  790,  340,
  340,    0,    0,    0,  790,  790,    0,    0,    0,    0,
    0,    0,    0,    0,  333,    0,    0,    0,    0,    0,
    0,    0,  340,    0,    0,    0,    0,    0,    0,  790,
  790,  790,  790,    0,  790,  340,  340,    0,    0,    0,
  340,  790,    0,  340,    0,  340,    0,  340,  340,  340,
  340,    0,    0,    0,    0,  340,    0,    0,    0,  340,
    0,    0,    0,  340,    0,    0,    0,    0,    0,    0,
    0,  340,    0,    0,  340,    0,  340,  340,    0,    0,
    0,    0,  340,    0,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,    0,    0,    0,    0,
  340,  340,    0,    0,    0,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,    0,  340,  340,  340,    0,
  340,  340,  340,  340,  340,    0,    0,  340,  340,    0,
    0,    0,  340,  340,  340,  340,  340,  340,  340,  340,
  747,    0,    0,    0,    0,  747,  747,    0,    0,    0,
    0,  340,    0,    0,  340,    0,  340,    0,  340,    0,
    0,  340,    0,    0,    0,    0,    0,  340,  747,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  747,  747,    0,    0,    0,  747,    0,    0,  747,
    0,  747,    0,  747,  747,  747,  747,    0,    0,    0,
    0,  747,    0,    0,    0,  747,    0,    0,    0,  747,
    0,    0,    0,    0,    0,    0,    0,  747,    0,    0,
  747,    0,  747,  747,    0,    0,    0,    0,  747,    0,
  747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
  747,    0,    0,    0,    0,    0,  747,  747,    0,    0,
    0,  747,  747,  747,  747,  747,  747,    0,  747,  747,
  747,    0,  747,  747,    0,    0,  747,  747,  747,  747,
  333,    0,    0,  747,  747,  333,  333,    0,  747,  747,
  747,  747,  747,  747,  747,  747,    0,   28,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  747,  333,    0,
  747,    0,  747,    0,  747,    0,    0,  747,    0,    0,
    0,  333,  333,  747,    0,    0,  333,    0,    0,  333,
    0,  333,    0,  333,  333,  333,  333,    0,    0,    0,
    0,  333,    0,    0,    0,  333,    0,    0,    0,  333,
    0,    0,    0,    0,    0,    0,    0,  333,    0,    0,
  333,    0,  333,  333,    0,    0,    0,    0,  333,    0,
  333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
  333,    0,    0,   34,  340,    0,  333,  333,    0,    0,
  340,  333,  333,  333,  333,  333,  333,    0,  333,  333,
  333,    0,  333,  333,    0,    0,  333,  333,  333,  333,
    0,    0,    0,  333,  333,    0,    0,    0,  333,  333,
  333,  333,  333,  333,  333,  333,  340,    0,    0,    0,
   33,    0,    0,    0,    0,    0,    0,  333,    0,    0,
  333,    0,  333,    0,  333,    0,    0,  333,    0,    0,
    0,    0,    0,  333,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  340,    0,    0,
    0,    0,  340,    0,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,    0,    0,    0,    0,
    0,  340,    0,   28,    0,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,    0,  340,  340,    0,    0,
  340,  340,  340,  340,  340,    0,    0,  340,  340,    0,
    0,    0,  340,  340,  340,  340,  340,  340,  340,  340,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
    0,  340,    0,    0,  340,    0,  340,    0,  340,    0,
    0,  340,    0,   28,   28,    0,    0,  340,   28,    0,
    0,    0,   28,    0,   28,    0,    0,   28,    0,   28,
   28,    0,   28,    0,   28,    0,   28,    0,   28,   28,
   28,   28,    0,    0,   28,   28,    0,    0,    0,    0,
   28,    0,   28,   28,   28,    0,    0,   28,   28,   28,
    0,   28,    0,    0,   28,    0,   28,   28,   28,   28,
    5,    0,    0,   28,   28,   28,    0,    0,   28,   28,
   28,    0,    0,    0,    0,    0,    0,   28,   28,    0,
   28,   28,    0,   28,   28,   28,    0,    0,    0,   28,
   34,    0,    0,    0,   34,    0,    0,    0,    0,    0,
    0,    0,    0,  963,    0,   34,    0,    0,    0,   28,
   34,    0,    0,    0,   34,   28,   28,   34,    0,    0,
    0,    0,    0,    0,   28,    0,    0,    0,    0,   34,
   34,    0,    0,    0,   34,   34,    0,   33,    0,    0,
   34,   33,   34,   34,   34,   34,   48,    0,    0,    0,
   34,    0,   33,    0,   34,    0,   34,   33,    0,    0,
    0,   33,    0,    0,   33,   28,   34,    0,   34,   34,
    0,   34,    0,    0,    0,   34,   33,   33,    0,    0,
    0,   33,   33,    0,    0,    0,    0,   33,    0,   33,
   33,   33,   33,    0,    0,   34,    0,   33,    0,    0,
   28,   33,   34,   33,   28,    0,    0,    0,    0,    7,
    0,    0,    0,   33,    0,   28,   33,    0,   33,    0,
   28,    0,   33,    0,   28,    0,    0,   28,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
   28,    0,   33,   32,   28,   28,    0,   32,   33,   33,
   28,    0,   28,   28,   28,   28,  964,    0,   32,    0,
   28,    0,    0,   32,   28,    0,   28,   32,    0,    0,
   32,    0,    0,    0,    0,    0,   28,    0,    0,   28,
    0,   28,   32,   32,    0,   28,    0,   32,   32,    0,
    0,    0,    0,   32,    0,   32,   32,   32,   32,    0,
    0,    0,    0,   32,    0,   28,    0,   32,    0,   32,
    0,   28,   28,    0,    0,    0,    0,    5,    0,   32,
    0,   48,   32,   49,   32,    0,    0,    0,   32,    0,
    0,    0,   48,    0,    0,    0,    0,   48,    0,    0,
    0,   48,    0,    0,   48,    0,    0,    0,   32,    0,
    0,    0,    0,    0,    0,   32,   48,   48,    0,    0,
  963,   48,   48,    0,   48,    0,    0,   48,    0,   48,
   48,   48,   48,    0,    0,   48,    0,   48,    0,    0,
   48,   48,    0,   48,   48,    0,    0,   48,    0,    0,
    0,    0,    0,   48,    0,    0,   48,    0,   48,   48,
   48,    0,   48,   48,   48,   48,    0,   48,    0,    0,
   48,    0,   48,   48,   48,   48,    0,    0,   48,    0,
   48,    0,   48,   48,   48,    0,   48,   48,    0,    0,
   48,    0,    0,    0,    0,    0,   48,    0,    0,   48,
    0,   48,   48,   48,    0,   48,    0,   48,   48,    0,
    0,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,    0,    0,   48,    0,   48,    7,   48,    0,   48,
   49,    0,    0,    0,    0,    0,    0,    0,    0,   48,
    0,   49,   48,    0,   48,    0,   49,    0,   48,    0,
   49,    0,    0,   49,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   49,   49,    0,   48,    0,
   49,   49,    0,  964,    0,    0,   49,   48,   49,   49,
   49,   49,    0,    0,    0,    0,   49,    0,   48,    0,
   49,    0,   49,   48,    0,    0,    0,   48,    0,    0,
   48,    0,   49,    0,    0,   49,    0,   49,    0,    0,
    0,   49,   48,   48,    0,    0,    0,   48,   48,    0,
    0,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,   49,    0,   48,    0,    0,    0,   48,    0,   48,
   49,    0,    0,    0,   49,    0,    0,    0,    0,   48,
    0,    0,   48,    0,   48,   49,    0,    0,   48,    0,
   49,    0,    0,    0,   49,    0,    0,   49,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   48,   49,
   49,    0,    0,    0,   49,   49,    0,    0,    0,    0,
   49,    0,   49,   49,   49,   49,    0,    0,    0,    0,
   49,    0,    0,    0,   49,    0,   49,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   49,    0,   55,   49,
    0,   49,    0,    0,    0,   49,   56,   24,   57,   25,
    0,    0,   26,   58,    0,   59,   60,   27,   61,   62,
   63,   28,    0,    0,    0,   49,    0,   64,    0,   65,
   30,   66,   67,   68,   69,    0,    0,   32,    0,    0,
    0,   70,   33,    0,   71,   72,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   73,    0,   36,    0,
   37,   74,    0,    0,   38,    0,   75,   76,   77,   78,
   79,   80,   39,   40,   81,   82,   41,   83,    0,   84,
    0,    0,   85,   86,    0,  340,   87,   88,    0,    0,
    0,  340,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,   93,    0,    0,    0,   94,
    0,    0,    0,   95,    0,    0,    0,    0,   96,   97,
   98,   99,  100,    0,    0,    0,  101,  340,  102,    0,
    0,    0,    0,    0,  103,  104,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  340,    0,    0,    0,    0,    0,  340,    0,  105,
  106,  107,  108,    0,    0,    0,    0,    0,  340,    0,
    0,  196,    0,  340,    0,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,    0,    0,    0,
    0,    0,  340,  340,    0,    0,    0,  340,  340,  340,
  340,  340,  340,  340,  340,  340,    0,  340,  340,    0,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
    0,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,    0,  511,    0,    0,  340,    0,  340,
  511,    0,  340,    0,    0,    0,    0,    0,  340,    0,
    0,    0,    0,  340,    0,    0,  340,    0,  340,  340,
    0,    0,    0,  340,  340,    0,    0,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  511,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  340,  340,    0,
    0,    0,    0,    0,    0,  340,    0,    0,  340,    0,
    0,    0,    0,    0,  340,    0,    0,  511,    0,    0,
    0,    0,  511,    0,  511,  511,  511,  511,  511,  511,
  511,  511,  511,  511,  511,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  511,  511,  511,  511,  511,
  511,  511,  511,  511,  511,    0,  511,  511,    0,  511,
  511,  511,  511,  511,  511,  511,  511,  511,  511,    0,
  511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
  511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
  511,  511,    0,  507,  757,    0,    0,    0,  511,  507,
    0,    0,    0,   24,    0,   25,    0,  511,   26,    0,
    0,    0,    0,   27,    0,    0,    0,   28,    0,    0,
    0,    0,    0,    0,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,  507,    0,    0,   33,    0,
    0,    0,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,    0,    0,    0,
   38,    0,    0,    0,  396,    0,    0,    0,   39,   40,
  396,    0,   41,    0,    0,  758,  507,    0,    0,    0,
    0,  507,    0,  507,  507,  507,  507,  507,  507,  507,
  507,  507,  507,  507,    0,    0,    0,    0,    0,    0,
    0,  290,    0,    0,  507,  507,  396,  507,  507,  507,
  507,  507,  507,  507,    0,  507,  507,    0,  507,  507,
  507,  507,  507,  507,  507,  507,  507,  507,    0,  507,
  507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
  507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
  507,    0,  515,    0,    0,    0,  323,  507,  515,    0,
  507,    0,    0,    0,    0,    0,  507,    0,    0,    0,
    0,  333,    0,    0,    0,    0,  396,  333,    0,  396,
  396,  396,  396,    0,  396,    0,  396,  396,    0,  396,
  396,  396,  396,  396,  515,  396,  396,  396,  396,    0,
  396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
  396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
  396,  396,    0,    0,    0,    0,  333,    0,  396,    0,
    0,  396,    0,    0,    0,  515,    0,  396,    0,    0,
  515,    0,  515,  515,  515,  515,  515,  515,  515,  515,
  515,  515,  515,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  515,    0,  515,  515,  515,  515,
  515,  515,  515,    0,  515,  515,    0,  515,  515,  515,
  515,  515,  515,  515,  515,  515,  515,    0,  515,  515,
  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
  515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
    0,  340,  906,    0,    0,    0,  515,  340,    0,  515,
    0,   24,    0,   25,    0,  515,   26,    0,    0,    0,
    0,   27,    0,    0,    0,   28,    0,    0,    0,    0,
    0,    0,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,  340,    0,    0,   33,    0,    0,    0,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,    0,    0,    0,   38,    0,
    0,    0,    0,    0,    0,    0,   39,   40,    0,    0,
   41,    0,    0,  322,  340,    0,    0,    0,    0,  340,
    0,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  340,    0,  340,  340,  340,  340,  340,
  340,  340,    0,  340,  340,    0,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,    0,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,    0,
  440, 1052,    0,    0,  355,  340,  440,    0,  340,    0,
   24,    0,   25,    0,  340,   26,    0,    0,    0,    0,
   27,    0,    0,    0,   28,    0,    0,    0,    0,    0,
    0,    0,    0,   30,    0,    0,    0,    0,    0,    0,
   32,    0,  440,    0,    0,   33,    0,    0,    0,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   36,    0,   37,    0,    0,    0,   38,    0,    0,
    0,    0,    0,    0,    0,   39,   40,    0,    0,   41,
    0,    0,  322,  440,    0,    0,    0,    0,  440,    0,
  440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
  440,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  440,    0,  440,  440,  440,  440,  440,  440,
  440,    0,  440,  440,    0,  440,  440,  440,  440,  440,
  440,  440,  440,  440,  440,    0,  440,  440,  440,  440,
  440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
  440,  440,  440,  440,  440,  440,  440,  440,    0,  340,
    0,    0,  361,  355,  440,  340,    0,  440,    0,  750,
    0,    0,    0,  440,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  361,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  361,    0,
    0,  340,    0,  361,    0,    0,  233,    0,  361,    0,
  361,  361,  361,  361,    0,    0,    0,  750,  361,    0,
    0,    0,  361,    0,    0,    0,  361,    0,    0,    0,
    0,    0,    0,    0,  361,    0,    0,  361,    0,  361,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  546,    0,    0,    0,    0,    0,  546,    0,
  340,    0,    0,  361,    0,    0,  340,    0,    0,    0,
    0,  340,  340,  340,  340,  340,  340,  340,  750,  340,
    0,  340,  340,    0,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  546,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,    0,    0,  361,
    0,  340,    0,  340,    0,    0,  340,    0,    0,    0,
    0,    0,  340,    0,    0,  546,    0,    0,    0,    0,
  546,    0,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  546,  546,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  546,    0,  546,    0,  546,    0,
  546,  546,  546,    0,  546,  546,    0,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546,  452,    0,    0,
  546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546,  546,  558,  546,
  453,    0,    0,    0,  558,    0,    0,    0,    0,    0,
    0,    0,    0,  454,    0,  546,    0,    0,  456,    0,
    0,    0,    0,  457,    0,  458,  459,  460,  461,    0,
    0,    0,    0,  462,    0,    0,    0,  463,    0,    0,
  558,    0,    0,    0,    0,    0,    0,    0,    0,  464,
    0,    0,  465,    0,  466,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  562,    0,    0,    0,
    0,    0,  562,    0,    0,    0,    0,    0,  467,    0,
    0,  558,    0,    0,    0,    0,  558,    0,  558,  558,
  558,  558,  558,  558,  558,  558,  558,  558,  558,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  562,    0,
  558,    0,  558,    0,  558,    0,  558,  558,  558,    0,
  558,  558,    0,    0,  558,  558,  558,  558,  558,  558,
  558,  558,  558,    0, 1346,    0,  558,  558,  558,  558,
  558,  558,  558,  558,    0,    0,    0,    0,    0,  562,
    0,    0,    0,    0,  562,  558,  562,  562,  562,  562,
  562,  562,  562,  562,  562,  562,  562,    0,    0,    0,
  563,  558,    0,    0,    0,    0,  563,    0,  562,    0,
  562,    0,  562,    0,  562,  562,  562,    0,  562,  562,
    0,    0,  562,  562,  562,  562,    0,    0,    0,  562,
  562,    0,    0,    0,  562,  562,  562,  562,  562,  562,
  562,  562,  563,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  562,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  564,  562,
    0,    0,    0,    0,  564,    0,    0,    0,    0,    0,
    0,    0,    0,  563,    0,    0,    0,    0,  563,    0,
  563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
  563,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  564,    0,  563,    0,  563,    0,  563,    0,  563,  563,
  563,    0,  563,  563,    0,    0,  563,  563,  563,  563,
    0,    0,    0,  563,  563,    0,  567,    0,  563,  563,
  563,  563,  563,  563,  563,  563,    0,    0,    0,    0,
    0,  564,    0,    0,    0,    0,  564,  563,  564,  564,
  564,  564,  564,  564,  564,  564,  564,  564,  564,    0,
    0,    0,    0,  563,    0,    0,    0,    0,    0,    0,
  564,    0,  564,    0,  564,    0,  564,  564,  564,    0,
  564,  564,    0,    0,  564,  564,  564,  564,    0,    0,
    0,  564,  564,    0,  568,    0,  564,  564,  564,  564,
  564,  564,  564,  564,    0,    0,    0,    0,    0,  567,
    0,    0,    0,    0,  567,  564,  567,  567,  567,  567,
  567,  567,  567,  567,  567,  567,  567,    0,    0,    0,
    0,  564,    0,    0,    0,    0,    0,    0,  567,    0,
  567,    0,  567,    0,  567,  567,  567,    0,    0,    0,
    0,    0,  567,  567,  567,  567,    0,    0,    0,  567,
  567,    0,  569,    0,  567,  567,  567,  567,  567,  567,
  567,  567,    0,    0,    0,    0,    0,  568,    0,    0,
    0,    0,  568,  567,  568,  568,  568,  568,  568,  568,
  568,  568,  568,  568,  568,    0,    0,    0,    0,  567,
    0,    0,    0,    0,    0,    0,  568,    0,  568,    0,
  568,    0,  568,  568,  568,    0,    0,    0,    0,    0,
  568,  568,  568,  568,    0,    0,    0,  568,  568,    0,
  570,    0,  568,  568,  568,  568,  568,  568,  568,  568,
    0,    0,    0,    0,    0,  569,    0,    0,    0,    0,
  569,  568,  569,  569,  569,  569,  569,  569,  569,  569,
  569,  569,  569,    0,    0,    0,    0,  568,    0,    0,
    0,    0,    0,    0,  569,    0,  569,    0,  569,    0,
  569,  569,  569,    0,    0,    0,    0,    0,  569,  569,
  569,  569,    0,    0,    0,  569,  569,    0,  571,    0,
  569,  569,  569,  569,  569,  569,  569,  569,    0,    0,
    0,    0,    0,  570,    0,    0,    0,    0,  570,  569,
  570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
  570,    0,    0,    0,    0,  569,    0,    0,    0,    0,
    0,    0,  570,    0,  570,    0,  570,    0,  570,  570,
  570,    0,    0,    0,    0,    0,  570,  570,  570,  570,
    0,    0,    0,  570,  570,    0,  572,    0,    0,    0,
  570,  570,  570,  570,  570,  570,    0,    0,    0,    0,
    0,  571,    0,    0,    0,    0,  571,  570,  571,  571,
  571,  571,  571,  571,  571,  571,  571,  571,  571,    0,
    0,    0,    0,  570,    0,    0,    0,    0,    0,    0,
  571,    0,  571,    0,  571,    0,  571,  571,  571,    0,
    0,    0,    0,    0,  571,  571,  571,  571,    0,    0,
    0,  571,  571,    0,  573,    0,    0,    0,  571,  571,
  571,  571,  571,  571,    0,    0,    0,    0,    0,  572,
    0,    0,    0,    0,  572,  571,  572,  572,  572,  572,
  572,  572,  572,  572,  572,  572,  572,    0,    0,    0,
    0,  571,    0,    0,    0,    0,    0,    0,  572,    0,
  572,    0,  572,    0,  572,  572,  572,    0,    0,    0,
    0,    0,  572,  572,  572,  572,    0,    0,    0,  572,
  572,    0,  574,    0,    0,    0,  572,  572,  572,  572,
  572,  572,    0,    0,    0,    0,    0,  573,    0,    0,
    0,    0,  573,  572,  573,  573,  573,  573,  573,  573,
  573,  573,  573,  573,  573,    0,    0,    0,    0,  572,
    0,    0,    0,    0,    0,    0,  573,    0,  573,    0,
  573,    0,  573,  573,  573,    0,    0,    0,    0,    0,
  573,  573,  573,  573,    0,    0,    0,  573,  573,    0,
  575,    0,    0,    0,  573,  573,  573,  573,  573,  573,
    0,    0,    0,    0,    0,  574,    0,    0,    0,    0,
  574,  573,  574,  574,  574,  574,  574,  574,  574,  574,
  574,  574,  574,    0,    0,    0,    0,  573,    0,    0,
    0,    0,    0,    0,  574,    0,  574,    0,  574,    0,
  574,  574,  574,    0,    0,    0,    0,    0,  574,  574,
  574,  574,    0,    0,    0,  574,  574,    0,  576,    0,
    0,    0,  574,  574,  574,  574,  574,  574,    0,    0,
    0,    0,    0,  575,    0,    0,    0,    0,  575,  574,
  575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
  575,    0,    0,    0,    0,  574,    0,    0,    0,    0,
    0,    0,  575,    0,  575,    0,  575,    0,  575,  575,
  575,    0,    0,    0,    0,    0,    0,    0,  575,  575,
    0,    0,    0,  575,  575,    0,  577,    0,    0,    0,
    0,    0,  575,  575,  575,  575,    0,    0,    0,    0,
    0,  576,    0,    0,    0,    0,  576,  575,  576,  576,
  576,  576,  576,  576,  576,  576,  576,  576,  576,    0,
    0,    0,    0,  575,    0,    0,    0,    0,    0,    0,
  576,    0,  576,    0,  576,    0,  576,  576,  576,    0,
    0,    0,    0,    0,    0,    0,  576,  576,    0,    0,
    0,  576,  576,    0,  578,    0,    0,    0,    0,    0,
  576,  576,  576,  576,    0,    0,    0,    0,    0,  577,
    0,    0,    0,    0,  577,  576,  577,  577,  577,  577,
  577,  577,  577,  577,  577,  577,  577,    0,    0,    0,
    0,  576,    0,    0,    0,    0,    0,    0,  577,    0,
  577,    0,  577,    0,  577,  577,  577,    0,    0,    0,
    0,    0,    0,    0,  577,  577,    0,    0,    0,  577,
  577,    0,  579,    0,    0,    0,    0,    0,  577,  577,
  577,  577,    0,    0,    0,    0,    0,  578,    0,    0,
    0,    0,  578,  577,  578,  578,  578,  578,  578,  578,
  578,  578,  578,  578,  578,    0,    0,    0,    0,  577,
    0,    0,    0,    0,    0,    0,  578,    0,  578,    0,
  578,    0,  578,  578,  578,    0,    0,    0,    0,    0,
    0,    0,  578,  578,    0,    0,    0,  578,  578,    0,
  580,    0,    0,    0,    0,    0,    0,    0,  578,  578,
    0,    0,    0,    0,    0,  579,    0,    0,    0,    0,
  579,  578,  579,  579,  579,  579,  579,  579,  579,  579,
  579,  579,  579,    0,    0,    0,    0,  578,    0,    0,
    0,    0,    0,    0,  579,    0,  579,    0,  579,    0,
  579,  579,  579,    0,    0,    0,    0,    0,    0,    0,
  579,  579,    0,    0,    0,  579,  579,    0,  581,    0,
    0,    0,    0,    0,    0,    0,  579,  579,    0,    0,
    0,    0,    0,  580,    0,    0,    0,    0,  580,  579,
  580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
  580,    0,    0,    0,    0,  579,    0,    0,    0,    0,
    0,    0,  580,    0,  580,    0,  580,    0,  580,  580,
  580,    0,    0,    0,    0,    0,    0,    0,    0,  580,
    0,    0,    0,  580,  580,    0,  582,    0,    0,    0,
    0,    0,    0,    0,  580,  580,    0,    0,    0,    0,
    0,  581,    0,    0,    0,    0,  581,  580,  581,  581,
  581,  581,  581,  581,  581,  581,  581,  581,  581,    0,
    0,    0,    0,  580,    0,    0,    0,    0,    0,    0,
  581,    0,  581,    0,  581,    0,  581,  581,  581,    0,
    0,    0,    0,    0,    0,    0,    0,  581,    0,    0,
    0,  581,  581,    0,  583,    0,    0,    0,    0,    0,
    0,    0,  581,  581,    0,    0,    0,    0,    0,  582,
    0,    0,    0,    0,  582,  581,  582,  582,  582,  582,
  582,  582,  582,  582,  582,  582,  582,    0,    0,    0,
    0,  581,    0,    0,    0,    0,    0,    0,  582,    0,
  582,    0,  582,    0,  582,  582,  582,    0,    0,    0,
    0,    0,    0,    0,    0,  582,    0,    0,    0,    0,
  582,    0,  584,    0,    0,    0,    0,    0,    0,    0,
  582,  582,    0,    0,    0,    0,    0,  583,    0,    0,
    0,    0,  583,  582,  583,  583,  583,  583,  583,  583,
  583,  583,  583,  583,  583,    0,    0,    0,    0,  582,
    0,    0,    0,    0,    0,    0,  583,    0,  583,    0,
  583,    0,  583,  583,  583,    0,    0,    0,    0,    0,
    0,    0,    0,  583,    0,    0,    0,    0,  583,    0,
  585,    0,    0,    0,    0,    0,    0,    0,  583,  583,
    0,    0,    0,    0,    0,  584,    0,    0,    0,    0,
  584,  583,  584,  584,  584,  584,  584,  584,  584,  584,
  584,  584,  584,    0,    0,    0,    0,  583,    0,    0,
    0,    0,    0,    0,  584,    0,  584,    0,  584,    0,
  584,  584,  584,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  584,    0,  587,    0,
    0,    0,    0,    0,    0,    0,  584,  584,    0,    0,
    0,    0,    0,  585,    0,    0,    0,    0,  585,  584,
  585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
  585,    0,    0,    0,    0,  584,    0,    0,    0,    0,
    0,    0,  585,    0,  585,    0,  585,    0,  585,  585,
  585,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  340,  585,    0,    0,  750,    0,    0,
    0,    0,    0,    0,  585,  585,    0,    0,    0,    0,
    0,  587,    0,    0,    0,    0,  587,  585,  587,  587,
  587,  587,  587,  587,  587,  587,  587,  587,  587,  340,
    0,    0,    0,  585,    0,    0,    0,    0,    0,    0,
  587,    0,  587,    0,  587,  750,  587,  587,  587,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  587,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  587,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  587,    0,    0,  340,    0,
    0,    0,    0,    0,  340,    0,    0,    0,    0,  340,
  340,  587,  340,    0,  340,    0,  750,  340,    0,  340,
  340,    0,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,    0,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,    0,    0,   55,    0,  340,
    0,  340,    0,    0,  340,   56,   24,   57,   25,    0,
  340,   26,   58,    0,   59,   60,   27,   61,   62,   63,
   28,    0,    0,    0,    0,    0,   64,    0,   65,   30,
   66,   67,   68,   69,    0,    0,   32,    0,    0,    0,
   70,   33,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   73,    0,   36,    0,   37,
   74,    0,    0,   38,    0,   75,   76,   77,   78,   79,
   80,   39,   40,   81,   82,   41,   83,    0,   84,    0,
    0,   85,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,   94,    0,
    0,    0,   95,    0,    0,    0,    0,   96,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,    0,    0,  103,  104,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  265,    0,    0,    0,  105,  106,
  107,  108,   56,   24,   57,   25,    0,    0,   26,   58,
    0,   59,   60,   27,   61,   62,   63,   28,    0,    0,
    0,    0,    0,   64,    0,   65,   30,   66,   67,   68,
   69,    0,    0,   32,    0,    0,    0,   70,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   73,    0,   36,    0,   37,   74,    0,    0,
   38,    0,   75,   76,   77,   78,   79,   80,   39,   40,
   81,   82,   41,   83,    0,   84,    0,    0,   85,   86,
    0,    0,   87,   88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   89,   90,   91,
   92,   93,    0,    0,    0,   94,    0,    0,    0,   95,
    0,    0,    0,    0,   96,   97,   98,   99,  100,    0,
    0,    0,  101,    0,  102,    0,    0,    0,    0,    0,
  103,  104,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  556,    0,    0,    0,  105,  106,  107,  108,   56,
   24,   57,   25,    0,    0,   26,   58,    0,   59,   60,
   27,   61,   62,   63,   28,    0,    0,    0,    0,    0,
   64,    0,   65,   30,   66,   67,   68,   69,    0,    0,
   32,    0,    0,    0,   70,   33,    0,   71,   72,   34,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
    0,   36,    0,   37,   74,    0,    0,   38,    0,   75,
   76,   77,   78,   79,   80,   39,   40,   81,   82,   41,
   83,    0,   84,    0,    0,   85,   86,    0,    0,   87,
   88,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   89,   90,   91,   92,   93,    0,
    0,    0,   94,    0,    0,    0,   95,    0,    0,    0,
    0,   96,   97,   98,   99,  100,    0,    0,    0,  101,
    0,  102,    0,    0,    0,    0,    0,  103,  104,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  960,    0,
    0,    0,  105,  557,  107,  108,  960,  960,  960,  960,
    0,    0,  960,  960,    0,  960,  960,  960,  960,  960,
  960,  960,    0,    0,    0,    0,    0,  960,    0,  960,
  960,  960,  960,  960,  960,    0,    0,  960,    0,    0,
    0,  960,  960,    0,  960,  960,  960,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  960,    0,  960,    0,
  960,  960,    0,    0,  960,    0,  960,  960,  960,  960,
  960,  960,  960,  960,  960,  960,  960,  960,    0,  960,
    0,    0,  960,  960,    0,    0,  960,  960,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  960,  960,  960,  960,  960,    0,    0,    0,  960,
    0,    0,    0,  960,    0,    0,    0,    0,  960,  960,
  960,  960,  960,    0,    0,    0,  960,    0,  960,    0,
    0,    0,    0,    0,  960,  960,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  801,    0,    0,    0,  960,
  960,  960,  960,  801,  801,  801,  801,    0,    0,  801,
  801,    0,  801,  801,  801,  801,  801,  801,  801,    0,
    0,    0,    0,    0,  801,    0,  801,  801,  801,  801,
  801,  801,    0,    0,  801,    0,    0,    0,  801,  801,
    0,  801,  801,  801,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  801,    0,  801,    0,  801,  801,    0,
    0,  801,    0,  801,  801,  801,  801,  801,  801,  801,
  801,  801,  801,  801,  801,    0,  801,    0,    0,  801,
  801,    0,    0,  801,  801,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  801,  801,
  801,  801,  801,    0,    0,    0,  801,    0,    0,    0,
  801,    0,    0,    0,    0,  801,  801,  801,  801,  801,
    0,    0,    0,  801,    0,  801,    0,    0,    0,    0,
    0,  801,  801,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  743,    0,    0,    0,  801,  801,  801,  801,
   56,   24,    0,   25,    0,    0,   26,  253,    0,    0,
    0,   27,   61,   62,    0,   28,    0,    0,  176,    0,
  176,   64,    0,  176,   30,    0,    0,    0,  176,    0,
    0,   32,  176,    0,    0,    0,   33,    0,   71,   72,
   34,  176,    0,    0,    0,    0,    0,    0,  176,    0,
    0,    0,   36,  176,   37,   74,    0,  176,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  254,  176,
   41,  176,    0,    0,    0,  176,    0,   86,    0,    0,
   87,   88,    0,  176,  176,    0,    0,  176,    0,    0,
  176,    0,    0,    0,    0,   89,   90,   91,   92,  301,
    0,    0,    0,  517,  744,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,    0,  984,    0,    0,  103,  104,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  932,
    0,    0,    0,  105,  302,  107,  108,   56,   24,    0,
   25,    0,    0,   26,  253,    0,    0,    0,   27,   61,
   62,  176,   28,    0,    0,  176,    0,  176,   64,    0,
  176,   30,    0,    0,    0,  176,    0,    0,   32,  176,
    0,    0,    0,   33,    0,   71,   72,   34,  176,  594,
    0,    0,    0,    0,    0,  176,  595,    0,    0,   36,
  176,   37,   74,    0,  176,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  254,  176,   41,  176,    0,
    0,    0,  176,    0,  596,    0,    0,   87,   88,    0,
  176,  176,    0,    0,  176,    0,    0,  176,    0,    0,
    0,    0,   89,   90,   91,   92,   93,    0,    0,    0,
    0,    0,    0,    0,   95,    0,    0,    0,    0,    0,
   97,   98,   99,  100,    0,    0,    0,  101,    0,  102,
  984,    0,    0,    0,    0,  103,  104,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  936,    0,    0,    0,
  105,  106,  107,  108,   56,   24,    0,   25,    0,    0,
   26,  253,    0,    0,    0,   27,   61,   62,  176,   28,
    0,    0,   24,    0,   25,   64,    0,   26,   30,    0,
    0,    0,   27,    0,    0,   32,   28,    0,    0,    0,
   33,    0,   71,   72,   34,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,   36,   33,   37,   74,
  937,   34,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  254,   36,   41,   37,    0,    0,    0,   38,
    0,   86,    0,    0,   87,   88,    0,   39,   40,    0,
    0,   41,    0,    0,  322,    0,    0,    0,    0,   89,
   90,   91,   92,  301,    0,    0,    0,  517,    0,    0,
    0,   95,    0,    0,    0,    0,    0,   97,   98,   99,
  100,    0,    0,    0,  101,    0,  102,    0,    0,    0,
    0,    0,  103,  104,    0,    0,    0,    0,    0,    0,
   56,   24,    0,   25,    0,    0,   26,  253,    0,    0,
    0,   27,   61,   62,    0,   28,    0,  105,  302,  107,
  108,   64,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,  355,   33,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   74,    0,    0,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  254,    0,
   41,    0,    0,    0,    0,    0,    0,   86,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,  301,
    0,    0,    0,  729, 1004,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,    0,    0,    0,    0,  103,  104,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  743,    0,  105,  730,  107,  108,    0,    0,   56,
   24,    0,   25,    0,  731,   26,  253,    0,    0,    0,
   27,   61,   62,    0,   28,    0,    0,   24,    0,   25,
   64,    0,   26,   30,    0,    0,    0,   27,    0,    0,
   32,   28,    0,    0,    0,   33,    0,   71,   72,   34,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,   36,   33,   37,   74,  937,   34,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  254,   36,   41,
   37,    0,    0,    0,   38,    0,   86,    0,    0,   87,
   88,    0,   39,   40,    0,    0,   41,    0,    0,  519,
    0,    0,    0,    0,   89,   90,   91,   92,  301,    0,
    0,    0,  517,    0,    0,    0,   95,    0,    0,    0,
    0,    0,   97,   98,   99,  100,    0,    0,    0,  101,
    0,  102,    0,    0,    0,    0,    0,  103,  104,    0,
    0,    0,    0,    0,    0,   56,   24,    0,   25,    0,
    0,   26,  253,    0,    0,    0,   27,   61,   62,    0,
   28,    0,  105,  302,  107,  108,   64,    0,    0,   30,
    0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
  355,   33,    0,   71,   72,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,   37,
   74,    0,    0,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  254,    0,   41,    0,    0,    0,    0,
    0,    0,   86,    0,    0,   87,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   90,   91,   92,  301,    0,    0,    0,  729,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,    0,    0,  103,  104,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  743,    0,  105,  730,
  107,  108,    0,    0,   56,   24,    0,   25,    0,  731,
   26,  253,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,   24,    0,   25,   64,    0,   26,   30,    0,
    0,    0,   27,    0,    0,   32,   28,    0,    0,    0,
   33,    0,   71,   72,   34,   30,    0,    0,    0,    0,
    0,    0,   32,    0,    0,    0,   36,   33,   37,   74,
    0,   34,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  254,   36,   41,   37,    0,    0,    0,   38,
    0,   86,    0,    0,   87,   88,    0,   39,   40,    0,
    0,   41,    0,    0,  573,    0,    0,    0,    0,   89,
   90,   91,   92,  301,    0,    0,    0,  517,    0,    0,
    0,   95,    0,    0,    0,    0,    0,   97,   98,   99,
  100,    0,    0,    0,  101,    0,  102,    0,    0,    0,
    0,    0,  103,  104,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  300,    0,    0,    0,  105,  302,  107,
  108,   56,   24,    0,   25,    0,    0,   26,  253,    0,
    0,    0,   27,   61,   62,  355,   28,    0,    0,   24,
    0,   25,   64,    0,   26,   30,    0,    0,    0,   27,
    0,    0,   32,   28,    0,    0,    0,   33,    0,   71,
   72,   34,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,   36,   33,   37,   74,    0,   34,   38,
    0,    0,   76,    0,   78,    0,   80,   39,   40,  254,
   36,   41,   37,    0,    0,    0,   38,    0,   86,    0,
    0,   87,   88,    0,   39,   40,    0,    0,   41,    0,
    0,  758,    0,    0,    0,    0,   89,   90,   91,   92,
  301,    0,    0,    0,    0,    0,    0,    0,   95,    0,
    0,    0,    0,    0,   97,   98,   99,  100,    0,    0,
    0,  101,    0,  102,    0,    0,    0,    0,    0,  103,
  104,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  309,    0,    0,    0,  105,  302,  107,  108,   56,   24,
    0,   25,    0,    0,   26,  253,    0,    0,    0,   27,
   61,   62,  355,   28,    0,    0,  494,    0,  494,   64,
    0,  494,   30,    0,    0,    0,  494,    0,    0,   32,
  494,    0,    0,    0,   33,    0,   71,   72,   34,  494,
    0,    0,    0,    0,    0,    0,  494,    0,    0,    0,
   36,  494,   37,   74,    0,  494,   38,    0,    0,   76,
    0,   78,    0,   80,   39,   40,  254,  494,   41,  494,
    0,    0,    0,  494,    0,   86,    0,    0,   87,   88,
    0,  494,  494,    0,    0,  494,    0,    0,  494,    0,
    0,    0,    0,   89,   90,   91,   92,  301,    0,    0,
    0,    0,    0,    0,    0,   95,    0,    0,    0,    0,
    0,   97,   98,   99,  100,    0,    0,    0,  101,    0,
  102,    0,    0,    0,    0,    0,  103,  104,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  592,    0,    0,
    0,  105,  302,  107,  108,   56,   24,    0,   25,    0,
    0,   26,  253,    0,    0,    0,   27,   61,   62,  494,
   28,    0,    0,  177,    0,  177,   64,    0,  177,   30,
    0,    0,    0,  177,    0,    0,   32,  177,    0,    0,
    0,   33,    0,   71,   72,   34,  177,    0,    0,    0,
    0,    0,    0,  177,    0,    0,    0,   36,  177,   37,
   74,    0,  177,   38,    0,    0,   76,    0,   78,    0,
   80,   39,   40,  254,  177,   41,  177,    0,    0,    0,
  177,    0,   86,    0,    0,   87,   88,    0,  177,  177,
    0,    0,  177,    0,    0,  177,    0,    0,    0,    0,
   89,   90,   91,   92,   93,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   97,   98,
   99,  100,    0,    0,    0,  101,    0,  102,    0,    0,
    0,    0,    0,  103,  104,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  823,    0,    0,    0,  105,  106,
  107,  108,   56,   24,    0,   25,    0,    0,   26,  253,
    0,    0,    0,   27,   61,   62,  177,   28,    0,    0,
  176,    0,  176,   64,    0,  176,   30,    0,    0,    0,
  176,    0,    0,   32,  176,    0,    0,    0,   33,    0,
   71,   72,   34,  176,    0,    0,    0,    0,    0,    0,
  176,    0,    0,    0,   36,  176,   37,   74,    0,  176,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  254,  176,   41,  176,    0,    0,    0,  176,    0,   86,
    0,    0,   87,   88,    0,  176,  176,    0,    0,  176,
    0,    0,  176,    0,    0,    0,    0,   89,   90,   91,
   92,  301,    0,    0,    0,    0,    0,    0,    0,   95,
    0,    0,    0,    0,    0,   97,   98,   99,  100,    0,
    0,    0,  101,    0,  102,    0,    0,    0,    0,    0,
  103,  104,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1189,    0,    0,    0,  105,  302,  107,  108,   56,
   24,    0,   25,    0,    0,   26,  253,    0,    0,    0,
   27,   61,   62,  176,   28,    0,    0,  186,    0,  186,
   64,    0,  186,   30,    0,    0,    0,  186,    0,    0,
   32,  186,    0,    0,    0,   33,    0,   71,   72,   34,
  186,    0,    0,    0,    0,    0,    0,  186,    0,    0,
    0,   36,  186,   37,   74,    0,  186,   38,    0,    0,
   76,    0,   78,    0,   80,   39,   40,  254,  186,   41,
  186,    0,    0,    0,  186,    0,   86,    0,    0,   87,
   88,    0,  186,  186,    0,    0,  186,    0,    0,  186,
    0,    0,    0,    0,   89,   90,   91,   92,  301,    0,
    0,    0,    0,    0,    0,    0,   95,    0,    0,    0,
    0,    0,   97,   98,   99,  100,    0,    0,    0,  101,
    0,  102,    0,    0,    0,    0,    0,  103,  104,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  613,    0,
    0,    0,  105,  302,  107,  108,  613,  613,    0,  613,
    0,    0,  613,  613,    0,    0,    0,  613,  613,  613,
  186,  613,    0,    0,    0,    0,    0,  613,    0,    0,
  613,    0,    0,    0,    0,    0,    0,  613,    0,    0,
    0,    0,  613,    0,  613,  613,  613,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  613,    0,
  613,  613,    0,    0,  613,    0,    0,  613,    0,  613,
    0,  613,  613,  613,  613,    0,  613,    0,    0,    0,
    0,    0,    0,  613,    0,    0,  613,  613,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  613,  613,  613,  613,  613,    0,    0,    0,    0,
    0,    0,    0,  613,    0,    0,    0,    0,    0,  613,
  613,  613,  613,    0,    0,    0,  613,    0,  613,    0,
    0,    0,    0,    0,  613,  613,    0,    0,    0,    0,
    0,    0,    0,  201,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  500,    0,    0,    0,  613,
  613,  613,  613,   56,   24,    0,   25,    0,    0,   26,
  253,    0,    0,    0,   27,   61,   62,    0,   28,    0,
    0,    0,    0,    0,   64,  202,    0,   30,    0,    0,
    0,    0,    0,    0,   32,    0,    0,    0,  340,   33,
    0,   71,   72,   34,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   36,    0,   37,   74,    0,
    0,   38,    0,    0,   76,    0,   78,    0,   80,   39,
   40,  254,    0,   41,  340,  203,  204,  205,  206,    0,
  207,  208,  209,  210,  211,  212,  213,  214,    0,    0,
  215,  216,  217,  218,  219,  220,  221,  222,   89,   90,
   91,  255,    0,    0,    0,    0,    0,    0,    0,    0,
   95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  340,  340,  340,
  340,  750,    0,    0,  340,  340,  105,  501,  340,  340,
  340,  340,  340,  340,  340,  340,  340,    0,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
  340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
    0,   49,    0,   49,    0,   49,  340,   49,    0,  340,
   49,    0,   49,   49,    0,   49,    0,   49,    0,   49,
    0,   49,   49,   49,   49,    0,    0,   49,   49,    0,
    0,    0,    0,   49,   49,   49,   49,   49,    0,    0,
   49,    0,   49,    0,   49,    0,   49,   49,    0,   49,
   49,   49,   49,    0,    0,   49,   49,   49,   49,    0,
    0,   49,   49,   49,    0,    0,    0,    0,    0,    0,
   49,   49,    0,   49,   49,    0,   49,   49,   49,    0,
    0,    0,   49,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   49,    0,   49,   49,   48,    0,    0,    0,
   48,    0,   48,    0,    0,   48,    0,   48,   48,    0,
   48,    0,   48,    0,   48,    0,   48,   48,   48,   48,
    0,    0,   48,   48,    0,    0,    0,    0,   48,    0,
   48,   48,   48,    0,    0,   48,    0,   48,    0,   48,
    0,    0,   48,    0,   48,   48,   48,   48,   49,    0,
    0,   48,   48,   48,    0,    0,   48,   48,   48,    0,
    0,    0,    0,    0,    0,   48,   48,    0,   48,   48,
    0,   48,   48,   48,    0,    0,    0,   48,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   48,    0,   48,    0,   48,
    0,   48,    0,   81,   48,    0,   48,   48,    0,   48,
    0,   48,   48,   48,    0,   48,   48,   48,   48,    0,
    0,   48,   48,    0,    0,    0,    0,   48,    0,   48,
   48,   48,    0,    0,   48,    0,   48,    0,   48,    0,
    0,   48,    0,   48,   48,   48,   48,    0,    0,    0,
   48,   48,   48,   48,    0,   48,   48,   48,    0,    0,
    0,    0,    0,    0,   48,   48,    0,   48,   48,    0,
   48,   48,   48,    0,    0,    0,   48,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   49,    0,   48,    0,   49,    0,
   49,    0,   82,   49,    0,   49,   49,    0,   49,    0,
   49,   48,   49,    0,   49,   49,   49,   49,    0,    0,
   49,   49,    0,    0,    0,    0,   49,    0,   49,   49,
   49,    0,    0,   49,    0,   49,    0,   49,    0,    0,
   49,    0,   49,   49,   49,   49,    0,    0,    0,   49,
   49,   49,   48,    0,   49,   49,   49,    0,    0,    0,
    0,    0,    0,   49,   49,    0,   49,   49,    0,   49,
   49,   49,    0,    0,    0,   49,    0,    0,    0,    0,
   48,    0,    0,    0,   48,    0,   48,    0,    0,   48,
    0,   48,   48,    0,   48,   49,   48,    0,   48,    0,
   48,   48,   48,   48,    0,    0,   48,   48,    0,    0,
   49,    0,   48,    0,   48,   48,   48,    0,    0,   48,
    0,   48,    0,   48,    0,    0,   48,    0,   48,   48,
   48,   48,    0,    0,    0,   48,   48,   48,    0,    0,
   48,   48,   48,    0,    0,    0,    0,    0,    0,   48,
   48,   49,   48,   48,    0,   48,   48,   48,    0,    0,
    0,   48,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   48,    0,    0,    0,   48,    0,
   48,   48,    0,   48,    0,   48,   48,  216,   48,    0,
   48,    0,   48,    0,   48,   48,   48,   48,    0,    0,
   48,   48,    0,    0,    0,    0,   48,    0,   48,   48,
   48,    0,    0,   48,    0,   48,  340,   48,    0,    0,
   48,    0,   48,   48,   48,   48,    0,    0,    0,   48,
   48,   48,    0,    0,   48,   48,   48,   48,    0,  340,
    0,    0,    0,   48,   48,    0,   48,   48,    0,   48,
   48,   48,  340,    0,    0,   48,    0,  340,    0,    0,
  340,    0,  340,    0,  340,  340,  340,  340,    0,    0,
    0,    0,  340,    0,    0,   48,  340,    0,    0,    0,
  340,  217,    0,    0,    0,    0,    0,    0,  340,    0,
    0,  340,    0,  340,   56,   24,    0,   25,    0,    0,
   26,  253,    0,    0,    0,   27,   61,   62,    0,   28,
    0,    0,  340,    0,    0,   64,    0,  340,   30,    0,
    0,    0,    0,    0,  340,   32,  267,    0,  340,    0,
   33,   48,   71,   72,   34,    0,  594,    0,    0,    0,
    0,  340,    0,  595,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  254,    0,   41,    0,    0,    0,    0,    0,
    0,  596,    0,  340,   87,   88,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
   90,   91,   92,   93,    0,    0,    0,    0,    0,    0,
    0,   95,  930,    0,  597,    0,    0,   97,   98,   99,
  100,    0,    0,    0,  101,    0,  102,    0,    0,    0,
    0,    0,  103,  104,    0,    0,    0,    0,    0,    0,
   56,   24,    0,   25,    0,    0,   26,  253,    0,    0,
    0,   27,   61,   62,    0,   28,    0,  105,  106,  107,
  108,   64,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   71,   72,
   34,    0,  594,    0,    0,    0,    0,    0,    0,  595,
    0,    0,   36,    0,   37,   74,    0,    0,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  254,    0,
   41,    0,    0,    0,    0,    0,    0,  596,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,   93,
    0,    0,    0,    0,    0,    0,    0,   95,    0,    0,
  597,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,    0,    0,    0,    0,  103,  104,
    0,    0,    0,    0,    0,    0,   56,   24,    0,   25,
    0,    0,   26,  253,    0,    0,    0,   27,   61,   62,
    0,   28,    0,  105,  106,  107,  108,   64,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   71,   72,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   74,    0,    0,   38,    0,    0,   76,    0,   78,
    0,   80,   39,   40,  254,    0,   41,    0,    0,   84,
    0,    0,    0,   86,    0,    0,   87,   88,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,  301,    0,    0,    0,    0,
    0,    0,    0,   95,    0,    0,    0,    0,    0,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
    0,    0,    0,    0,  103,  104,    0,    0,    0,    0,
    0,    0,   56,   24,    0,   25,    0,    0,   26,  253,
    0,    0,    0,   27,   61,   62,    0,   28,    0,  105,
  302,  107,  108,   64,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   74,    0,    0,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  254,    0,   41,    0,    0,    0,    0,    0,    0,   86,
    0,    0,   87,   88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   89,   90,   91,
   92,  301,    0,    0,    0,    0,  889,    0,    0,   95,
    0,    0,    0,    0,    0,   97,   98,   99,  100,    0,
    0,    0,  101,    0,  102,    0,    0,    0,    0,    0,
  103,  104,    0,    0,    0,    0,    0,    0,   56,   24,
    0,   25,    0,    0,   26,  253,    0,    0,    0,   27,
   61,   62,    0,   28,    0,  105,  302,  107,  108,   64,
    0,    0,   30,    0,    0,    0,    0,    0,    0,   32,
    0,    0,    0,    0,   33,    0,   71,   72,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   36,    0,   37,   74,    0,    0,   38,    0,    0,   76,
    0,   78,    0,   80,   39,   40,  254,    0,   41,    0,
    0,    0,    0,    0,    0,   86,    0,    0,   87,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   89,   90,   91,   92,  301,    0,    0,
    0,  517,    0,    0,    0,   95,    0,    0,    0,    0,
    0,   97,   98,   99,  100,    0,    0,    0,  101,    0,
  102,    0,    0,    0,    0,    0,  103,  104,    0,    0,
    0,    0,    0,    0,   56,   24,    0,   25,    0,    0,
   26,  253,    0,    0,    0,   27,   61,   62,    0,   28,
    0,  105,  302,  107,  108,   64,    0,    0,   30,    0,
    0,    0,    0,    0,    0,   32,    0,    0,    0,    0,
   33,    0,   71,   72,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   36,    0,   37,   74,
    0,    0,   38,    0,    0,   76,    0,   78,    0,   80,
   39,   40,  254,    0,   41,    0,    0,    0,    0,    0,
    0,   86,    0,    0,   87,   88,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   89,
   90,   91,   92,  301,    0,    0,    0,  511,    0,    0,
    0,   95,    0,    0,    0,    0,    0,   97,   98,   99,
  100,    0,    0,    0,  101,    0,  102,    0,    0,    0,
    0,    0,  103,  104,    0,    0,    0,    0,    0,    0,
   56,   24,    0,   25,    0,    0,   26,  253,    0,    0,
    0,   27,   61,   62,    0,   28,    0,  105,  302,  107,
  108,   64,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,    0,    0,    0,   33,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   74,    0,    0,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  254,    0,
   41,    0,    0,    0,    0,    0,    0,   86,    0,    0,
   87,   88,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   89,   90,   91,   92,  301,
    0,    0,    0,    0,    0,    0,    0,   95,    0,    0,
    0,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,    0,    0,    0,    0,  103,  104,
    0,    0,    0,    0,    0,    0,   56,   24,    0,   25,
    0,    0,   26,  253,    0,    0,    0,   27,   61,   62,
    0,   28,    0,  105,  302,  107,  108,   64,    0,    0,
   30,    0,    0,    0,    0,    0,    0,   32,    0,    0,
    0,    0,   33,    0,   71,   72,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   36,    0,
   37,   74,    0,    0,   38,    0,    0,   76,    0,   78,
    0,   80,   39,   40,  254,    0,   41,    0,    0,    0,
    0,    0,    0,   86,    0,    0,   87,   88,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   90,   91,   92,   93,    0,    0,    0,    0,
    0,    0,    0,   95,    0,    0,    0,    0,    0,   97,
   98,   99,  100,    0,    0,    0,  101,    0,  102,    0,
    0,    0,    0,    0,  103,  104,    0,    0,    0,    0,
    0,    0,   56,   24,    0,   25,    0,    0,   26,  253,
    0,    0,    0,   27,   61,   62,    0,   28,    0,  105,
  106,  107,  108,   64,    0,    0,   30,    0,    0,    0,
    0,    0,    0,   32,    0,    0,    0,    0,   33,    0,
   71,   72,   34,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   36,    0,   37,   74,    0,    0,
   38,    0,    0,   76,    0,   78,    0,   80,   39,   40,
  254,    0,   41,    0,    0,    0,    0,    0,    0,   86,
    0,    0,   87,   88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   89,   90,   91,
   92,   93,    0,    0,    0,    0,    0,    0,    0,   95,
    0,    0,    0,    0,    0,   97,   98,   99,  100,    0,
    0,    0,  101,    0,  102,    0,    0,    0,    0,    0,
  103,  104,    0,    0,    0,    0,    0,    0,   78,   78,
    0,   78,    0,    0,   78,   78,    0,    0,    0,   78,
   78,   78,    0,   78,    0,  105, 1044,  107,  108,   78,
    0,    0,   78,    0,    0,    0,    0,    0,    0,   78,
    0,    0,    0,    0,   78,    0,   78,   78,   78,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   78,    0,   78,   78,    0,    0,   78,    0,    0,   78,
    0,   78,    0,   78,   78,   78,   78,    0,   78,    0,
    0,    0,    0,    0,    0,   78,    0,    0,   78,   78,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   78,   78,   78,   78,   78,    0,    0,
    0,    0,    0,    0,    0,   78,    0,    0,    0,    0,
    0,   78,   78,   78,   78,    0,    0,    0,   78,    0,
   78,    0,    0,    0,    0,    0,   78,   78,    0,    0,
    0,    0,    0,    0,  137,  137,    0,  137,    0,    0,
  137,  137,    0,    0,    0,  137,  137,  137,    0,  137,
    0,   78,   78,   78,   78,  137,    0,    0,  137,    0,
    0,    0,    0,    0,    0,  137,    0,    0,    0,    0,
  137,    0,  137,  137,  137,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  137,    0,  137,  137,
    0,    0,  137,    0,    0,  137,    0,  137,    0,  137,
  137,  137,  137,    0,  137,    0,    0,    0,    0,    0,
    0,  137,    0,    0,  137,  137,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  137,
  137,  137,  137,  137,    0,    0,    0,    0,    0,    0,
    0,  137,    0,    0,    0,    0,    0,  137,  137,  137,
  137,    0,    0,    0,  137,    0,  137,    0,    0,    0,
    0,    0,  137,  137,    0,    0,    0,    0,    0,    0,
   56,   24,    0,   25,    0,    0,   26,  253,    0,    0,
    0,   27,   61,   62,    0,   28,    0,  137,  137,  137,
  137,   64,    0,    0,   30,    0,    0,    0,    0,    0,
    0,   32,    0,   28,    0,    0,   33,    0,   71,   72,
   34,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   37,   74,   28,    0,   38,    0,
    0,   76,    0,   78,    0,   80,   39,   40,  254,   28,
   41,    0,    0,    0,   28,    0,    0,    0,    0,   28,
    0,   28,   28,   28,   28,    0,    0,   28,    0,   28,
    0,    0,    0,   28,    0,   89,   90,   91,  255,  301,
    0,    0,    0,    0,    0,   28,    0,   95,   28,    0,
   28,    0,    0,   97,   98,   99,  100,    0,    0,    0,
  101,    0,  102,    0,    0,    0,    0,    0,  103,  104,
    0,    0,    0,    0,   28,    0,    0,    0,    0,    0,
   28,   28,    0,    0,    0,    0,    0,    0,  646,    0,
  646,    0,  646,  105,  256,  646,  108,  646,  646,    0,
  646,    0,  646,    0,  646,    0,  646,  646,  646,    0,
    0,    0,  646,  646,    0,    0,    0,    0,  646,    0,
  646,  646,    0,    0,    0,  646,    0,    0,    0,  646,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  646,  646,    0,  646,    0,    0,    0,  646,  646,    0,
    0,    0,    0,    0,    0,  646,  646,   56,   24,  646,
   25,    0,  646,   26,  253,    0,    0,  646,   27,   61,
   62,    0,   28,    0,    0,    0,    0,    0,   64,    0,
    0,   30,    0,    0,    0,    0,    0,    0,   32,  646,
  646,    0,    0,   33,    0,   71,   72,   34,    0,    0,
    0,    0,  646,    0,    0,    0,    0,    0,    0,   36,
    0,   37,   74,    0,    0,   38,    0,    0,   76,    0,
   78,    0,   80,   39,   40,  254,    0,   41,    0,    0,
   84,    0,    0,    0,    0,    0,    0,   24,    0,   25,
    0,    0,   26,  646, 1235,    0,    0,   27,    0,    0,
    0,   28,   89,   90,   91,  255,    0,    0,    0,    0,
   30,  645,    0,  645,   95,    0,  645,   32,  645,  645,
    0,  645,   33,  645, 1236,  645,   34,  645,  645,  645,
    0,    0,    0,  645,  645,    0,    0,    0,   36,  645,
   37,  645,  645,    0,   38, 1237,  645,    0,    0,    0,
  645,    0,   39,   40,    0,    0,   41,    0,    0,  322,
  105,  256,  645,    0,  645,    0,    0,    0,  645,  645,
    0,    0,    0,    0,    0,    0,  645,  645,    0,  645,
  645,  645,    0,  645,  645,    0,  645,  645,  645,  645,
    0,  645,    0,  645,    0,  645,  645,  645,    0,    0,
    0,  645,  645,    0,    0,    0,    0,  645,    0,  645,
  645,    0,    0,    0,  645,    0,    0,    0,  645,    0,
    0,    0,    0,  645,    0,    0,    0,    0,    0,    0,
  645,    0,  645,    0,    0,    0,  645,  645,    0,    0,
  355,    0,    0,    0,  645,  645,    0,    0,  645,    0,
    0,  645,    0,   24,    0,   25,  645,    0,   26,    0,
    0, 1297,    0,   27,  645,  686,    0,   28,    0,  687,
 1298, 1299,    0,    0,    0, 1300,   30,    0,    0,    0,
    0, 1301,    0,   32,    0,   24,    0,   25,   33,    0,
   26,    0,   34, 1297,    0,   27,    0,  686,    0,   28,
    0,  687, 1298, 1299,   36,    0,   37, 1300,   30,    0,
   38,    0,    0, 1301,    0,   32,    0,    0,   39,   40,
   33,    0,   41,    0,   34, 1302,    0,    0,    0,   48,
 1303,   48,  645,    0,   48,    0,   36,    0,   37,   48,
    0,    0,   38,   48,    0,    0,    0,    0,    0,    0,
   39,   40,   48,    0,   41,    0,    0, 1302,    0,   48,
    0,   48, 1303,   48,   48, 1304,   48,    0,   48,    0,
   48,   48,   48,    0,    0,   48,    0,   48,    0,    0,
   48,    0,   48,    0,   48,    0,   48,    0,    0,   48,
    0,   48,    0,    0,   48,   48,   48,    0,   48,    0,
   48,   48,   48,    0,   48,   49, 1305,   49,    0,   48,
   49,    0,   48,    0,   48,   49,    0,    0,   48,   49,
    0,   48,    0,    0,    0,    0,   48,   48,   49,    0,
   48,    0,    0,   48,    0,   49,  156,   48, 1305,   48,
   49,    0,   48,    0,   49,    0,   49,   48,   49,    0,
    0,   48,    0,   49,    0,    0,   49,    0,   49,    0,
   48,    0,   49,    0,    0,   49,  156,   48,    0,    0,
   49,   49,   48,    0,   49,    0,   48,   49,   48,    0,
   48,   24,   48,   25,    0,   48,   26,    0,   48,    0,
   48,   27,    0,    0,   48,   28,    0,   48,    0,    0,
    0,    0,   48,   48,   30,    0,   48,    0,    0,   48,
    0,   32,    0,    0,   48,    0,   33,    0,    0,    0,
   34,    0,  570,    0,    0,    0,   24,    0,   25,  571,
    0,   26,   36,    0,   37,    0,   27,    0,   38,    0,
   28,  572,    0,    0,   29,    0,   39,   40,    0,   30,
   41,    0,    0,  573,   31,    0,   32,    0,   49,    0,
    0,   33,    0,    0,    0,   34,   35,    0,    0,    0,
   24,    0,   25,    0,    0,   26,    0,   36,    0,   37,
   27,    0,    0,   38,   28,    0,    0,    0,    0,    0,
   48,   39,   40,   30,    0,   41,    0,   34,    0,    0,
   32,    0,    0,    0,    0,   33,    0,    0,   34,   34,
    0,    0,    0,   34,    0,    0,    0,   34,    0,    0,
   34,   36,    0,   37,    0,    0,    0,   38,    0,    0,
    0,    0,   34,   34,  574,   39,   40,   34,   34,   41,
   32,    0,  322,   34,    0,   34,   34,   34,   34,    0,
    0,   32,    0,   34,    0,    0,   32,   34,    0,   34,
   32,    0,    0,   32,    0,    0,    0,    0,  290,   34,
    0,   34,   34,    0,   34,   32,   32,    0,   34,   42,
   32,   32,    0,   28,    0,   28,   32,    0,   32,   32,
   32,   32,    0,    0,    0,    0,   32,    0,   34,    0,
   32,    0,   32,    0,   34,   34,   28,    0,    0,    0,
    0,    0,   32,    0,    0,   32,    0,   32,    0,   28,
    0,   32,    0,  323,   28,    0,   48,    0,    0,   28,
    0,   28,   28,   28,   28,    0,    0,   48,    0,   28,
    0,   32,   48,   28,    0,    0,   48,   32,   32,   48,
    0,    0,    0,    0,    0,   28,    0,    0,   28,    0,
   28,   48,   48,    0,    0,    0,   48,   48,    0,   48,
    0,    0,   48,    0,   48,   48,   48,   48,    0,    0,
   48,    0,   48,    0,   28,   48,   48,    0,   48,   48,
   28,   28,   48,    0,    0,    0,    0,    0,   48,    0,
    0,   48,    0,   48,   48,   48,    0,   48,    0,   48,
   48,   48,    0,    0,    0,   48,    0,   48,   48,   48,
   48,    0,    0,    0,    0,   48,    0,   48,    0,   48,
    0,   48,    0,   36,   48,    0,    0,    0,    0,    0,
    0,   48,    0,    0,   48,    0,   48,   48,    0,   48,
   48,    0,   48,    0,    0,    0,    0,   48,    0,   48,
   48,   48,   48,    0,    0,    0,    0,   48,    0,    0,
   48,   48,   48,    0,    0,    0,   37,    0,    0,    0,
    0,    0,    0,   48,    0,   48,   48,   48,   48,    0,
   48,    0,    0,    0,    0,   48,    0,   48,   48,   48,
   48,    0,    0,    0,    0,   48,    0,    0,    0,   48,
   48,    0,   48,    0,   48,   48,    0,    0,  198,    0,
    0,   48,    0,   48,   48,   48,   48,   48,   48,    0,
    0,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,   48,    0,   48,    0,    0,    0,   48,   48,    0,
   48,    0,   48,   48,    0,    0,  200,    0,    0,   48,
    0,   48,   48,   48,   48,    0,   48,    0,    0,    0,
    0,   48,    0,   48,   48,   48,   48,    0,    0,    0,
    0,   48,    0,    0,    0,   48,   48,    0,   48,    0,
    0,    0,    0,   48,  302,   48,    0,   48,    0,   48,
   48,    0,   48,    0,   48,    0,    0,    0,    0,   48,
    0,   48,   48,   48,   48,    0,   48,    0,    0,   48,
    0,    0,    0,   48,    0,    0,   48,    0,    0,   48,
    0,    0,  303,  452,   48,   48,    0,    0,   48,   48,
   48,   48,   48,   48,   48,    0,    0,   48,    0,   48,
    0,    0,    0,   48,    0,    0,  453,    0,    0,    0,
    0,    0,    0,  452,   48,   48,   48,   48,   48,  454,
   48,    0,    0,  455,  456,    0,    0,    0,    0,  457,
    0,  458,  459,  460,  461,    0,  453,    0,    0,  462,
    0,    0,    0,  463,   48,    0,    0,    0,    0,  454,
    0,    0,    0,    0,  456,  464,    0,    0,  465,  457,
  466,  458,  459,  460,  461,    0,    0,    0,    0,  462,
    0,    0,    0,  463,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  467,  464,    0,    0,  465,    0,
  466,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  467,
  };
  protected static readonly short [] yyCheck = {            17,
    4,   18,   17,   17,  298,  189,  299,   20,   51,   51,
  517,  515,   17,  234,  288,  469,  354,  339,    6,  188,
  232,   68,   84,   20,  491,  321,  157,   59,   59,  247,
  559,  297,  295,  354,  937,  781,  370, 1113,  748,   77,
   87,   88,  576,  332,   58,   92,  256,    0,  256, 1194,
  113,  113,  115,  115,  256,   73,  585, 1149, 1150,   77,
  256,  256,  328,  256,  268,   79,  191,   81,  256,  721,
  256,  723,  358,  256,   87,   88,   61,   95,  263,   47,
   65,   66,   67,  256,   69,   70,  277,  368,  256,   74,
   75,  256,  372,  256,  272,  108,   81,  256,   83,  256,
   85,  268,  363,  268,   17,   90,   91, 1199,  256,  276,
 1226,  256,   17,  391,  268, 1242,  768,    0,  296,  771,
  256,  256,  335,    0,  256,  172,  256,  256,  418,  114,
  315,  665, 1259,  645,  646,  256,  414,  282,  942,  157,
  256,   17,  157,  157,  410,  323,  189,  189,  429,  429,
  374,  369,  157,  256, 1270,   17,   17,  418,  257,  367,
  343,  369,  372,  371,  374,   17,  339,  369,  363,  314,
 1315,  344,  363,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  257,  381,  199,  200, 1198,  232,
  232,   17,  416,  381,  532,  368,  363,  370,  323,  372,
  247,  374,  375,  376,   17,   87,   88,  375,  391,  372,
 1220,  258,  420,  434,  368,  423,  554,  724,  422,  429,
  514,  433,  511,  418,  372,  418,  108,  418,  419,  247,
  355,  414,  418,  554,  252,  360,  339,  559,  576,  371,
  228,  344,  358,  346,  157,  428,  349,  350,  261,  352,
  353,  418,  157,  285,  285,  223,  429,  422,  320,  418,
  381,  418,  324,  585,  295, 1069,  329,  329,  422,  254,
  288,  374,  257,  418,  287,  293,  294,   17,  790,  326,
 1026,  157,  418,  418,  331,  317,  299,   17,  418,  418,
  308,   17,  256,  256,  307,  157,  157,  315, 1425,  317,
  256, 1311,  316,  321,  257,  157, 1316,  819,  424,  425,
  426,  427,  297,  256,  439,  333,  334,  199,  200,   21,
  358,  256,  369,  370,  339, 1452,  429,  665,  313,  256,
  376,  157, 1342, 1043,  339,   17,  870, 1464,  351, 1466,
  358,  354,  256, 1419,  157,  666, 1092,  999,  686,  474,
   52,  369,  370,  335,  256,  373,  374,  375,  376,  377,
  378,  379,  380,  381,  382,  383,  256,  256,  415,  416,
 1108,  256,  419,  256,  387,  388,  294,   59,  368,  261,
  257,   63,  376,  429,  256,  372,  256,  405,  306,  256,
  433,  433,  256, 1485,  264,  272,  903, 1300,  256,  363,
  277,  443,  415,  416,  281,  287,  370,  256,  372,  256,
  374,  367,  375,  709,  256,  882,  339,  157,  256,  296,
  376,  367,  435, 1515,  256,  307,  256,  157,  418,  256,
  376,  157,  944,  376,  946,  370,  449,  949,  435,  374,
  483,  662,  429,  490,  367,  492,  323,  429,  375,  574,
  913,  305,  449,  376,  418,  325,  339,  795,  262,  491,
  266,  375,  587,  726,  589,  342,  591,  369,  515,  351,
  484, 1123,  440,  441,  795,  157,  694,  811,  446, 1131,
  701,  372,  372,  372,  367,  532,  993,  372,  371,  536,
  373,  374,  375,  376,  298,  513,  256,  515,  381,  517,
  418,  486,  374, 1155,  368,  387,  388,  374,  314,  341,
  374,  368,  370,  305,  528,  529,  374,  266,  325,  532,
  369,  368,  325, 1035,  542, 1037, 1038,  374,  575,  547,
  372,  656,  870,  415,  416,  532,  374,  369,  429,  369,
  374,  554,  369,  528,  559,  256,  369,  368,  869,  256,
  373,  676,  566,  343,  559, 1018,  277, 1020,  368, 1211,
  281,  363,  363,  576,  256,  314,  376,  256, 1146,  375,
  585,  371,  429,  867,  378,  379,  594,  595,  256,  339,
  585,  363,  416,  369,  344,  343,  346,  369,  376,  349,
  350,  381,  352,  353,  368,  642,  372,  644,  368,  817,
  423,  391,  368,  285,  735,  367,  653,  896,  429,  371,
  371,  418,  363,  305,  374,  418,  418,  418, 1356,  429,
  420,  342,  640, 1135,  414, 1203,  375,  645,  646,  340,
  648, 1160,  339,  391,  900,  317,  418,  344,  428,  346,
  256,  386,  349,  350,  937,  352,  353,  694, 1386, 1387,
  263, 1389,  665,  429, 1166,  429,  414,  339,  420,  429,
  368,  339, 1400,  429,  711, 1403,  344,  418,  346,  429,
  428,  349,  350,  686,  352,  353,  694, 1226,  367,  372,
 1418,  367,  371,  256,  373,  374,  269,  376,  341, 1156,
  363,  709,  381, 1454, 1455,  726,  369,  759,  256,  687,
  996, 1213,  315,  286, 1442, 1226,  724,  394,  395, 1226,
  418,  729,  256,  256, 1008,  762,  369, 1226,  272, 1231,
  339, 1270,  429,  339,  256,  418,  415,  371,  344,  373,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  753,  755,  296,  961,  371,  418, 1226,  794,  367, 1270,
 1511,  429,  368, 1270,  370,  773,  372,  775,  374,  375,
  376, 1270,  305,  776,  811,  779,  339,  781,  418,  323,
  817,  344,  790,  346,  272,  357,  349,  350,  791,  352,
  353,  339,  795,  339,  953,  384,  344,  912,  346, 1226,
 1270,  349,  350,  811,  352,  353,  343, 1226,  296,  817,
  418,  819,  844,  821,  386, 1127, 1080,  339,  256,  491,
  428,  367,  344,  429,  346,  368,  369,  349,  350, 1113,
  352,  353,  256,  367,  994,  323,  381,  371,  391,  373,
  374,  874,  376, 1270,  381, 1319,  391,  381, 1160,  852,
  414, 1270, 1116,  381,  391,  385,  294,  865, 1332,  867,
  414,  414, 1022,  391,  428,  852,  429,  870,  871,  414,
  907,  256,  909,  389,  428,  428,  884,  414,  915,  857,
 1354,  753, 1194,  891,  269,  256,  414,  559, 1332, 1153,
  371,  428,  373,  901,  400,  903,  401,  294, 1106,  306,
  428,  286, 1017,  940,  776,  369,  313,  429,  413,  306,
 1407,  392,  393,  585,  357,  339,  357,  381,  325,  791,
  344,  371,  346,  373,  961,  349,  350,  418,  352,  353,
  373,  412,  373,  294,  937,  891,  944,  428,  946,  420,
  977,  949,  423,  386,  370,  386,  902,  367,  374,  369,
  367,  367, 1280,  961,  371,  958,  373,  374,  357,  376,
  376, 1289, 1173,  966,  381,  398,  399, 1169,  339, 1233,
 1144,  958, 1469,  344,  373,  346,  390,  367,  349,  350,
    6,  352,  353,  369,  367,  993,  376,  386,  996,  418,
  968,   17,  970,  376,  972,  272,  357,  367,  415,  871,
  277,  368,  363, 1315,  281,  429,  376,  374,  369, 1506,
  368,  372,  373,  415,  381,  367,  368, 1300,  376,  296,
  371,  306, 1026,  308,  376,  386,  357, 1035,  313, 1037,
 1038,  418, 1040,   59, 1528, 1529,  256,   63,  369,  368,
  325,  372,  373,  372,  370,  374,  323,  376,  374,  721,
  370,  723,  382,  383,  374,  386, 1050,  418,  429,  418,
  421,   87,   88,  368,  357,  342,  396,  397,  256, 1106,
  363,  376, 1080,  370,  371, 1108,  369,  374,  306,  372,
  373,  374,  108, 1225, 1226,  313, 1094, 1095, 1092,  368,
  421,  354,  355,  386,  966,  374,  768,  376, 1106,  771,
 1107,  367,  368, 1245,  373, 1113,  373,  376, 1116,  376,
  376, 1144, 1144, 1146, 1146,  368,  368,  354,  355,  372,
  372,  374, 1127,  376,  376,  418,  373, 1135, 1270,  376,
 1272,  157, 1127, 1141,  376, 1419, 1169, 1169,  372,  374,
  374,  376,  376,  277, 1147, 1153,  381,  367,  368,  369,
  369,  371,  372,  372,  374, 1160,  376,  381, 1166, 1167,
  386,  387,  388,  370,  371, 1160,  373,  374,  375,  256,
 1203, 1203,  370,  199,  200,  372,  374,  374,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  367, 1194,
 1305,  372, 1225, 1225, 1226,  376,  376,  372,  418, 1194,
  420,  376, 1205,  423,  370, 1213,  372,  370,  374,  372,
  294,  374, 1245, 1245, 1329,  372,  370,  373,  256,  376,
  374, 1224,  372, 1231,  376, 1233,  376,  265,  372,  267,
  374, 1346,  270,  368,  369,  261, 1273,  275, 1270, 1272,
 1272,  279,  393,  394,  395,  396,  370,  376,  372, 1364,
  288, 1366,  374,  370,  376,  372,  370,  295,  372,  285,
  294,  287,  300,  370,  343,  372,  304,  372,  372,  374,
  374,  414,  415,  299,    0,  372, 1279, 1280,  316, 1283,
  318,  307,  368,  376,  322,  371, 1289,  373,  374,  364,
  365,  317,  330,  331, 1297, 1298,  334, 1300,  370,  337,
  372,  414,  370, 1306,  372,  356,  392,  393,  418,  374,
 1315,  376,  374,  339,  376,  374, 1319,  376, 1321,  418,
 1315, 1324,  374, 1356,  376,  351,  412,  999,  354, 1332,
  372,  373,  369, 1337,  420,  364,  365,  423, 1111, 1112,
  389,  390,  397,  398,  256,  391,  392,  418,  375,  372,
  372, 1354, 1224, 1386, 1387,  376, 1389,  368,  374,  372,
  372,  387,  388,  294,  294, 1397,  374, 1400,  372,  372,
 1403,  372,  374,  256,  371,  256,  376,  294,  294,  372,
  418,  373, 1414,  381,  374, 1418,  375,  374,  373,  415,
  416,  372,  374,  418,  374, 1427, 1428,  381,  374, 1407,
  374, 1405,  372,  423,  367,  429,  374, 1279,   93, 1442,
  374, 1419,   97,   98,   99,  100,  101,  102,  103,  104,
  372,  372, 1454, 1455,    0, 1297, 1298,  339, 1436,  373,
  421,  374,  344,  343,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  294,  294,  374,  370, 1321,
  371, 1123, 1324,  418,  261, 1127,  368,  418,  370, 1131,
  372, 1469,  374,  375,  376,  491,  367,  375,  256,  256,
  374,  256,  256,  256,  381,  280,  367,  284,  390, 1511,
  368,  343,  372, 1155,  351,  370,  372,  371, 1160,  401,
  297, 1528, 1529,  372,  376,  302,  374,  374, 1506,  370,
  307,  413,  309,  310,  311,  312,  532,  376, 1512, 1513,
  317,  372,  423,  381,  321, 1519, 1520,  429,  325,  347,
 1528, 1529, 1194,  367,  381,  381,  333,  256,  554,  336,
  256,  338,  256,  559,  372,  261,  262,  372,  368, 1211,
  376,  371,  368,  373,  374,  256,  347,  374,  370,  370,
  576,  375,  367,  370,  372,  362,  348,  339,  284,  585,
  368,  374,  392,  393,  418,  418,  372,  348,  256,  368,
  367,  297,  298,  376,  367,  337,  302,  367,  356,  305,
  376,  307,  412,  309,  310,  311,  312,  381,  368,  305,
  420,  317,  371,  423,  368,  321,  368,  374,  368,  325,
  369,  372,  418,  371,  418,  368,  367,  333,    0,  418,
  336,  418,  338,  339,  371,  371,  301,  376,  344,  371,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  381,  418,  373,  371,  367,  362,  363,  371,  665,
  381,  367,  368, 1315,  370,  371,  372,  332,  374,  375,
  376,  369,  378,  379,  371,  374,  382,  383,  384,  385,
  686,  373,  372,  389,  390,  372,  374,  373,  394,  395,
  396,  397,  398,  399,  400,  401,  374,  256,  374,  418,
  256,  376,  372,  372,  370,  376,  262,  413,  418,  376,
  416,  418,  418,  372,  376,  721,  418,  723,  372,  384,
  385,  386,  372,  429,  389,  390,  391,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  381,  368,  298,  381,  370,  368,  367,  753,  372,  315,
  263,  371,  371,  368,  372,  372,    0,    0,  367,    0,
  376,  368,  768,  376,  372,  771,  368,  372,  372,  418,
  776,  370,  368,  368,  372,  372,  370,  367,  418,  418,
  368,  372,  368,  339,  376,  791,  368,  376,  344,  795,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,    0,  376,  372,  376,  367,  367,  363,  372,  372,
  368,  367,  368,  368,  370,  371,  372,  367,  374,  375,
  376,  315,  378,  379,  376,  373,  382,  383,  384,  385,
  376,  261,  376,  389,  390,  376,  376,  376,  394,  395,
  396,  397,  398,  399,  400,  401,  511,  376,  376,  376,
  263,   12,   50,    5,  284,  958, 1106,  413,  852, 1245,
  416, 1106,  418, 1459,  870,  871, 1422,  297, 1475, 1272,
 1410, 1439,  302,  429,  686,  305, 1405,  307, 1306,  309,
  310,  311,  312,    0,  256,  874,  700,  317,  874,  261,
  262,  321, 1319, 1520,  869,  325, 1270, 1338,  874, 1514,
 1432, 1428, 1513,  333, 1203, 1427,  336, 1366,  338,  844,
  532, 1306,  284, 1205,  817,  595,  581,  896,  729,  369,
 1008,   71,  399,  694,  335,  297,  298,  726,  400,  402,
  302,  937,  362,  305,  401,  307,  404,  309,  310,  311,
  312,  403,  795,  554, 1183,  317, 1279, 1127,  157,  321,
 1071,  995, 1022,  325, 1095,  979, 1083, 1085, 1156,  530,
  966,  333,  917,  424,  336,  424,  338,  339,  651,  849,
 1275, 1167,  344,  850,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,  418,   -1,
  362,  363,   -1,  999,   -1,  367,  368,   -1,  370,  371,
  372,  373,  374,  375,  376,   -1,  378,  379,   -1,  381,
  382,  383,  384,  385,  386,  387,  388,  389,  390,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,   -1,   -1,  416,   -1,  418,   -1,  420,   -1,
   -1,  423,   -1,   -1,   -1,    0,   -1,  429,  257,   -1,
   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  272,   -1,   -1,   -1,   -1,  277,   -1,
   -1,   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,
   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1, 1123,  317,   -1,
   -1, 1127,  321,   -1,  323, 1131,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,  335,  336,   -1,  338,
  257, 1147,   -1,  342,  261,   -1,   -1,   -1,   -1, 1155,
   -1,   -1,   -1,   -1, 1160,  272,   -1,   -1,   -1,   -1,
  277,   -1,   -1,  362,  281,   -1,  256,  284,   -1,  368,
  369,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,  301,  302,   -1,   -1, 1194,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1, 1205,
  317,   -1,   -1,   -1,  321, 1211,  323,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1, 1224,  336,
   -1,  338,    0,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,  896,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,  339,
  367,  368,  369,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1, 1279, 1280,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372, 1289,  374,  375,  376,   -1,   -1,   -1,
   -1, 1297, 1298,   -1, 1300,   -1,   -1,   -1,   -1,   -1,
  390,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1, 1315,
   -1,  256,  257,   -1,   -1, 1321,   -1,   -1, 1324,  264,
  265,  266,  267,  268,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,  280,   -1,   -1,   -1,  429,
  285,   -1,  287,  288,  289,  290,  291,  292,    0,   -1,
  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,  367,  368,   -1,   -1,  371,   -1,   -1,   -1,
   -1,  376,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  417,  418,  419,  420,   -1,  422,  256,  257,
   -1,   -1,   -1,   -1,  429,   -1,  264,  265,  266,  267,
  268,   -1,  270,  271,    0,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,  367,
  368,   -1,   -1,  371,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,  380,   -1,  256,   -1,  384,   -1,  386,  261,
  262,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,  417,
  418,  419,  420,   -1,  422,  297,  298,   -1,   -1,   -1,
  302,  429,   -1,  305,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,
  362,  363,   -1,   -1,   -1,  367,  368,  369,  370,  371,
  372,  373,  374,  375,  376,   -1,  378,  379,    0,   -1,
  382,  383,  384,  385,  386,   -1,   -1,  389,  390,   -1,
   -1,   -1,  394,  395,  396,  397,  398,  399,  400,  401,
  256,   -1,   -1,   -1,   -1,  261,  262,   -1,   -1,   -1,
   -1,  413,   -1,   -1,  416,   -1,  418,   -1,  420,   -1,
   -1,  423,   -1,   -1,   -1,   -1,   -1,  429,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  297,  298,   -1,   -1,   -1,  302,   -1,   -1,  305,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,  362,  363,   -1,   -1,
   -1,  367,  368,  369,  370,  371,  372,   -1,  374,  375,
  376,   -1,  378,  379,   -1,   -1,  382,  383,  384,  385,
  256,   -1,   -1,  389,  390,  261,  262,   -1,  394,  395,
  396,  397,  398,  399,  400,  401,   -1,    0,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  413,  284,   -1,
  416,   -1,  418,   -1,  420,   -1,   -1,  423,   -1,   -1,
   -1,  297,  298,  429,   -1,   -1,  302,   -1,   -1,  305,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,    0,  256,   -1,  362,  363,   -1,   -1,
  262,  367,  368,  369,  370,  371,  372,   -1,  374,  375,
  376,   -1,  378,  379,   -1,   -1,  382,  383,  384,  385,
   -1,   -1,   -1,  389,  390,   -1,   -1,   -1,  394,  395,
  396,  397,  398,  399,  400,  401,  298,   -1,   -1,   -1,
    0,   -1,   -1,   -1,   -1,   -1,   -1,  413,   -1,   -1,
  416,   -1,  418,   -1,  420,   -1,   -1,  423,   -1,   -1,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,
   -1,  363,   -1,    0,   -1,  367,  368,  369,  370,  371,
  372,  373,  374,  375,  376,   -1,  378,  379,   -1,   -1,
  382,  383,  384,  385,  386,   -1,   -1,  389,  390,   -1,
   -1,   -1,  394,  395,  396,  397,  398,  399,  400,  401,
   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,
   -1,  413,   -1,   -1,  416,   -1,  418,   -1,  420,   -1,
   -1,  423,   -1,  256,  257,   -1,   -1,  429,  261,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
  273,   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,
  283,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
    0,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  333,  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,
  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,  272,   -1,   -1,   -1,  362,
  277,   -1,   -1,   -1,  281,  368,  369,  284,   -1,   -1,
   -1,   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,  296,
  297,   -1,   -1,   -1,  301,  302,   -1,  257,   -1,   -1,
  307,  261,  309,  310,  311,  312,    0,   -1,   -1,   -1,
  317,   -1,  272,   -1,  321,   -1,  323,  277,   -1,   -1,
   -1,  281,   -1,   -1,  284,  418,  333,   -1,  335,  336,
   -1,  338,   -1,   -1,   -1,  342,  296,  297,   -1,   -1,
   -1,  301,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,  362,   -1,  317,   -1,   -1,
  257,  321,  369,  323,  261,   -1,   -1,   -1,   -1,    0,
   -1,   -1,   -1,  333,   -1,  272,  336,   -1,  338,   -1,
  277,   -1,  342,   -1,  281,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,   -1,  362,  257,  301,  302,   -1,  261,  368,  369,
  307,   -1,  309,  310,  311,  312,    0,   -1,  272,   -1,
  317,   -1,   -1,  277,  321,   -1,  323,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  296,  297,   -1,  342,   -1,  301,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,  362,   -1,  321,   -1,  323,
   -1,  368,  369,   -1,   -1,   -1,   -1,  257,   -1,  333,
   -1,  261,  336,    0,  338,   -1,   -1,   -1,  342,   -1,
   -1,   -1,  272,   -1,   -1,   -1,   -1,  277,   -1,   -1,
   -1,  281,   -1,   -1,  284,   -1,   -1,   -1,  362,   -1,
   -1,   -1,   -1,   -1,   -1,  369,  296,  297,   -1,   -1,
  257,  301,  302,   -1,  261,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,  272,   -1,  317,   -1,   -1,
  277,  321,   -1,  323,  281,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  296,
  297,   -1,  342,  257,  301,  302,   -1,  261,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,
  317,   -1,  362,  277,  321,   -1,  323,  281,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  296,  297,   -1,  342,   -1,  301,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,  362,  257,  321,   -1,  323,
  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,  272,  336,   -1,  338,   -1,  277,   -1,  342,   -1,
  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,  362,   -1,
  301,  302,   -1,  257,   -1,   -1,  307,  261,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,  272,   -1,
  321,   -1,  323,  277,   -1,   -1,   -1,  281,   -1,   -1,
  284,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,   -1,
   -1,  342,  296,  297,   -1,   -1,   -1,  301,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,  362,   -1,  317,   -1,   -1,   -1,  321,   -1,  323,
  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,  272,   -1,   -1,  342,   -1,
  277,   -1,   -1,   -1,  281,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,  296,
  297,   -1,   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,  323,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,  256,  336,
   -1,  338,   -1,   -1,   -1,  342,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,   -1,  362,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,  256,  344,  345,   -1,   -1,
   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,  380,   -1,   -1,   -1,  384,  298,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,  417,
  418,  419,  420,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,  429,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,
   -1,   -1,  363,  298,   -1,   -1,   -1,  368,  369,  370,
  371,  372,  373,  374,  375,  376,   -1,  378,  379,   -1,
  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,   -1,  256,   -1,   -1,  418,   -1,  420,
  262,   -1,  423,   -1,   -1,   -1,   -1,   -1,  429,   -1,
   -1,   -1,   -1,  368,   -1,   -1,  371,   -1,  373,  374,
   -1,   -1,   -1,  378,  379,   -1,   -1,  382,  383,  384,
  385,  386,  387,  388,  389,  390,  298,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  412,  413,   -1,
   -1,   -1,   -1,   -1,   -1,  420,   -1,   -1,  423,   -1,
   -1,   -1,   -1,   -1,  429,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,  368,  369,  370,  371,
  372,  373,  374,  375,  376,   -1,  378,  379,   -1,  381,
  382,  383,  384,  385,  386,  387,  388,  389,  390,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,   -1,  256,  256,   -1,   -1,   -1,  420,  262,
   -1,   -1,   -1,  265,   -1,  267,   -1,  429,  270,   -1,
   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,  298,   -1,   -1,  300,   -1,
   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,
  322,   -1,   -1,   -1,  256,   -1,   -1,   -1,  330,  331,
  262,   -1,  334,   -1,   -1,  337,  339,   -1,   -1,   -1,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  363,   -1,   -1,  367,  368,  298,  370,  371,  372,
  373,  374,  375,  376,   -1,  378,  379,   -1,  381,  382,
  383,  384,  385,  386,  387,  388,  389,  390,   -1,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,   -1,  256,   -1,   -1,   -1,  418,  420,  262,   -1,
  423,   -1,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,
   -1,  363,   -1,   -1,   -1,   -1,  368,  369,   -1,  371,
  372,  373,  374,   -1,  376,   -1,  378,  379,   -1,  381,
  382,  383,  384,  385,  298,  387,  388,  389,  390,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,   -1,   -1,   -1,   -1,  418,   -1,  420,   -1,
   -1,  423,   -1,   -1,   -1,  339,   -1,  429,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,  371,  372,  373,
  374,  375,  376,   -1,  378,  379,   -1,  381,  382,  383,
  384,  385,  386,  387,  388,  389,  390,   -1,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
   -1,  256,  256,   -1,   -1,   -1,  420,  262,   -1,  423,
   -1,  265,   -1,  267,   -1,  429,  270,   -1,   -1,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,  298,   -1,   -1,  300,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  368,   -1,  370,  371,  372,  373,  374,
  375,  376,   -1,  378,  379,   -1,  381,  382,  383,  384,
  385,  386,  387,  388,  389,  390,   -1,  392,  393,  394,
  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,   -1,
  256,  256,   -1,   -1,  418,  420,  262,   -1,  423,   -1,
  265,   -1,  267,   -1,  429,  270,   -1,   -1,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,  298,   -1,   -1,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  368,   -1,  370,  371,  372,  373,  374,  375,
  376,   -1,  378,  379,   -1,  381,  382,  383,  384,  385,
  386,  387,  388,  389,  390,   -1,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,   -1,  256,
   -1,   -1,  261,  418,  420,  262,   -1,  423,   -1,  266,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  297,   -1,
   -1,  298,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,  314,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,
  357,   -1,   -1,  362,   -1,   -1,  363,   -1,   -1,   -1,
   -1,  368,  369,  370,  371,  372,  373,  374,  375,  376,
   -1,  378,  379,   -1,  381,  382,  383,  384,  385,  386,
  387,  388,  389,  390,  298,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,   -1,   -1,  418,
   -1,  418,   -1,  420,   -1,   -1,  423,   -1,   -1,   -1,
   -1,   -1,  429,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,
  374,  375,  376,   -1,  378,  379,   -1,  381,  382,  383,
  384,  385,  386,  387,  388,  389,  390,  261,   -1,   -1,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  256,  413,
  284,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  297,   -1,  429,   -1,   -1,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,  362,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,
  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,
  378,  379,   -1,   -1,  382,  383,  384,  385,  386,  387,
  388,  389,  390,   -1,  418,   -1,  394,  395,  396,  397,
  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
  256,  429,   -1,   -1,   -1,   -1,  262,   -1,  368,   -1,
  370,   -1,  372,   -1,  374,  375,  376,   -1,  378,  379,
   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,  389,
  390,   -1,   -1,   -1,  394,  395,  396,  397,  398,  399,
  400,  401,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  413,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  429,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  298,   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,
  376,   -1,  378,  379,   -1,   -1,  382,  383,  384,  385,
   -1,   -1,   -1,  389,  390,   -1,  256,   -1,  394,  395,
  396,  397,  398,  399,  400,  401,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,
  378,  379,   -1,   -1,  382,  383,  384,  385,   -1,   -1,
   -1,  389,  390,   -1,  256,   -1,  394,  395,  396,  397,
  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,
   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,  389,
  390,   -1,  256,   -1,  394,  395,  396,  397,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  413,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,
  382,  383,  384,  385,   -1,   -1,   -1,  389,  390,   -1,
  256,   -1,  394,  395,  396,  397,  398,  399,  400,  401,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  413,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,
  374,  375,  376,   -1,   -1,   -1,   -1,   -1,  382,  383,
  384,  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,
  394,  395,  396,  397,  398,  399,  400,  401,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,
   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,
  376,   -1,   -1,   -1,   -1,   -1,  382,  383,  384,  385,
   -1,   -1,   -1,  389,  390,   -1,  256,   -1,   -1,   -1,
  396,  397,  398,  399,  400,  401,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,
   -1,   -1,   -1,   -1,  382,  383,  384,  385,   -1,   -1,
   -1,  389,  390,   -1,  256,   -1,   -1,   -1,  396,  397,
  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,
   -1,   -1,  382,  383,  384,  385,   -1,   -1,   -1,  389,
  390,   -1,  256,   -1,   -1,   -1,  396,  397,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  413,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,
  382,  383,  384,  385,   -1,   -1,   -1,  389,  390,   -1,
  256,   -1,   -1,   -1,  396,  397,  398,  399,  400,  401,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  413,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,
  374,  375,  376,   -1,   -1,   -1,   -1,   -1,  382,  383,
  384,  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,
   -1,   -1,  396,  397,  398,  399,  400,  401,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,
   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,
  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  384,  385,
   -1,   -1,   -1,  389,  390,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  398,  399,  400,  401,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  384,  385,   -1,   -1,
   -1,  389,  390,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  398,  399,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  384,  385,   -1,   -1,   -1,  389,
  390,   -1,  256,   -1,   -1,   -1,   -1,   -1,  398,  399,
  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  413,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  384,  385,   -1,   -1,   -1,  389,  390,   -1,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  400,  401,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  413,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,
  374,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  384,  385,   -1,   -1,   -1,  389,  390,   -1,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  400,  401,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,
   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,
  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  385,
   -1,   -1,   -1,  389,  390,   -1,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,   -1,  374,  375,  376,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  385,   -1,   -1,
   -1,  389,  390,   -1,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  413,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,
  370,   -1,  372,   -1,  374,  375,  376,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  385,   -1,   -1,   -1,   -1,
  390,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  400,  401,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  413,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  429,
   -1,   -1,   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,
  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  385,   -1,   -1,   -1,   -1,  390,   -1,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  400,  401,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  413,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,
   -1,   -1,   -1,   -1,  368,   -1,  370,   -1,  372,   -1,
  374,  375,  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  390,   -1,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  400,  401,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  413,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,
   -1,   -1,  368,   -1,  370,   -1,  372,   -1,  374,  375,
  376,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  262,  390,   -1,   -1,  266,   -1,   -1,
   -1,   -1,   -1,   -1,  400,  401,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  413,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  298,
   -1,   -1,   -1,  429,   -1,   -1,   -1,   -1,   -1,   -1,
  368,   -1,  370,   -1,  372,  314,  374,  375,  376,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  390,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  401,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  413,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,   -1,  368,
  369,  429,  371,   -1,  373,   -1,  375,  376,   -1,  378,
  379,   -1,  381,  382,  383,  384,  385,  386,  387,  388,
  389,  390,   -1,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,   -1,   -1,  256,   -1,  418,
   -1,  420,   -1,   -1,  423,  264,  265,  266,  267,   -1,
  429,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,  376,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,  418,
  419,  420,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,  376,  377,  378,  379,  380,   -1,
   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,
  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  417,  418,  419,  420,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,   -1,   -1,   -1,   -1,
  285,   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,
  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,  376,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  417,  418,  419,  420,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,  277,
  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,
  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,
   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  333,  334,  335,   -1,  337,
   -1,   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,  367,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,  376,  377,
  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,
  418,  419,  420,  264,  265,  266,  267,   -1,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,  367,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,  376,  377,  378,  379,  380,
   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,
   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  417,  418,  419,  420,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,  265,   -1,
  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  316,
  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,
  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,  367,  368,   -1,   -1,  371,   -1,   -1,
   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,
  384,   -1,  386,   -1,   -1,  372,   -1,   -1,  392,  393,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  417,  418,  419,  420,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  418,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,  306,
   -1,   -1,   -1,   -1,   -1,  295,  313,   -1,   -1,  316,
  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,
  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,
  370,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  417,  418,  419,  420,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  418,  279,
   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,
   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,
  320,  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,
   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,
  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  417,  418,  419,
  420,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,  418,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,  367,  368,   -1,   -1,  371,   -1,   -1,
   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,
  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,  417,  418,  419,  420,   -1,   -1,  264,
  265,   -1,  267,   -1,  428,  270,  271,   -1,   -1,   -1,
  275,  276,  277,   -1,  279,   -1,   -1,  265,   -1,  267,
  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,
  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  316,  300,  318,  319,  320,  304,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,  316,  334,
  318,   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,  344,
  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,
  279,   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  418,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,
   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,  367,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,  417,  418,
  419,  420,   -1,   -1,  264,  265,   -1,  267,   -1,  428,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,
   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,
   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,
   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,
  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,  418,  419,
  420,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,  418,  279,   -1,   -1,  265,
   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,
   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,
   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,
  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,   -1,
   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,
   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,
   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,
  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,  417,  418,  419,  420,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,  418,  279,   -1,   -1,  265,   -1,  267,  285,
   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,
  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,
   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,
  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,  316,  334,  318,
   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,
   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  417,  418,  419,  420,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  418,
  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,
   -1,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,
  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,
  322,   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,
  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,
   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,  418,
  419,  420,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,  418,  279,   -1,   -1,
  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,   -1,
  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,  316,  300,  318,  319,   -1,  304,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,  316,  334,  318,   -1,   -1,   -1,  322,   -1,  341,
   -1,   -1,  344,  345,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,
   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,
  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  417,  418,  419,  420,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,
  275,  276,  277,  418,  279,   -1,   -1,  265,   -1,  267,
  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,
  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,
  325,   -1,  327,   -1,  329,  330,  331,  332,  316,  334,
  318,   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,  344,
  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,
   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,
   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  417,  418,  419,  420,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
  418,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,
  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  417,
  418,  419,  420,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,   -1,   -1,  285,  327,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  262,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,  298,  377,  378,  379,  380,   -1,
  382,  383,  384,  385,  386,  387,  388,  389,   -1,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,  359,  360,
  361,  362,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  371,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,  372,  373,
  374,  375,   -1,   -1,  378,  379,  417,  418,  382,  383,
  384,  385,  386,  387,  388,  389,  390,   -1,  392,  393,
  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
   -1,  261,   -1,  263,   -1,  265,  420,  267,   -1,  423,
  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,
   -1,   -1,   -1,  293,  294,  295,  296,  297,   -1,   -1,
  300,   -1,  302,   -1,  304,   -1,  306,  307,   -1,  309,
  310,  311,  312,   -1,   -1,  315,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,   -1,
   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  362,   -1,  364,  365,  261,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,
  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,  418,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  261,   -1,  362,   -1,  265,
   -1,  267,   -1,  368,  270,   -1,  272,  273,   -1,  275,
   -1,  277,  377,  279,   -1,  281,  282,  283,  284,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,
  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
  316,  317,  318,  418,   -1,  321,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,   -1,
  336,  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  261,   -1,  362,   -1,  265,   -1,
  267,   -1,  368,  270,   -1,  272,  273,   -1,  275,   -1,
  277,  377,  279,   -1,  281,  282,  283,  284,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,  418,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,
  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
  261,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,  272,  273,   -1,  275,  362,  277,   -1,  279,   -1,
  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,   -1,
  377,   -1,  293,   -1,  295,  296,  297,   -1,   -1,  300,
   -1,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,  418,  333,  334,   -1,  336,  337,  338,   -1,   -1,
   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,
  267,  362,   -1,  270,   -1,  272,  273,  368,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,  284,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,  300,   -1,  302,  261,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,  418,   -1,  284,
   -1,   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,
  337,  338,  297,   -1,   -1,  342,   -1,  302,   -1,   -1,
  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,   -1,  362,  321,   -1,   -1,   -1,
  325,  368,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,  357,   -1,   -1,  285,   -1,  362,  288,   -1,
   -1,   -1,   -1,   -1,  369,  295,  371,   -1,  373,   -1,
  300,  418,  302,  303,  304,   -1,  306,   -1,   -1,   -1,
   -1,  386,   -1,  313,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,  418,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  371,  372,   -1,  374,   -1,   -1,  377,  378,  379,
  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  417,  418,  419,
  420,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,  306,   -1,   -1,   -1,   -1,   -1,   -1,  313,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,
  374,   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,
  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  417,  418,  419,  420,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,
  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  417,
  418,  419,  420,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,   -1,  368,   -1,   -1,  371,
   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,
   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,
  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  417,  418,  419,  420,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,  367,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,  367,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,
  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  417,  418,  419,
  420,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,
   -1,   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,
  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  417,  418,  419,  420,  285,   -1,   -1,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,
  378,  379,  380,   -1,   -1,   -1,  384,   -1,  386,   -1,
   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  417,
  418,  419,  420,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,   -1,
   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,
  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,
   -1,  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,  417,  418,  419,  420,  285,
   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,   -1,   -1,   -1,  384,   -1,
  386,   -1,   -1,   -1,   -1,   -1,  392,  393,   -1,   -1,
   -1,   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,  417,  418,  419,  420,  285,   -1,   -1,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  371,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,
  380,   -1,   -1,   -1,  384,   -1,  386,   -1,   -1,   -1,
   -1,   -1,  392,  393,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  417,  418,  419,
  420,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,  261,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,  284,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  297,
  334,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,  315,   -1,  317,
   -1,   -1,   -1,  321,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,  333,   -1,  371,  336,   -1,
  338,   -1,   -1,  377,  378,  379,  380,   -1,   -1,   -1,
  384,   -1,  386,   -1,   -1,   -1,   -1,   -1,  392,  393,
   -1,   -1,   -1,   -1,  362,   -1,   -1,   -1,   -1,   -1,
  368,  369,   -1,   -1,   -1,   -1,   -1,   -1,  263,   -1,
  265,   -1,  267,  417,  418,  270,  420,  272,  273,   -1,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,
  295,  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,  264,  265,  334,
  267,   -1,  337,  270,  271,   -1,   -1,  342,  275,  276,
  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  364,
  365,   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,   -1,   -1,  265,   -1,  267,
   -1,   -1,  270,  418,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,  359,  360,  361,  362,   -1,   -1,   -1,   -1,
  288,  265,   -1,  267,  371,   -1,  270,  295,  272,  273,
   -1,  275,  300,  277,  302,  279,  304,  281,  282,  283,
   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,  316,  293,
  318,  295,  296,   -1,  322,  323,  300,   -1,   -1,   -1,
  304,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
  417,  418,  316,   -1,  318,   -1,   -1,   -1,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  265,
  334,  267,   -1,  337,  270,   -1,  272,  273,  342,  275,
   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,
  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,
   -1,   -1,   -1,  377,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,
  418,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,   -1,  265,   -1,  267,  342,   -1,  270,   -1,
   -1,  273,   -1,  275,  418,  277,   -1,  279,   -1,  281,
  282,  283,   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,   -1,  265,   -1,  267,  300,   -1,
  270,   -1,  304,  273,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,  316,   -1,  318,  287,  288,   -1,
  322,   -1,   -1,  293,   -1,  295,   -1,   -1,  330,  331,
  300,   -1,  334,   -1,  304,  337,   -1,   -1,   -1,  265,
  342,  267,  418,   -1,  270,   -1,  316,   -1,  318,  275,
   -1,   -1,  322,  279,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,  288,   -1,  334,   -1,   -1,  337,   -1,  295,
   -1,  265,  342,  267,  300,  377,  270,   -1,  304,   -1,
  306,  275,  308,   -1,   -1,  279,   -1,  313,   -1,   -1,
  316,   -1,  318,   -1,  288,   -1,  322,   -1,   -1,  325,
   -1,  295,   -1,   -1,  330,  331,  300,   -1,  334,   -1,
  304,  337,  306,   -1,  308,  265,  418,  267,   -1,  313,
  270,   -1,  316,   -1,  318,  275,   -1,   -1,  322,  279,
   -1,  325,   -1,   -1,   -1,   -1,  330,  331,  288,   -1,
  334,   -1,   -1,  337,   -1,  295,  372,  265,  418,  267,
  300,   -1,  270,   -1,  304,   -1,  306,  275,  308,   -1,
   -1,  279,   -1,  313,   -1,   -1,  316,   -1,  318,   -1,
  288,   -1,  322,   -1,   -1,  325,  370,  295,   -1,   -1,
  330,  331,  300,   -1,  334,   -1,  304,  337,  306,   -1,
  308,  265,  418,  267,   -1,  313,  270,   -1,  316,   -1,
  318,  275,   -1,   -1,  322,  279,   -1,  325,   -1,   -1,
   -1,   -1,  330,  331,  288,   -1,  334,   -1,   -1,  337,
   -1,  295,   -1,   -1,  418,   -1,  300,   -1,   -1,   -1,
  304,   -1,  306,   -1,   -1,   -1,  265,   -1,  267,  313,
   -1,  270,  316,   -1,  318,   -1,  275,   -1,  322,   -1,
  279,  325,   -1,   -1,  283,   -1,  330,  331,   -1,  288,
  334,   -1,   -1,  337,  293,   -1,  295,   -1,  418,   -1,
   -1,  300,   -1,   -1,   -1,  304,  305,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  316,   -1,  318,
  275,   -1,   -1,  322,  279,   -1,   -1,   -1,   -1,   -1,
  418,  330,  331,  288,   -1,  334,   -1,  261,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,  272,  304,
   -1,   -1,   -1,  277,   -1,   -1,   -1,  281,   -1,   -1,
  284,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,  296,  297,  418,  330,  331,  301,  302,  334,
  261,   -1,  337,  307,   -1,  309,  310,  311,  312,   -1,
   -1,  272,   -1,  317,   -1,   -1,  277,  321,   -1,  323,
  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,  363,  333,
   -1,  335,  336,   -1,  338,  296,  297,   -1,  342,  418,
  301,  302,   -1,  261,   -1,  263,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,  362,   -1,
  321,   -1,  323,   -1,  368,  369,  284,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,   -1,  338,   -1,  297,
   -1,  342,   -1,  418,  302,   -1,  261,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,  272,   -1,  317,
   -1,  362,  277,  321,   -1,   -1,  281,  368,  369,  284,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,
  338,  296,  297,   -1,   -1,   -1,  301,  302,   -1,  261,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
  272,   -1,  317,   -1,  362,  277,  321,   -1,  323,  281,
  368,  369,  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,  296,  297,   -1,  342,   -1,  301,
  302,  261,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,  362,   -1,  321,
   -1,  323,   -1,  368,  284,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  297,   -1,  261,
  342,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
  362,  321,  284,   -1,   -1,   -1,  368,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,  297,  336,  261,  338,   -1,
  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
  284,   -1,  362,   -1,  364,  365,   -1,   -1,  368,   -1,
   -1,  333,   -1,  297,  336,  261,  338,  263,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,  315,   -1,  317,   -1,   -1,   -1,  321,  284,   -1,
  362,   -1,  364,  365,   -1,   -1,  368,   -1,   -1,  333,
   -1,  297,  336,  261,  338,   -1,  302,   -1,   -1,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,  321,  284,   -1,  362,   -1,
   -1,   -1,   -1,  261,  368,  263,   -1,  333,   -1,  297,
  336,   -1,  338,   -1,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,  284,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,  362,   -1,   -1,  297,
   -1,   -1,  368,  261,  302,  333,   -1,   -1,  336,  307,
  338,  309,  310,  311,  312,   -1,   -1,  315,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,   -1,  261,  362,  333,  364,  365,  336,  297,
  338,   -1,   -1,  301,  302,   -1,   -1,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,  284,   -1,   -1,  317,
   -1,   -1,   -1,  321,  362,   -1,   -1,   -1,   -1,  297,
   -1,   -1,   -1,   -1,  302,  333,   -1,   -1,  336,  307,
  338,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,  333,   -1,   -1,  336,   -1,
  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  362,
  };

#line 6724 "cs-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

void push_current_container (TypeDefinition tc, object partial_token)
{
	if (module.Evaluator != null){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();

		undo.AddTypeContainer (current_container, tc);
	}
	
	if (partial_token != null)
		current_container.AddPartial (tc);
	else
		current_container.AddTypeContainer (tc);
		
	++lexer.parsing_declaration;
	current_container = tc;
	current_type = tc;
}

TypeContainer pop_current_class ()
{
	var retval = current_container;

	current_container = current_container.Parent;
	current_type = current_type.Parent as TypeDefinition;

	return retval;
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

List<Tuple<Modifiers, Location>> GetModifierLocations ()
{
	var result = mod_locations;
	mod_locations = null;
	return result;
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, ParserSession session)
	: this (reader, file, file.Compiler.Report, session)
{
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report, ParserSession session)
{
	this.file = file;
	current_container = current_namespace = file;
	
	this.module = file.Module;
	this.compiler = file.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	yacc_verbose_flag = settings.VerboseParserFlag;
	doc_support = settings.DocumentationFile != null;
	lexer = new Tokenizer (reader, file, session);
	oob_stack = new Stack<object> ();
	lbag = session.LocationsBag;
	use_global_stacks = session.UseJayGlobalArrays;
	parameters_bucket = session.ParametersStack;
}

public void parse ()
{
	eof_token = Token.EOF;
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			Error_SyntaxError (yyToken);
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			if (yacc_verbose_flag > 0 || e is FatalException)
				throw;
		
			report.Error (589, lexer.Location, "Internal compiler error during parsing" + e);
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

void start_block (Location loc)
{
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (loc);
	}
	current_anonymous_method.IsAsync = isAsync;
	
	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	if (async_block)
		anon_block.IsAsync = true;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token);
}

void Error_SyntaxError (int error_code, int token)
{
	Error_SyntaxError (error_code, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;
	
	// Avoid duplicit error message after unterminated string literals
	if (token == Token.LITERAL && lexer.Location.Column == 0)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";

	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int REFVALUE = 359;
  public const int REFTYPE = 360;
  public const int MAKEREF = 361;
  public const int ASYNC = 362;
  public const int AWAIT = 363;
  public const int GET = 364;
  public const int SET = 365;
  public const int LAST_KEYWORD = 366;
  public const int OPEN_BRACE = 367;
  public const int CLOSE_BRACE = 368;
  public const int OPEN_BRACKET = 369;
  public const int CLOSE_BRACKET = 370;
  public const int OPEN_PARENS = 371;
  public const int CLOSE_PARENS = 372;
  public const int DOT = 373;
  public const int COMMA = 374;
  public const int COLON = 375;
  public const int SEMICOLON = 376;
  public const int TILDE = 377;
  public const int PLUS = 378;
  public const int MINUS = 379;
  public const int BANG = 380;
  public const int ASSIGN = 381;
  public const int OP_LT = 382;
  public const int OP_GT = 383;
  public const int BITWISE_AND = 384;
  public const int BITWISE_OR = 385;
  public const int STAR = 386;
  public const int PERCENT = 387;
  public const int DIV = 388;
  public const int CARRET = 389;
  public const int INTERR = 390;
  public const int DOUBLE_COLON = 391;
  public const int OP_INC = 392;
  public const int OP_DEC = 393;
  public const int OP_SHIFT_LEFT = 394;
  public const int OP_SHIFT_RIGHT = 395;
  public const int OP_LE = 396;
  public const int OP_GE = 397;
  public const int OP_EQ = 398;
  public const int OP_NE = 399;
  public const int OP_AND = 400;
  public const int OP_OR = 401;
  public const int OP_MULT_ASSIGN = 402;
  public const int OP_DIV_ASSIGN = 403;
  public const int OP_MOD_ASSIGN = 404;
  public const int OP_ADD_ASSIGN = 405;
  public const int OP_SUB_ASSIGN = 406;
  public const int OP_SHIFT_LEFT_ASSIGN = 407;
  public const int OP_SHIFT_RIGHT_ASSIGN = 408;
  public const int OP_AND_ASSIGN = 409;
  public const int OP_XOR_ASSIGN = 410;
  public const int OP_OR_ASSIGN = 411;
  public const int OP_PTR = 412;
  public const int OP_COALESCING = 413;
  public const int OP_GENERICS_LT = 414;
  public const int OP_GENERICS_LT_DECL = 415;
  public const int OP_GENERICS_GT = 416;
  public const int LITERAL = 417;
  public const int IDENTIFIER = 418;
  public const int OPEN_PARENS_LAMBDA = 419;
  public const int OPEN_PARENS_CAST = 420;
  public const int GENERIC_DIMENSION = 421;
  public const int DEFAULT_COLON = 422;
  public const int OPEN_BRACKET_EXPR = 423;
  public const int EVAL_STATEMENT_PARSER = 424;
  public const int EVAL_COMPILATION_UNIT_PARSER = 425;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 426;
  public const int DOC_SEE = 427;
  public const int GENERATE_COMPLETION = 428;
  public const int COMPLETE_COMPLETION = 429;
  public const int UMINUS = 430;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
